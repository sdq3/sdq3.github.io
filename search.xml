<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>33种编程语言的HelloWorld</title>
    <url>/HelloWorld.html</url>
    <content><![CDATA[<p><strong>我的核心代码</strong></p>
<a id="more"></a>
<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">printf(&quot;Hello, World!&quot;);<br></code></pre></td></tr></table></figure>
<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">cout&lt;&lt;&quot;Hello, World!&quot;;<br></code></pre></td></tr></table></figure>

<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">echo &quot;Hello, World!&quot;;<br></code></pre></td></tr></table></figure>

<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">print(&quot;Hello, World!&quot;)<br></code></pre></td></tr></table></figure>

<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt; Hello World! &lt;&#x2F;title&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>Hello, World!<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<h1 id="易语言"><a href="#易语言" class="headerlink" title="易语言"></a>易语言</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">信息框（“Hello, World!”，，64）<br></code></pre></td></tr></table></figure>
<h1 id="Jscript"><a href="#Jscript" class="headerlink" title="Jscript"></a>Jscript</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">document.write(&quot;Hello, World!&quot;)<br></code></pre></td></tr></table></figure>

<h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">System.out.println(&quot;Hello, World!&quot;);<br></code></pre></td></tr></table></figure>

<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">CREATE TABLE MESSAGE (TEXT CHAR(13));<br>INSERT INTO MESSAGE (TEXT) VALUES (&#39;Hello, World!&#39;);<br>SELECT TEXT FROM MESSAGE;<br>DROP TABLE MESSAGE;<br></code></pre></td></tr></table></figure>

<h1 id="JScript"><a href="#JScript" class="headerlink" title="JScript"></a>JScript</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">alert(&quot;Hello, World!&quot;)<br></code></pre></td></tr></table></figure>

<h1 id="VBScript"><a href="#VBScript" class="headerlink" title="VBScript"></a>VBScript</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">MsgBox &quot;Hello, World!&quot;<br></code></pre></td></tr></table></figure>

<h1 id="VB"><a href="#VB" class="headerlink" title="VB"></a>VB</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Print &quot;Hello, World!&quot;<br></code></pre></td></tr></table></figure>

<h1 id="VC"><a href="#VC" class="headerlink" title="VC"></a>VC</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">MessageBox(&quot;Hello, World!&quot;);<br></code></pre></td></tr></table></figure>

<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">echo Hello, World!<br></code></pre></td></tr></table></figure>
<h1 id="perl"><a href="#perl" class="headerlink" title="perl:"></a>perl:</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">print &#39;Hello, World!&#39;<br></code></pre></td></tr></table></figure>

<h1 id="powerBuilder"><a href="#powerBuilder" class="headerlink" title="powerBuilder"></a>powerBuilder</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">messagebox（&quot;Hello, World!&quot;)<br></code></pre></td></tr></table></figure>

<h1 id="C-1"><a href="#C-1" class="headerlink" title="C#"></a>C#</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">System.Console.WriteLine(&quot;Hello, World!&quot;)<br></code></pre></td></tr></table></figure>

<h1 id="COBOL"><a href="#COBOL" class="headerlink" title="COBOL"></a>COBOL</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">DISPLAY &#39;Hello, World!&#39;<br></code></pre></td></tr></table></figure>

<h1 id="AS"><a href="#AS" class="headerlink" title="AS"></a>AS</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Alert.show(&quot;Hello, World!&quot;);<br></code></pre></td></tr></table></figure>

<h1 id="Malbolge"><a href="#Malbolge" class="headerlink" title="Malbolge"></a>Malbolge</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">(&#39;&amp;%:9]!~&#125;|z2Vxwv-,POqponl$Hjig%eB@@&gt;&#125;&#x3D;&lt;M:9wv6WsU2T|nm-,jcL(I&amp;%$#&quot;<br>&#96;CB]V?Tx&lt;uVtT&#96;Rpo3NlF.Jh++FdbCBA@?]!~|4XzyTT43Qsqq(Lnmkj&quot;Fhg$&#123;z@&gt;<br></code></pre></td></tr></table></figure>

<h1 id="DOS-批处理"><a href="#DOS-批处理" class="headerlink" title="DOS 批处理"></a>DOS 批处理</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">echo Hello, World!<br></code></pre></td></tr></table></figure>

<h1 id="OC"><a href="#OC" class="headerlink" title="OC"></a>OC</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">NSLog(@&quot;Hello, World!&quot;)<br></code></pre></td></tr></table></figure>

<h1 id="QBasic"><a href="#QBasic" class="headerlink" title="QBasic"></a>QBasic</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Print &quot;Hello, World!&quot;<br></code></pre></td></tr></table></figure>

<h1 id="Asp"><a href="#Asp" class="headerlink" title="Asp"></a>Asp</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Response.Write &quot;Hello, World!&quot;<br></code></pre></td></tr></table></figure>
<h1 id="ActionScript"><a href="#ActionScript" class="headerlink" title="ActionScript"></a>ActionScript</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">trace(&quot;Hello, World!&quot;);<br></code></pre></td></tr></table></figure>
<h1 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;% Response.Write(&quot;Hello, World!&quot;) %&gt;<br></code></pre></td></tr></table></figure>
<h1 id="Delphi"><a href="#Delphi" class="headerlink" title="Delphi"></a>Delphi</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">ShowMessage(&#39;Hello, World!&#39;);<br></code></pre></td></tr></table></figure>

<h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">sed -ne &#39;1s&#x2F;.*&#x2F;Hello, World!&#x2F;p&#39;<br></code></pre></td></tr></table></figure>

<h1 id="bc"><a href="#bc" class="headerlink" title="bc"></a>bc</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">#!&#x2F;usr&#x2F;bin&#x2F;bc -q<br>print &quot;Hello World&quot;<br>quit<br></code></pre></td></tr></table></figure>

<h1 id="Small-Basic"><a href="#Small-Basic" class="headerlink" title="Small Basic"></a>Small Basic</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">TextWindow.WriteLine(&quot;Hello, World!&quot;)<br></code></pre></td></tr></table></figure>

<h1 id="SNOBOL"><a href="#SNOBOL" class="headerlink" title="SNOBOL"></a>SNOBOL</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">OUTPUT &#x3D; &quot;Hello, World!&quot;<br>END<br></code></pre></td></tr></table></figure>

<h1 id="Smalltalk"><a href="#Smalltalk" class="headerlink" title="Smalltalk"></a>Smalltalk</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Transcript show: &#39;Hello, World!&#39;<br></code></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>Android ROM移植</title>
    <url>/Android-ROM-transplant.html</url>
    <content><![CDATA[<p><strong>本人是用Arch，顺便来传一下教</strong><br><img src="/images/编译Android/Arch教徒.jpg" style="width: 200px; height: 200px;"></p>
<a id="more"></a>

<p><strong>此教程针对 高通和联发科 64位就多替换lib64 等有64字眼的</strong></p>
<h1 id="移植-刷机包-ROM-建议在Linux的平台是-下载个解压软件"><a href="#移植-刷机包-ROM-建议在Linux的平台是-下载个解压软件" class="headerlink" title="移植 刷机包/ROM 建议在Linux的平台是 下载个解压软件"></a>移植 刷机包/ROM 建议在Linux的平台是 下载个解压软件</h1><ul>
<li>推荐sdat2</li>
</ul>
<h2 id="移植boot-img"><a href="#移植boot-img" class="headerlink" title="移植boot.img"></a>移植boot.img</h2><ul>
<li>步骤: 解压出官方booT和要移植包的boot, 替换进入官方<ul>
<li>替换文件: dt.img和zlmagewe 没有这个文件的话就无视</li>
</ul>
</li>
</ul>
<p><strong>可以开机之后 再进行以下操作</strong></p>
<ul>
<li>开机失败就替换fstab.qcom为官方</li>
</ul>
<h2 id="刷机脚本修改"><a href="#刷机脚本修改" class="headerlink" title="刷机脚本修改"></a>刷机脚本修改</h2><ul>
<li>1.机型验证<ul>
<li>getprop开头的那行删除，如果安装中断的话就是这行没删完,</li>
</ul>
</li>
<li>2.分区挂卸<ul>
<li>分区注意mmcblk0p字眼的记得改成官方的</li>
</ul>
</li>
<li>3.删除底层文件刷入<ul>
<li>底层文件一般在包里面，正常的包有system(system.dat…), boot.img,META—INF, data其他多余的未知文件和文件夹就是底层文件, 这些必须删除, 不然就可能会黑砖</li>
</ul>
</li>
</ul>
<p><strong>参考脚本 一般放在META-INF里面</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ui_print(&quot;Patching firmware images...&quot;);<br>ifelse(msm.boot_update(&quot;main&quot;), (<br>package_extract_file(&quot;firmware-update/tz.mbn&quot;, &quot;/dev/block/bootdevice/by-name/tz&quot;);<br>package_extract_file(&quot;firmware-update/hyp.mbn&quot;, &quot;/dev/block/bootdevice/by-name/hyp&quot;);<br>package_extract_file(&quot;firmware-update/sbl1.mbn&quot;, &quot;/dev/block/bootdevice/by-name/sbl1&quot;);<br>package_extract_file(&quot;firmware-update/rpm.mbn&quot;, &quot;/dev/block/bootdevice/by-name/rpm&quot;);<br>package_extract_file(&quot;firmware-update/emmc_appsboot.mbn&quot;, &quot;/dev/block/bootdevice/by-name/aboot&quot;);<br>), &quot;&quot;);<br>ifelse(msm.boot_update(&quot;backup&quot;), (<br>package_extract_file(&quot;firmware-update/tz.mbn&quot;, &quot;/dev/block/bootdevice/by-name/tzbak&quot;);<br>package_extract_file(&quot;firmware-update/hyp.mbn&quot;, &quot;/dev/block/bootdevice/by-name/hypbak&quot;);<br>package_extract_file(&quot;firmware-update/sbl1.mbn&quot;, &quot;/dev/block/bootdevice/by-name/sbl1bak&quot;);<br>package_extract_file(&quot;firmware-update/rpm.mbn&quot;, &quot;/dev/block/bootdevice/by-name/rpmbak&quot;);<br>package_extract_file(&quot;firmware-update/emmc_appsboot.mbn&quot;, &quot;/dev/block/bootdevice/by-name/abootbak&quot;);<br>), &quot;&quot;);<br>msm.boot_update(&quot;finalize&quot;);<br>package_extract_file(&quot;firmware-update/NON-HLOS.bin&quot;, &quot;/dev/block/bootdevice/by-name/modem&quot;);<br></code></pre></td></tr></table></figure>


<h2 id="WIFI修复"><a href="#WIFI修复" class="headerlink" title="WIFI修复"></a>WIFI修复</h2><ul>
<li>步骤: 以下文件或文件夹替换为官方 没有就不替换</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">system/etc/firmware/wlan<br>system/etc/wifi<br>system/lib/modules/pronto<br>system/lib/modules/wlan.ko<br></code></pre></td></tr></table></figure>
<p><strong>可以用WIFI之后 再进行以下操作</strong></p>
<ul>
<li>还是不行再看看boot.img里面的init.qcom.rc对比官方boot里面的init.qcom.rc修改 还不行就看刷机脚本, 改里面的wifi软链接</li>
</ul>
<h3 id="内存卡使用修复"><a href="#内存卡使用修复" class="headerlink" title="内存卡使用修复"></a>内存卡使用修复</h3><ul>
<li>以下文件替换或修改为官方</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">system/etc/permissions/platform.xml<br></code></pre></td></tr></table></figure>
<h3 id="修复按键"><a href="#修复按键" class="headerlink" title="修复按键"></a>修复按键</h3><ul>
<li>以下文件替换或修改为官方</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">system/usr/icu<br>system/usr/idc<br><br>//不行再多替换 <br>system/usr/keylayout/Generic.kl<br></code></pre></td></tr></table></figure>
<h3 id="修复声音"><a href="#修复声音" class="headerlink" title="修复声音"></a>修复声音</h3><p><strong>以下文件替换为官方</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">    方法1:对比system里面的bin、etc、lib、vendor/lib（64位多对比lib64、vendor/lib64），把官方包多余的加进去，再替换etc/mixer开头的<br><br>    方法2:对比system里面的bin、etc、lib、vendor/lib（64位多对比lib64、vendor/lib64），把官方包多余的加进去，再替换system/hw/audio.primary.msmxxxx.so(64位多替换system/lib64/hw/audio.primary.msmxxxx.so)<br><br>    方法3:对比system里面的bin、etc、lib、vendor/lib（64位多对比lib64、vendor/lib64），把官方包多余的加进去，再替换system/lib/hw/audio开头的（64位多替换system/lib64/hw/audio）<br><br>    方法4:对比system里面的bin、etc、lib、vendor/lib（64位多对比lib64、vendor/lib64），把官方包多余的加进去，再替换以下:<br>    system/etc/mixer开头的<br>    system/lib/hw/audio.primary.msmxxxx.so<br>    (64位多替换system/lib64/hw/audio.primary.msmxxxx.so)<br><br>    方法5:对比system里面的bin、etc、lib、vendor/lib（64位多对比lib64、vendor/lib64），把官方包多余的加进去，再替换以下:<br>    system/etc/audio和mixer开头的<br>    system/lib/hw/audio开头的<br>    (64位多替换system/lib64/hw/audio开头的)<br><br>注: lib和lib64文件夹里面的audio开头(不包括hw文件夹)64位替换了不卡屏，但32位可能会卡屏<br></code></pre></td></tr></table></figure>
<h3 id="修改型号"><a href="#修改型号" class="headerlink" title="修改型号"></a>修改型号</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">// 品牌<br>ro.product.brand=xiaomi<br>// 型号<br>ro.product.name=2<br>// 关于手机显示的型号<br>ro.product.model=redmi 2<br>// 分辨率<br>ro.sf.lcd_density=320 <br>// 这个也是有关型号的<br>ro.build.product=2<br>// 虚拟按键  1是关0是开，没有这行的就加进去<br>qemu.hw.mainkeys=0 <br></code></pre></td></tr></table></figure>
<h3 id="修复相机"><a href="#修复相机" class="headerlink" title="修复相机"></a>修复相机</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">// 把System/lib文件夹里面的文件替换成官方包的文件，可以解决相机打开停止的BUG问题<br>libcamalgo.so<br>libcamera_client.so<br>libcameracustom.so<br>libcameraservice.so<br>libmhal.so<br>libmhalcontent.so<br>libmhaldrv.so<br>libmhalmdp.so<br>libmhalpipe.so<br>libmhalscenario.so<br>libmhalutility.so<br></code></pre></td></tr></table></figure>

<h3 id="修复传感器"><a href="#修复传感器" class="headerlink" title="修复传感器"></a>修复传感器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">// 替换System/lib/hw  文件夹里面<br>sensors.default.so<br></code></pre></td></tr></table></figure>

<h1>移植有风险, 不保证无bug</h1>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Bodhi Linux安装教程(老电脑的福利)</title>
    <url>/Bodhi-Linux.html</url>
    <content><![CDATA[<p><strong>本人是2008年的联想电脑, Bodhi Linux是我唯一能完美运行的带桌面的发行版</strong></p>
<a id="more"></a>

<p><strong>以下是我的电脑的参数</strong></p>
<p><img src="/images/BodhiLinux%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B(%E8%80%81%E7%94%B5%E8%84%91%E7%9A%84%E7%A6%8F%E5%88%A9)/%E8%81%94%E6%83%B3G430.jpg"></p>
<h1 id="第一步-安装Bodhi-Linux"><a href="#第一步-安装Bodhi-Linux" class="headerlink" title="第一步 安装Bodhi Linux"></a>第一步 安装Bodhi Linux</h1><p><strong>Bodhi Linux<a href="https://nchc.dl.sourceforge.net/project/bodhilinux/5.1.0/bodhi-5.1.0-64.iso">个人建议Standard版本</a>如果你想选择别的版本到<a href="https://www.bodhilinux.com/download/">官网找</a></strong></p>
<p><a href="https://www.bilibili.com/video/BV1aW411C7NR">安装视频参考Ubantu的, 都是可视化界面安装</a></p>
<h1 id="第二步-老电脑无法连接WIFI-所以终端输入以下命令"><a href="#第二步-老电脑无法连接WIFI-所以终端输入以下命令" class="headerlink" title="第二步 老电脑无法连接WIFI 所以终端输入以下命令"></a>第二步 老电脑无法连接WIFI 所以终端输入以下命令</h1><p><strong>建议用网线装机</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ sudo apt-get update<br>$ sudo apt-get install bcmwl-kernel-source<br></code></pre></td></tr></table></figure>

<p><strong>仍然没有的话 就在终端输入以下命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ sudo nano /etc/modprobe.d/blacklist.conf   //nano命令ctrl+x退出，选择y后保存<br>$ blacklist acer-wmi   //最后一行加入<br></code></pre></td></tr></table></figure>

<h1 id="第三步-安装安装中文环境"><a href="#第三步-安装安装中文环境" class="headerlink" title="第三步 安装安装中文环境"></a>第三步 安装安装中文环境</h1><p><strong>安装中文字体和中文语言包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ sudo apt-get update<br>$ sudo apt-get install -y language-pack-zh-hans language-pack-zh-hans-base language-pack-gnome-zh-hans language-pack-gnome-zh-hans-base fonts-wqy-microhei<br></code></pre></td></tr></table></figure>

<p><strong>然后按照以下打开步骤</strong></p>
<p><img src="/images/BodhiLinux%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B(%E8%80%81%E7%94%B5%E8%84%91%E7%9A%84%E7%A6%8F%E5%88%A9)/%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%871.jpg"><br><img src="/images/BodhiLinux%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B(%E8%80%81%E7%94%B5%E8%84%91%E7%9A%84%E7%A6%8F%E5%88%A9)/%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%872.jpg"><br><img src="/images/BodhiLinux%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B(%E8%80%81%E7%94%B5%E8%84%91%E7%9A%84%E7%A6%8F%E5%88%A9)/%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%873.jpg"><br><img src="/images/BodhiLinux%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B(%E8%80%81%E7%94%B5%E8%84%91%E7%9A%84%E7%A6%8F%E5%88%A9)/%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%874.jpg"></p>
<h1 id="第四步安装输入法"><a href="#第四步安装输入法" class="headerlink" title="第四步安装输入法"></a>第四步安装输入法</h1><p><strong>这里<a href="https://pinyin.sogou.com/linux/">安装搜狗输入法</a></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ sudo apt-get install fonts-droid-fallback zip   //安装它的依赖包<br>$ sudo dpkg -i xxx    //xxx为下载的包名 后缀名也要<br></code></pre></td></tr></table></figure>
<h1 id="第五步安装一些常用软件"><a href="#第五步安装一些常用软件" class="headerlink" title="第五步安装一些常用软件"></a>第五步安装一些常用软件</h1><p><strong>例如安装vim</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ sudo apt-get install vim   //vim是文本编辑软件<br></code></pre></td></tr></table></figure>
<p><strong>例如浏览器 它自身也有web浏览器 看个人喜欢</strong></p>
<p><strong>安装火狐浏览器和中文语言包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ sudo apt-get remove firefox<br>$ sudo apt-get install -y firefox firefox-locale-zh-hans<br></code></pre></td></tr></table></figure>
<p><strong>安装谷歌浏览器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ sudo wget http://www.linuxidc.com/files/repo/google-chrome.list -P /etc/apt/sources.list.d/<br>wget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -     //先添加源<br>$ sudo apt-get update<br>$ sudo apt-get install google-chrome-stable     //安装谷歌浏览器<br></code></pre></td></tr></table></figure>
<h1 id="安装neofetch"><a href="#安装neofetch" class="headerlink" title="安装neofetch"></a>安装neofetch</h1><p><strong>终端输入以下命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ sudo add-apt-repository ppa:dawidd0811/neofetch<br>$ sudo apt-get update<br>$ sudo apt-get install neofetch<br>$ neofetch<br></code></pre></td></tr></table></figure>
<p><strong>本人试了(CrunchBang Linux), (Zenix Linux), (antiX Linux), (Zenwalk Linux), (Xubuntu Linux), (Lubuntu Linux), (Tiny Core Linux), (SliTaz Linux), (Porteus Linux), (Puppy Linux), (Silverblue Linux), (4MLinux)等等带桌面的发行版然后就唯独Bodhi Linux最满意</strong></p>
<p><strong>至于为什么要带桌面的发行版, 因为要日用偶尔看看B站什么的</strong></p>
<p><strong>关于这台电脑用的硬盘 大小80G 有9724个坏道 拆掉坏掉的戴尔一条三星的DDR2 才有2G内存可以体验</strong></p>
<p><img src="/images/BodhiLinux%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B(%E8%80%81%E7%94%B5%E8%84%91%E7%9A%84%E7%A6%8F%E5%88%A9)/%E5%9D%8F%E9%81%93.jpg"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 三种基本选择器</title>
    <url>/CSS%E4%B8%89%E7%A7%8D%E5%9F%BA%E6%9C%AC%E9%80%89%E6%8B%A9%E5%99%A8.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="第一种-标签选择器"><a href="#第一种-标签选择器" class="headerlink" title="第一种  标签选择器"></a>第一种  标签选择器</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">  p&#123;<br>      color: blue;   //蓝色字体<br>      background: red;    //设置背景图颜色<br>      border-radius: 24px;    //设置圆角边框<br>      font-size: 80px;    //设置字体大小<br>    &#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sdq1&quot;</span>&gt;</span>史迪奇骑士<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sdq2&quot;</span>&gt;</span>史迪奇打手<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>史迪奇国王<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="第二种-类-class-选择器"><a href="#第二种-类-class-选择器" class="headerlink" title="第二种 类 class 选择器"></a>第二种 类 class 选择器</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  .sdq1&#123;<br>      color: blue;   //蓝色字体<br>      background: red;    //设置背景图颜色<br>      borde-radius: 24px;    //设置圆角边框<br>      font-size: 80px;    //设置字体大小<br>  &#125;<br>  .sdq2&#123;<br>      color: red;   //红色字体<br>  &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sdq1&quot;</span>&gt;</span>史迪奇骑士<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sdq2&quot;</span>&gt;</span>史迪奇打手<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇国王<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>类选择器 .class的名称{}</strong></p>
<p><strong>好处: 可以多个标签归类, 是同一个class, 可以复用</strong></p>
<h1 id="第三种-id选择器"><a href="#第三种-id选择器" class="headerlink" title="第三种 id选择器"></a>第三种 id选择器</h1><p><strong>id选择器 #id的名称{}</strong></p>
<p><strong>id必须保证全局唯一</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  #sdq1&#123;<br>      color: blue;   //蓝色字体<br>      background: red;    //设置背景图颜色<br>      borde-radius: 24px;    //设置圆角边框<br>      font-size: 80px;    //设置字体大小<br>  &#125;<br>  .sdq2&#123;<br>      color: red;   //红色字体<br>  &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sdq1&quot;</span>&gt;</span>史迪奇骑士<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sdq2&quot;</span>&gt;</span>史迪奇打手<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇国王<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="优先级-id选择器-gt-class选择器-gt-标签选择器"><a href="#优先级-id选择器-gt-class选择器-gt-标签选择器" class="headerlink" title="优先级: id选择器 &gt; class选择器&gt; 标签选择器"></a>优先级: id选择器 &gt; class选择器&gt; 标签选择器</h1><p><strong>优先级不遵循就近原则, 是固定的</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>标签选择器: 选择一类标签 标签名{}</strong></p>
<p><strong>类/class选择器: 选择所有的class属性一致的标签, 跨标签 .类名{}</strong></p>
<p><strong>id选择器: 全局唯一 id名{}</strong></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 伪类选择器</title>
    <url>/CSS%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  &#125;<br>  ul li:first-child&#123;   //first-child意思是选中第一个<br>      color: red;   //红色字体<br>  &#125;<br>  ul li:last-child&#123;   //last-child意思是选中最后一个<br>      color: blue;   //红色字体<br>  &#125;<br>  p:nth-child(2)&#123;   //选中p1: 定位到父元素, 选择当前的第一个元素也就是选择当前p元素的父级元素, 选中父级元素的第一个, 并且是当前元素才生效<br>      color: yellow;   //黄色字体<br>  &#125;<br>  ul li:last-child&#123;   //last-child意思是选中最后一个<br>      color: red;   //红色字体<br>  &#125;<br>  p:nth-of-type(2)&#123;   //nth-of-type意思是选中父类下元素的第二个类型<br>      color: red;   //红色字体<br>  &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇骑士<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇打手<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇国王<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 列表</title>
    <url>/CSS%E5%88%97%E8%A1%A8.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  ol li&#123;<br>        color: blue;<br>       &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇法师<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇战士<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇辅助<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇坦克<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇刺客<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  ul li&#123;<br>      list-style: none;          //去掉原点<br>      list-style: cirle;         //空心圆<br>      list-style: decimal;       //数字<br>      list-style: square;        //正方形<br>        &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇法师<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇战士<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇辅助<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇坦克<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇刺客<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  dl dd dt&#123;<br>        color: blue;<br>       &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>史迪奇近战<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇战士<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇辅助<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇坦克<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇刺客<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>史迪奇远程<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇法师<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>史迪奇射手<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 层次选择器</title>
    <url>/CSS%E5%B1%82%E6%AC%A1%E9%80%89%E6%8B%A9%E5%99%A8.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="第一种-后代选择器"><a href="#第一种-后代选择器" class="headerlink" title="第一种  后代选择器"></a>第一种  后代选择器</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  &#125;<br>  body h1&#123;<br>      color: red;   //红色字体<br>  &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇骑士<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇打手<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇国王<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>后代选择器: 在某个元素的后面 祖爷爷 爷爷 爸爸 儿子</strong></p>
<h1 id="第二种-子选择器"><a href="#第二种-子选择器" class="headerlink" title="第二种 子选择器"></a>第二种 子选择器</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  &#125;<br>  body&gt;h1&#123;<br>      color: red;   //红色字体<br>  &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇骑士<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇打手<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇国王<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>子选择器: 只有一代 儿子</strong></p>
<h1 id="第三种-相邻兄弟选择器"><a href="#第三种-相邻兄弟选择器" class="headerlink" title="第三种 相邻兄弟选择器"></a>第三种 相邻兄弟选择器</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  &#125;<br>  .sdq+h1&#123;<br>      color: red;   //红色字体<br>  &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇骑士<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sdq1&quot;</span>&gt;</span>史迪奇打手<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇国王<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>相邻兄弟选择器: 只有一个, 相邻(向下)</strong></p>
<h1 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  &#125;<br>  .sdq~h1&#123;<br>      color: red;   //红色字体<br>  &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇骑士<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sdq1&quot;</span>&gt;</span>史迪奇打手<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇国王<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>通用选择器: 当前选中元素的向下的所有兄弟元素</strong></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 属性选择器(常用)</title>
    <url>/CSS%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>$<br>.sdq1 a&#123; <br>     float: left;  //left往左float浮动<br>     dispay: block;  //dispay规定元素应该生成的框的类型block此元素将显示为块级元素，此元素前后会带有换行符。<br>     heigh: 50px;  //heigh高度<br>     width: 50px;  //width宽度<br>     border-radius: 10px;  //border-radius圆角边框<br>     <br>     text-align: center;   //text-align对齐center剧中<br>     color: yellow;  //color文字颜色<br>     text-decoration: none;  //text-decoration下划线none不显示<br>     margin-right: 5px;    //margin-right外边距向右<br>     font: bold 20px/50px Arial;   //font设置文字的字体bold字体大小20px字体的大小50px行高Arial是一种字体<br> &#125;<br>  //格式a[]&#123;&#125;  存在id的属性的元素  <br> a[class*=first]&#123;        //=是绝对等于  *=是包含这个元素<br>     background: yellow;<br> &#125;<br> a[href^=xxy]&#123;          //^=表示以什么开头     <br>     background: green;<br> &#125;<br> a[href$=ghfgh]&#123;          //$=表示以什么结尾     <br>     background: powder;<br> &#125;<br>  <br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;xxy.fgdhrth&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;links item first&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span>史迪奇<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;links item&quot;</span>&gt;</span>史迪仔<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;links item&quot;</span>&gt;</span>史迪奇骑士<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;links item&quot;</span>&gt;</span>史迪奇国王<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;links item&quot;</span>&gt;</span>史迪奇勇士<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;hh.ghfgh&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;links item&quot;</span>&gt;</span>史迪奇巫师<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 三种导入样式</title>
    <url>/CSS%E4%B8%89%E7%A7%8D%E5%AF%BC%E5%85%A5%E6%A0%B7%E5%BC%8F.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="span标签"><a href="#span标签" class="headerlink" title="span标签"></a>span标签</h1><p><strong>span标签: 重点突出的字, 使用span套起来</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  #sdq1&#123;<br>      color: blue;<br>    &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>$ 我叫<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sdq1&quot;</span>&gt;</span>史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br> <br></code></pre></td></tr></table></figure>

<h1 id="字体风格"><a href="#字体风格" class="headerlink" title="字体风格"></a>字体风格</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  body&#123;<br>      font-family: &quot;Arial Black&quot;, 楷体;   //字体<br>      color:blue;<br>    &#125;<br>  h1&#123;<br>      font-size: 50px;    //字体大小<br>    &#125;<br>  .sdq1&#123;<br>      font-weight: bolder;  //粗体<br>    &#125;<br>  p&#123;<br>      font: oblique bolder 12px &quot;楷体&quot;;   //斜体oblique粗细bolder大小12px<br>      color:blue;<br>    &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇的故事<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sdq1&quot;</span>&gt;</span>生物史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>5岁女孩莉萝聪明善良, 她最爱听猫王的老歌, 也一直梦想拥有一只属于自己的宠物狗<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>史迪奇只能把自己的两只脚藏起来, 外表看起来和别的小狗一样<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当外星人终于在地球上发现了伪装的史迪奇时, 他们绑架了莉萝想逼史迪奇就范, 为了救回自己的好朋友, 也为了证明自己不是无可救药的危险分子, 史迪奇只有使出浑身解数, 放手一搏了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h1><p><strong>装饰</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  h1&#123;<br>      color:blue;     //颜色<br>      text-align: center;  //文本对齐的方式 <br>      text-indent: 2em;     //首行缩进<br>      line-height: 20px;    //行高 <br>      text-decoration: overline;   //上划线<br>      text-decoration: line-through;   //中划线<br>      text-decoration: underline   //下划线<br>    &#125;<br>   img,span&#123;<br>             vertical-align: middle;<br>          &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇的王国<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/x.jpg&quot;</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="超链接伪类"><a href="#超链接伪类" class="headerlink" title="超链接伪类"></a>超链接伪类</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  //默认颜色<br>   a&#123;  <br>        text-decoration: none;<br>        color: #000000;<br>     &#125;  <br>   //鼠标悬浮状态 <br>   a:hover&#123;  <br>        color: blue;<br>     &#125;     <br>   //鼠标按住未释放状态 <br>   a:active&#123;  <br>        color: rad;<br>     &#125;      <br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>$<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇的王国<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>史迪奇<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  //默认颜色<br>   #sdq&#123;  <br>        text-shawdow: blue 10px 10px 10px;    //text-shawdow是阴影, 阴影颜色, 水平偏移, 垂直偏移, 阴影半径<br>     &#125;       <br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>$<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>史迪奇的王国<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>$ <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sdq&quot;</span>&gt;</span>史迪奇<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS-边距-边框-阴影-浮动-定位-透明-z-index-动画</title>
    <url>/CSS8.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="内外边距"><a href="#内外边距" class="headerlink" title="内外边距"></a>内外边距</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    div&#123;<br>       /* margin是外边距 1 2 3 4 分别对应 上 下 左 右  */<br>       margin:1 2 3 4; <br>       /* padding是内边距 上下左右的边距都是33px */<br>       padding:33px;       <br>        &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>![](/images/BodhiLinux安装教程(</p>
<p>)/1.jpg)</p>
<h1 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>div&#123;<br>     /* border是边框 3px是边框的粗细 soshed是边框的样式 black是边框的颜色 */<br>     border: 3px soshed black;<br>      &#125;<br>$<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>div&#123;<br>     /* border是边框 10px是边框的粗细 solid是边框的样式 blue是边框的颜色 */<br>     border: 10px solid blue;<br>     border-radius: 100px;  //100px这是圆角边框 这个值可以随便改很好玩的<br>      &#125;<br>$<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span> <br>div&#123;<br>   width:300px;  //宽<br>   height:100px;  //高<br>   background-color:#ff9900;  //颜色<br>   -moz-box-shadow: 10px 10px 5px #888888; 老的 Firefox <br>   box-shadow: 10px 10px 5px #888888; //box-shadow 属性向框添加一个或多个阴影<br>   &#125;<br>$<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span> <br>div&#123;<br>   display: inline-block;  //将对象呈现为inline对象，但是对象的作为daoblock对象呈现<br>   float:right;  //float浮动 right右<br>   clear: right;  //右侧不允许有浮动元素<br>   clear: left;  //左侧不允许有浮动元素<br>   clear: both;  //两侧都不允许有浮动元素<br>   &#125;<br>$<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>
<!-- **解决方法 增加父级元素的高度**
**解决方法 增加一个空的div标签, 清除浮动** -->
<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span> <br>div&#123;<br>   //固定定位<br>   position: fixed;<br>   //绝对定位    没有父级元素定位的前提下, 相对浏览器定位<br>   position: absolute;<br>   //相对定位<br>   position: relative;<br>   &#125;<br>$<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="透明"><a href="#透明" class="headerlink" title="透明"></a>透明</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span> <br>div&#123;<br>    opacity: 0.5;<br>   &#125;<br>$<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br> p&#123;<br>     position:absolute;  //绝对定位<br>     left:0px;  //左侧<br>     top:0px;   //top规定元素的顶部边缘<br>     z-index:-1;<br> &#125;<br>$<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><style> 
 div {
     width: 100px;  //宽
     height: 100px;  //高
     background-color: red; //颜色
     animation-name: example;  //animation-name 属性为 @keyframes 动画规定名称
     animation-duration: 4s; //4秒
 }
$
@keyframes example {    //animation-name 属性为 @keyframes 动画规定名称
         from {background-color: red;}  //变化颜色
         to {background-color: yellow;}  //最后颜色
          }
$</style>







]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS 三种导入样式</title>
    <url>/CSS-Import-styles.html</url>
    <content><![CDATA[<p><strong>CSS个人整理</strong></p>
<a id="more"></a>

<h1 id="第一种-行内样式"><a href="#第一种-行内样式" class="headerlink" title="第一种  行内样式"></a>第一种  行内样式</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>行内样式<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><img src="/images/CSS%E4%B8%89%E7%A7%8D%E5%AF%BC%E5%85%A5%E6%A0%B7%E5%BC%8F/%E8%A1%8C%E5%86%85%E6%A0%B7%E5%BC%8F.jpg"></p>
<h1 id="第二种-内部样式"><a href="#第二种-内部样式" class="headerlink" title="第二种 内部样式"></a>第二种 内部样式</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  h1&#123;<br>      color: blue;<br>    &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><img src="/images/CSS%E4%B8%89%E7%A7%8D%E5%AF%BC%E5%85%A5%E6%A0%B7%E5%BC%8F/%E5%86%85%E9%83%A8%E6%A0%B7%E5%BC%8F.jpg"></p>
<h1 id="第三种-外部样式"><a href="#第三种-外部样式" class="headerlink" title="第三种 外部样式"></a>第三种 外部样式</h1><p><strong>另外一个css页面</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span>&gt;</span>    //链接式  属于html<br>  @import url(&quot;css/style.css&quot;)          //导入式  属于CSS2.1 了解就可以<br>$ <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  h1&#123;<br>      color: blue;<br>    &#125;<br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><img src="/images/CSS%E4%B8%89%E7%A7%8D%E5%AF%BC%E5%85%A5%E6%A0%B7%E5%BC%8F/%E5%A4%96%E9%83%A8%E6%A0%B7%E5%BC%8F.jpg"></p>
<h1 id="优先级-行内样式-gt-内部样式-gt-外部样式"><a href="#优先级-行内样式-gt-内部样式-gt-外部样式" class="headerlink" title="优先级: 行内样式 &gt; 内部样式 &gt; 外部样式"></a>优先级: 行内样式 &gt; 内部样式 &gt; 外部样式</h1><p><strong>优先级看就近原则</strong></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>EJS常用标签</title>
    <url>/EJS.html</url>
    <content><![CDATA[<p><strong>EJS个人整理</strong></p>
<a id="more"></a>

<h1 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ //用于控制流<br>$ &lt;%    %&gt;    //逻辑代码输出(JS编辑), 如 <span class="hljs-keyword">if</span>, <span class="hljs-keyword">for</span>等使用 <br>$<br>$ //用于转义的输出 <br>$ &lt;%=  %&gt;     //输出 HTML转义后  的字符串 到模板中      用于转义的输出<br>$<br>$ //用于非转义的输出<br>$ &lt;%-  %&gt;     //输出 原始的HTML串到模板中, 不对HTML进行转义    &lt;&gt;被浏览器识别  看做HTML  <br>$<br>$ &lt;%_ _%&gt;     //控制流使用空白字符移除模式<br>$ <br>$ &lt;%<span class="hljs-comment">#   %&gt;    //注释</span><br>$<br>$ &lt;%%  %&gt;     //直接输出 &lt;%  %&gt;<br>$<br>$ -%&gt;         //结束标签用于换行移除模式<br>$<br>$自定义分隔符 (例如, 使用 <span class="hljs-string">&#x27;&lt;? ?&gt;&#x27;</span> 代替 <span class="hljs-string">&#x27;&lt;% %&gt;&#x27;</span>)<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>EJS</category>
      </categories>
  </entry>
  <entry>
    <title>HTML iframe内联框架</title>
    <url>/HTML-iframe.html</url>
    <content><![CDATA[<p><strong>HTML个人整理</strong></p>
<a id="more"></a>

<h1 id="iframe-内联框架"><a href="#iframe-内联框架" class="headerlink" title="iframe 内联框架"></a>iframe 内联框架</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ &lt;body&gt;<br>   &lt;iframe src=<span class="hljs-string">&quot;path&quot;</span> name=<span class="hljs-string">&quot;mainFrame&quot;</span>&gt;&lt;/iframe&gt;<br>   &lt;p&gt;&lt;a href=<span class="hljs-string">&quot;https://sdq3.gitee.io&quot;</span> target=<span class="hljs-string">&quot;mainFrame&quot;</span>&gt;我叫史迪奇&lt;/a&gt;&lt;/p&gt;<br>$ &lt;/body&gt;<br></code></pre></td></tr></table></figure>
<p><strong>其中path是引用页面地址 mainFrame是框架标识名</strong></p>
<h1 id="Iframe-删除边框"><a href="#Iframe-删除边框" class="headerlink" title="Iframe - 删除边框"></a>Iframe - 删除边框</h1><p><strong>frameborder 属性规定是否显示 iframe 周围的边框 设置属性值为 “0” 就可以移除边框</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ &lt;body&gt;<br>   &lt;iframe src=<span class="hljs-string">&quot;demo_iframe.html&quot;</span> frameborder=<span class="hljs-string">&quot;0&quot;</span>&gt;&lt;/iframe&gt;<br>$ &lt;/body&gt;<br></code></pre></td></tr></table></figure>
<h1 id="使用-iframe-作为链接的目标"><a href="#使用-iframe-作为链接的目标" class="headerlink" title="使用 iframe 作为链接的目标"></a>使用 iframe 作为链接的目标</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ &lt;body&gt;<br>   &lt;iframe src=<span class="hljs-string">&quot;xxx/xxx.html&quot;</span> name=<span class="hljs-string">&quot;iframe_a&quot;</span>&gt;&lt;/iframe&gt;<br>   &lt;p&gt;&lt;a href=<span class="hljs-string">&quot;https://sdq3.gitee.io&quot;</span> target=<span class="hljs-string">&quot;iframe_a&quot;</span>&gt;我叫史迪奇&lt;/a&gt;&lt;/p&gt;<br>$ &lt;/body&gt;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>Anroid 项目结构</title>
    <url>/Anroid-structure.html</url>
    <content><![CDATA[<p><strong>未完待续</strong></p>
<a id="more"></a>

<h1 id="Project-项目结构"><a href="#Project-项目结构" class="headerlink" title="Project 项目结构"></a>Project 项目结构</h1> <ul>
        <li>app/android: 项目依赖的库</li>
        <li>app/com: 项目源代码</li>
        <li>app/Libraries: 项目资源</li>
 <ul>


 <ul>
      <li>.gradle:  Gradle编译系统，版本由wrapper指定</li>
      <li>.idea: IDE所需要的文件</li>
      <li>java(generated)</li>
      <li>app: 开发项目的所有代码和资源文件
       <ul>
        <li>build: app模块编译输出的文件</li>
        <li>libs:  放置引用的类库文件</li>
        <li>src:  放置应用的主要文件目录
            <ul>
                <li>androidTest: 单元测试目录</li>
                <li>main: 主要的项目目录和代
                    <ul>
                        <li>assets: 放置原生文件，里面的文件会保留原取需要通过流</li>
                        <li>java: 项目的源代码</li>
                        <li>res: 项目的资源</li>
                    <ul>
                </ul></ul></li>
            <ul>
        <ul>
        </ul></ul></ul></li>
      </ul></li>
 <ul>

<!-- # app里面的结构
<div id="treeView"></div>

<script type="text/javascript">

var data = {
    files: [
    {
        id: 0,
        pid: -1,
        title: '全部文件'
    },

    {
        id: 1,
        pid: 0,
        title: '我的收藏'
    },
    {
        id: 2,
        pid: 0,
        title: '我的音乐'
    },
    {
        id: 3,
        pid: 0,
        title: '我的电影'
    },
    {
        id: 4,
        pid: 0,
        title: '我的书籍'
    },

    {
        id: 11,
        pid: 1,
        title: '工具'
    },
    {
        id: 12,
        pid: 1,
        title: '画册'
    },
    {
        id: 13,
        pid: 1,
        title: '班级图片'
    },

    {
        id: 41,
        pid: 4,
        title: 'JavaScript 高级程序设计'
    },
    {
        id: 42,
        pid: 4,
        title: '锋利的jQuery'
    },
    {
        id: 43,
        pid: 4,
        title: 'JavaScript语言精粹'
    }
    ]
};

function getLevelById(data,id) {
    return getParents(data,id).length;
}

function hasChilds(data,id){
    return getChildById(data,id).length !== 0;
}

function getChildById(arr,pid){
    var newArr = [];
    for( var i = 0; i < arr.length; i++ ){
        if( arr[i].pid == pid ){
            newArr.push(arr[i]);
        }
    };

    return newArr;
}

function getParents(data,currentId){
    var arr = [];
    for( var i = 0; i < data.length; i++ ){
        if( data[i].id == currentId ){
            arr.push(data[i]);
            arr = arr.concat(getParents(data,data[i].pid))
            break;
        }
    }
    return arr;
}

;(function (window, undefined) {
  var treeView = tools.$('#treeView');
  var fileData = data.files;

  初始化
  treeView.innerHTML = treeHtml(fileData, -1);

  事件
  var fileItem = tools.$('.treeNode');
  var root_icon = tools.$('.icon-control', fileItem[0])[0];

  root_icon.className = 'icon icon-control icon-minus';

  tools.each(fileItem, function (item) {
    filesHandle(item);
  });

  function treeHtml(fileData, fileId) {
    var _html = '';
    var children = getChildById(fileData, fileId);
    var hideChild = fileId > 0 ? 'none' : '';

    _html += '<ul class="'+hideChild+'">';

    children.forEach(function (item, index) {
      var level = getLevelById(fileData, item.id);
      var distance = (level - 1) * 20 + 'px';
      var hasChild = hasChilds(fileData, item.id);
      var className = hasChild ? '' : 'treeNode-empty';
      var treeRoot_cls = fileId === -1 ? 'treeNode-cur' : '';

      _html += `
        <li>
          <div class="treeNode ${className} ${treeRoot_cls}" style="padding-left: ${distance}" data-file-id="${item.id}">
            <i class="icon icon-control icon-add"></i>
            <i class="icon icon-file"></i>
            <span class="title">${item.title}</span>
          </div>
          ${treeHtml(fileData, item.id)}
        </li>`;
    });

    _html += '</ul>';

    return _html;
  };

  function filesHandle(item) {
    tools.addEvent(item, 'click', function () {
      var treeNode_cur = tools.$('.treeNode-cur')[0];
      var fileId = item.dataset.fileId;
      var curElem = document.querySelector('.treeNode[data-file-id="'+fileId+'"]');
      var hasChild = hasChilds(fileData, fileId);
      var icon_control = tools.$('.icon-control', item)[0];
      var openStatus = true;

      tools.removeClass(treeNode_cur, 'treeNode-cur');
      tools.addClass(curElem, 'treeNode-cur');

      if (hasChild) {
        openStatus = tools.toggleClass(item.nextElementSibling, 'none');

        if (openStatus) {
          icon_control.className = 'icon icon-control icon-add';
        } else {
          icon_control.className = 'icon icon-control icon-minus';
        }
      }
    });
  };
})(window);

var tools = (function(){
    var toolsObj = {
        $:function(selector,context){
            /*

             * #id
             * .class
             * 标签
             * "#id li"
             * ".class a"
             * */
            context = context || document;
            if(selector.indexOf(" ") !== -1){
                return context.querySelectorAll(selector);
            }else if( selector.charAt(0) === "#" ){
                return document.getElementById(selector.slice(1))
            }else if( selector.charAt(0) === "." ){
                return context.getElementsByClassName(selector.slice(1));
            }else{
                return context.getElementsByTagName(selector);
            }
        },
        addEvent:function(ele,eventName,eventFn){
            ele.addEventListener(eventName,eventFn,false);
        },
        removeEvent:function(ele,eventName,eventFn){
            ele.removeEventListener(eventName,eventFn,false);
        },
        addClass:function (element,clsNames){
            if( typeof clsNames === "string" ){
                if(!tools.hasClass(element,clsNames)){
                    element.className += " "+clsNames;
                }
            }
        },
        removeClass:function (element,clsNames){
            var classNameArr = element.className.split(" ");
            for( var i = 0; i < classNameArr.length; i++ ){
                if( classNameArr[i] === clsNames ){
                    classNameArr.splice(i,1);
                    i--;
                }
            }
            element.className = classNameArr.join(" ");
        },
        hasClass:function(ele,classNames){

            var classNameArr = ele.className.split(" ");
            for( var i = 0; i < classNameArr.length; i++ ){
                if( classNameArr[i] === classNames ){
                    return true;
                }
            }

            return false;
        },
        toggleClass:function (ele,classNames){
            if( tools.hasClass(ele,classNames) ){
                tools.removeClass(ele,classNames);
                return false;
            }else{
                tools.addClass(ele,classNames);
                return true;
            }
        },
        parents:function(obj,selector){
            /*

             * selector
             * id
             * class
             * 标签
             * */

            if( selector.charAt(0) === "#" ){
                while(obj.id !== selector.slice(1)){
                    obj = obj.parentNode;
                }
            }else if( selector.charAt(0) === "." ){
                while((obj && obj.nodeType !== 9) && !tools.hasClass(obj,selector.slice(1))){
                    obj = obj.parentNode;
                }
            }else{
                while(obj && obj.nodeType !== 9 && obj.nodeName.toLowerCase() !== selector){
                    obj = obj.parentNode;
                }
            }

            return obj && obj.nodeType === 9  ? null : obj;
        },
        each:function(obj,callBack){
            for( var i = 0; i < obj.length; i++ ){
                callBack(obj[i],i);
            }
        },
        getEleRect:function(obj){
            return obj.getBoundingClientRect();
        },
        collisionRect:function(obj1,obj2){
            var obj1Rect = tools.getEleRect(obj1);
            var obj2Rect = tools.getEleRect(obj2);

            var obj1W = obj1Rect.width;
            var obj1H = obj1Rect.height;
            var obj1L = obj1Rect.left;
            var obj1T = obj1Rect.top;

            var obj2W = obj2Rect.width;
            var obj2H = obj2Rect.height;
            var obj2L = obj2Rect.left;
            var obj2T = obj2Rect.top;
            //碰上返回true 否则返回false
            if( obj1W+obj1L>obj2L && obj1T+obj1H > obj2T && obj1L < obj2L+obj2W && obj1T<obj2T+obj2H ){
                return true
            }else{
                false;
            }
        },
        store:function (namespace, data)  {
            if (data) {
                return localStorage.setItem(namespace, JSON.stringify(data));
            }

            var store = localStorage.getItem(namespace);
            return (store && JSON.parse(store)) || [];
        },
        extend:function (obj){
            var newArr = obj.constructor === Array ? [] : {};
            for( var attr in obj ){
                if( typeof obj[attr] === "object"){
                    newArr[attr] = tools.extend(obj[attr]);
                }else{
                    newArr[attr] = obj[attr];
                }
            }
            return newArr;
        },
        hide:function (element){
            return element.style.display = "none";
        },
        show:function (element){
            return element.style.display = "block";
        },
        getOffset:function (obj){
            return {
                width:obj.offsetWidth,
                height:obj.offsetHeight
            }
        },
        insertBefore: function(newElem, parentNode) {
          if (parentNode.firstElementChild) {
            parentNode.insertBefore(newElem, parentNode.firstElementChild);
          } else {
            parentNode.appendChild(newElem);
          }
        }
    }

    return toolsObj;

}())


</script> -->
</ul></ul></ul></ul>]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Arch系统包桌面傻瓜式安装 (有手就行)</title>
    <url>/Arch-install.html</url>
    <content><![CDATA[<p><strong>本人是Arch教徒过来传一下教</strong> </p>
<img src="/images/Arch傻瓜式安装/Arch教徒.jpg" style="width: 200px; height: 200px;">
<a id="more"></a>

<p><strong>在Windows里用DiskGenius转GPT之后 删除你所要安装Arch的分区</strong></p>
<img src="/images/Arch傻瓜式安装/转GPT格式.jpg" style="width: 300px; height: 150px;">

<p><strong>磁盘变更还可以用Lixux命令来 不建议使用</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ partrd /dev/xxx  //你要变更的磁盘<br></code></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ gpt<br></code></pre></td></tr></table></figure>
<p>然后退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ quit<br></code></pre></td></tr></table></figure>
<h1 id="第一步-先要有一个启动盘-这里推荐清华大学开源软件镜像站"><a href="#第一步-先要有一个启动盘-这里推荐清华大学开源软件镜像站" class="headerlink" title="第一步 先要有一个启动盘 这里推荐清华大学开源软件镜像站"></a>第一步 先要有一个启动盘 这里推荐<a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/">清华大学开源软件镜像站</a></h1><h1 id="第二步-引导界面选择第一个-进入U盘"><a href="#第二步-引导界面选择第一个-进入U盘" class="headerlink" title="第二步 引导界面选择第一个 进入U盘"></a>第二步 引导界面选择第一个 进入U盘</h1><p><strong>先检查一下是不是UEFI启动,输入以下命令，有输出就代码是UEFI启动，检查BIOS设置是否为UEFI, BIOS设置每个机型都不一样</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ ls /sys/firmware/efi/efivars<br></code></pre></td></tr></table></figure>
<h1 id="第三步-检查网络连接"><a href="#第三步-检查网络连接" class="headerlink" title="第三步 检查网络连接"></a>第三步 检查网络连接</h1><p><strong>建议直接插网线，然后ping一下百度，有反应继续 没反应检查网线</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ ping www.baidu.com<br></code></pre></td></tr></table></figure>

<p>然后CTRL+Z退出</p>
<p><strong>如果你想用WIFI就执行以下步骤</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ iwctl<br></code></pre></td></tr></table></figure>
<p><strong>查看网卡 通常都是wlan0</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ device list<br></code></pre></td></tr></table></figure>
<p><strong>以下命令是扫描你范围内的无线网卡</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ station wlan0 get-networks<br></code></pre></td></tr></table></figure>

<p><strong>找到你的WIFI</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ station wlan0 connect xxx    //无线网卡名字通常是wlan0，WIFI名字xxx<br></code></pre></td></tr></table></figure>
<p><strong>Passphrase:是让你输密码</strong></p>
<p><strong>然后以下命令退出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure>
<h1 id="第四步-设置系统时钟更新-与网络时间同步"><a href="#第四步-设置系统时钟更新-与网络时间同步" class="headerlink" title="第四步 设置系统时钟更新 与网络时间同步"></a>第四步 设置系统时钟更新 与网络时间同步</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ timedatectl set-ntp <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>
<p><strong>查看是否执行完同步</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ timedatectl status<br></code></pre></td></tr></table></figure>
<h1 id="第五步-更换镜像源"><a href="#第五步-更换镜像源" class="headerlink" title="第五步 更换镜像源"></a>第五步 更换镜像源</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ vim /etc/pamcan.d/mtrrorlist<br></code></pre></td></tr></table></figure>
<p><strong>查找: Server = <a href="https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch">https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</a></strong></p>
<h1 id="第六步-分区"><a href="#第六步-分区" class="headerlink" title="第六步 分区"></a>第六步 分区</h1><p><strong>查看分区</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ lsblk<br></code></pre></td></tr></table></figure>
<p><strong>然后正式分区</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ cfdisk /dev/xxx   //你要变更的磁盘<br></code></pre></td></tr></table></figure>
<p><strong>终于到这里了 这里是图形化界面很好查找</strong><br><img src="/images/Arch傻瓜式安装/图形化界面.jpg" style="width: 750px; height: 100px;"></p>
<p><strong>(New是新建) (Resize是调整大小) (Quit是退出) (Type是类型) (Heip是帮助) (Wrire是保存) (Dump是丢弃)</strong></p>
<p><strong>步骤: 先点New建一个300M的文件，然后点Type选择EFI System点击，再点New建一个2G的文件，然后点Type选择Linux swap点击，最后点New建一个(根目录)主分区把剩下的所有内存用上，然后点Type选择Linux filesystem点击，然后Wrire回车，并输入yes，然后拍照，点击Quit退出</strong></p>
<img src="/images/Arch傻瓜式安装/例子.jpg" style="width: 900px; height: 300px;">

<p><strong>以防万一，检查一下</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ cfdisk -l<br></code></pre></td></tr></table></figure>
<h1 id="第七步-格式化操作"><a href="#第七步-格式化操作" class="headerlink" title="第七步 格式化操作"></a>第七步 格式化操作</h1><p><strong>格式化主分区(根目录)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ mkfs.ext4 /dev/xxx   //就是你刚刚Linux filesystem的<br></code></pre></td></tr></table></figure>
<p><strong>格式化EFI分区</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ mkfs.vfat /dev/xxx     //就是你刚刚EFI System的<br></code></pre></td></tr></table></figure>
<p><strong>格式化swap分区</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ mkfswap -f /dev/xxx     //就是你刚刚Linux swap的<br></code></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ swapon /dev/xxx     //就是你刚刚Linux swap的<br></code></pre></td></tr></table></figure>
<h1 id="第八步-挂载"><a href="#第八步-挂载" class="headerlink" title="第八步 挂载"></a>第八步 挂载</h1><p><strong>挂载根目录 注意/mnt前面有空格</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ mount /dev/(就是你刚刚Linux filesystem的) /mnt<br></code></pre></td></tr></table></figure>
<p><strong>挂载EFI分区 先创建boot目录 再里面创建EFI目录 注意/mnt前面还有空格</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ mkdir /mnt/boot<br></code></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ mkdir /mnt/boot/EFI<br></code></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ mount /dev/xxx /mnt/boot/EFI       //xxx就是你刚刚EFI System的<br></code></pre></td></tr></table></figure>
<h1 id="第九步-安装系统"><a href="#第九步-安装系统" class="headerlink" title="第九步 安装系统"></a>第九步 安装系统</h1><p><strong>这三个包必安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pacstrap /mnt base linux linux-firmware<br></code></pre></td></tr></table></figure>
<p><strong>然后安装功能性软件 联网的有dhcpcd iwd，编辑器有vim，提权有sudo</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pacstrap /mnt dhcpcd iwd vim sudo<br></code></pre></td></tr></table></figure>
<p><strong>然后定义etc分区</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ genfstab -U /mnt &gt;&gt; /mnt/etc/fstab<br></code></pre></td></tr></table></figure>
<p><strong>以防万一还是检查一下</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ cat /mnt/etc/fstab<br></code></pre></td></tr></table></figure>
<h1 id="第七步-把环境迁移到新系统"><a href="#第七步-把环境迁移到新系统" class="headerlink" title="第七步 把环境迁移到新系统"></a>第七步 把环境迁移到新系统</h1><p><strong>迁移命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ arch-chroot /mnt<br></code></pre></td></tr></table></figure>
<p><strong>创建时区 例如: 上海</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ ln -sf /usr.share/zoneinfo/Asia/Shanghai /etc/localtime<br></code></pre></td></tr></table></figure>
<p><strong>同步时区</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hwclock --systohc<br></code></pre></td></tr></table></figure>
<p><strong>设置语言 留意en_US.UTF-8 UTF-8</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ vim /etc/locale.gen<br></code></pre></td></tr></table></figure>
<p><strong>然后生成</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ locale-gen<br></code></pre></td></tr></table></figure>
<p><strong>然后输入内容</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;LANG=EN_us.utf-8 &gt; /etc/locale.conf&#x27;</span><br></code></pre></td></tr></table></figure>
<p><strong>以防万一 检查一下</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ cat /etc/locale.conf<br></code></pre></td></tr></table></figure>
<h1 id="第八步-用户设置"><a href="#第八步-用户设置" class="headerlink" title="第八步 用户设置"></a>第八步 用户设置</h1><p><strong>Root用户设置密码</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ passwd root<br></code></pre></td></tr></table></figure>
<p><strong>intel英特尔CPU安装这个</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pacman -S intel-ucode<br></code></pre></td></tr></table></figure>
<p><strong>AMD超微CPU安装这个</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pacman -S amd-ucode<br></code></pre></td></tr></table></figure>
<h1 id="第九步-安装引导程序"><a href="#第九步-安装引导程序" class="headerlink" title="第九步 安装引导程序"></a>第九步 安装引导程序</h1><p><strong>安装grub引导</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pacman -S grub efibootmgr<br></code></pre></td></tr></table></figure>
<p><strong>然后给grub引导取个名字</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ grub-install --target=x86_64-efi --efi-directory=/bootloader-id=Arch      //这里我起Arch 顺便起个名字就好了<br></code></pre></td></tr></table></figure>
<p><strong>生成配置文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure>
<p><strong>退出安装环境</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure>
<p><strong>卸载分区</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ umount -R /mnt<br></code></pre></td></tr></table></figure>
<p><strong>然后重启一下 可选择物理重启和命令重启</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ reboot<br></code></pre></td></tr></table></figure>
<img src="/images/Arch傻瓜式安装/效果.jpg" style="width: 318px; height: 144px;">

<h1 id="第九步-安装到此为止-安装桌面玩下看"><a href="#第九步-安装到此为止-安装桌面玩下看" class="headerlink" title="第九步 安装到此为止 安装桌面玩下看"></a>第九步 安装到此为止 安装桌面玩下看</h1><h1 id="桌面环境"><a href="#桌面环境" class="headerlink" title="桌面环境"></a>桌面环境</h1><p><strong>创建用户 有利于提权</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ useradd -m -g users G wheel -s /bin/bash xxx     //xxx是你顺便起个用户名<br></code></pre></td></tr></table></figure>
<p><strong>创建密码</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ passwd wallen<br></code></pre></td></tr></table></figure>
<p><strong>编辑新用户权限 %wheel ALL=(ALL) ALL</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ EDITOR=vim visudo<br></code></pre></td></tr></table></figure>
<p><strong>创建桌面环境命令和其他必要软件命令  dolpin是文件管理器  konsole是终端</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pacman -S plasma-meta dolphin konsole<br></code></pre></td></tr></table></figure>
<p><strong>配置sddm设置为开机自启</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ systemctl <span class="hljs-built_in">enable</span> sddm<br></code></pre></td></tr></table></figure>
<p><strong>开启一下32位支持库 有些程序还是32位 所以要装一些库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ sudo vim /etc/pacman.conf<br></code></pre></td></tr></table></figure>
<p><strong>配置</strong></p>
<img src="/images/Arch傻瓜式安装/配置.jpg" style="width: 900px; height: 300px;">

<p><strong>刷新数据库内容</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pacmam -Syyu<br></code></pre></td></tr></table></figure>
<p><strong>然后重启一下 可选择物理重启和命令重启</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ reboot<br></code></pre></td></tr></table></figure>
<h1 id="Vim命令"><a href="#Vim命令" class="headerlink" title="Vim命令"></a>Vim命令</h1><p><strong>按A键是编辑模式</strong><br><strong>按回车键是执行</strong><br><strong>按两下D键是剪切</strong><br><strong>按两下G键是回到第一行</strong><br><strong>按P键粘贴</strong><br><strong>按N键查找下一个</strong><br><strong>按ESC 然后输入 :wq 是保存并退出</strong></p>
<h1 id="neofetch查看系统"><a href="#neofetch查看系统" class="headerlink" title="neofetch查看系统"></a>neofetch查看系统</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pacman -S neofetch<br></code></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ neofetch<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>HTML 基本控件大集合</title>
    <url>/HTML-operation.html</url>
    <content><![CDATA[<p><strong>HTML个人整理</strong></p>
<a id="more"></a>

<h1 id="输入框与密码框"><a href="#输入框与密码框" class="headerlink" title="输入框与密码框"></a>输入框与密码框</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ &lt;p&gt;名字: &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> size=<span class="hljs-string">&quot;33&quot;</span>&gt;&lt;/p&gt;    &lt;!-- text指输入框  size 文本框的长度 --&gt;<br>$ &lt;p&gt;密码: &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;pwd&quot;</span> maxlength=<span class="hljs-string">&quot;8&quot;</span> size=<span class="hljs-string">&quot;33&quot;</span>&gt;&lt;/p&gt;    &lt;!-- password指密码框   maxlength最大长度 --&gt;   <br></code></pre></td></tr></table></figure>
<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>名字: <input type="text" name="username" size="33"></p>    
<p>密码: <input type="password" name="pwd" maxlength="8" size="33"></p> 
</body>
</html>

<hr>
<!-- <font size=28 color='#00BFFF'>-------------------------------------------------------------------</font> -->

<h1 id="get与post"><a href="#get与post" class="headerlink" title="get与post"></a>get与post</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ &lt;form action=<span class="hljs-string">&quot;史迪奇的第一个网站.html&quot;</span> mathod=<span class="hljs-string">&quot;get&quot;</span>&gt;&lt;/iframe&gt;    &lt;!-- get方式提交 uil可以看到提交信息 不安全 但是高效 --&gt;<br>$ &lt;form action=<span class="hljs-string">&quot;史迪奇的第一个网站.html&quot;</span> mathod=<span class="hljs-string">&quot;post&quot;</span>&gt;&lt;/iframe&gt;   &lt;!-- post方式提交 Form Data可以看到提交信息 比较安全 传输大文件 --&gt;<br></code></pre></td></tr></table></figure>
<hr>
<h1 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h1><p><strong>单选框 radio 要value表示单选框的值 name表示组用来实现单选效果</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;p&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;radio&quot;</span> value=<span class="hljs-string">&quot;boy&quot;</span> name=<span class="hljs-string">&quot;sex&quot;</span>/&gt;男<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;radio&quot;</span> value=<span class="hljs-string">&quot;girl&quot;</span> name=<span class="hljs-string">&quot;sex&quot;</span>/&gt;女<br>&lt;/p&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>
    <input type="radio" value="boy" name="sex">男
    <input type="radio" value="girl" name="sex">女
</p>
</body>
</html>

<hr>
<h1 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h1><p><strong>多选框 checkbox 也要value表示单选框的值 name表示组用来实现单选效果</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;p&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> value=<span class="hljs-string">&quot;code&quot;</span> name=<span class="hljs-string">&quot;hobby&quot;</span>/&gt;敲代码<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> value=<span class="hljs-string">&quot;sleep&quot;</span> name=<span class="hljs-string">&quot;hobby&quot;</span>/&gt;睡觉<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> value=<span class="hljs-string">&quot;eat&quot;</span> name=<span class="hljs-string">&quot;hobby&quot;</span>/&gt;吃饭<br>&lt;/p&gt;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>
    <input type="checkbox" value="code" name="hobby">敲代码
    <input type="checkbox" value="sleep" name="hobby">睡觉
    <input type="checkbox" value="eat" name="hobby">吃饭
</p>
</body>
</html>

<hr>
<h1 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;p&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;code&quot;</span> name=<span class="hljs-string">&quot;btn1&quot;</span>/&gt;   &lt;!-- button普通按钮 --&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;image&quot;</span> src=<span class="hljs-string">&quot;...&quot;</span>/&gt;   &lt;!-- 图片按钮 这里懒得添加图片了--&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;       &lt;!-- submit提交 --&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;        &lt;!-- reset重置 --&gt;<br>&lt;/p&gt;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>
    <input type="button" value="code" name="btn1">
    <input type="image" src="...">
    <input type="submit">  
    <input type="reset">   
</p>
</body>
</html>

<hr>
<h1 id="下拉框-列表框"><a href="#下拉框-列表框" class="headerlink" title="下拉框/列表框"></a>下拉框/列表框</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;p&gt;<br>地区:<br>    &lt;select name=<span class="hljs-string">&quot;列表名称&quot;</span>&gt;<br>    &lt;option value=<span class="hljs-string">&quot;选择地区&quot;</span>&gt;金星&lt;/option&gt;<br>    &lt;option value=<span class="hljs-string">&quot;选择地区&quot;</span>&gt;木星&lt;/option&gt;<br>    &lt;option value=<span class="hljs-string">&quot;选择地区&quot;</span>&gt;水星&lt;/option&gt;<br>    &lt;option value=<span class="hljs-string">&quot;选择地区&quot;</span>&gt;火星&lt;/option&gt;<br>    &lt;option value=<span class="hljs-string">&quot;选择地区&quot;</span>&gt;图星&lt;/option&gt;<br>    &lt;option value=<span class="hljs-string">&quot;选择地区&quot;</span>&gt;地球&lt;/option&gt;<br>    &lt;/select&gt;<br>&lt;/p&gt;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>
地区:
    <select name="列表名称">
    <option value="选择地区">金星</option>
    <option value="选择地区">木星</option>
    <option value="选择地区">水星</option>
    <option value="选择地区">火星</option>
    <option value="选择地区">土星</option>
    <option value="选择地区">地球</option>
    </select>
</p>
</body>
</html>

<hr>
<h1 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;p&gt;反馈:<br>     &lt;!--textarea表示文本域 cols表示列 row表示行 --&gt;<br>    &lt;textarea name = <span class="hljs-string">&quot;textarea&quot;</span> cols=<span class="hljs-string">&quot;50&quot;</span> row=<span class="hljs-string">&quot;10&quot;</span>&gt;文本内容&lt;/textarea&gt;    <br>&lt;/p&gt;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合t</title>
</head>
<body>
<p>反馈:
    <textarea name="textarea" cols="50" row="10">文本内容</textarea>    
</p>
</body>
</html>

<hr>
<h1 id="文件域"><a href="#文件域" class="headerlink" title="文件域"></a>文件域</h1><p><strong>通过name属性上传, 没有name属性就上传不了</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;p&gt;请选择文件:<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;files&quot;</span>&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;上传&quot;</span> name=<span class="hljs-string">&quot;upload&quot;</span>&gt;<br>&lt;/p&gt;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>请选择文件:
    <input type="file" name="files">
    <input type="button" value="上传" name="upload">
</p>
</body>
</html>

<hr>
<h1 id="简单验证"><a href="#简单验证" class="headerlink" title="简单验证"></a>简单验证</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;p&gt;邮箱:<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;email&quot;</span> name=<span class="hljs-string">&quot;email&quot;</span>&gt;   &lt;!-- email表示邮箱 --&gt;<br>&lt;/p&gt;<br>$<br>&lt;p&gt;网址:<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;url&quot;</span> name=<span class="hljs-string">&quot;url&quot;</span>&gt;       &lt;!-- url表示网址 --&gt;<br>&lt;/p&gt;<br>$<br>&lt;p&gt;商品数量:<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;number&quot;</span> name=<span class="hljs-string">&quot;num&quot;</span> max=<span class="hljs-string">&quot;100&quot;</span> min=<span class="hljs-string">&quot;0&quot;</span> step=<span class="hljs-string">&quot;1&quot;</span>&gt;       &lt;!-- number表示数字 max表示最大值 min表示最小值 step表示步长 --&gt;<br>&lt;/p&gt;<br>$<br>&lt;p&gt;声音大小:<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;range&quot;</span> name=<span class="hljs-string">&quot;voice&quot;</span> max=<span class="hljs-string">&quot;100&quot;</span> min=<span class="hljs-string">&quot;0&quot;</span> step=<span class="hljs-string">&quot;1&quot;</span> &gt;       &lt;!-- range表示滑块 max表示最大值 min表示最小值 step表示步长 --&gt;<br>$<br>&lt;/p&gt;<br>&lt;p&gt;搜索框:<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;search&quot;</span> name=<span class="hljs-string">&quot;search&quot;</span>&gt;       &lt;!-- search表示搜索框 --&gt;<br>&lt;/p&gt;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>    
</head>
<body>
<p>邮箱:
    <input type="email" name="email">   
</p>
<p>网址:
    <input type="url" name="url">       
</p>
<p>商品数量:
    <input type="number" name="num" max="100" min="0" step="1">       
</p>
<p>声音大小:
    <input type="range" name="voice" max="100" min="0" step="1" style="width:350px;">       
</p>
<p>搜索框:
    <input type="search" name="search">       
</p>
</body>
</html>

<hr>
<h1 id="表单应用"><a href="#表单应用" class="headerlink" title="表单应用"></a>表单应用</h1><p><strong>隐藏域 hidden</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ &lt;p&gt;名字: &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> size=<span class="hljs-string">&quot;33&quot;</span>&gt;&lt;/p&gt;<br>$ &lt;p&gt;密码: &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;pwd&quot;</span> maxlength=<span class="hljs-string">&quot;8&quot;</span> size=<span class="hljs-string">&quot;33&quot;</span> hidden&gt;&lt;/p&gt;    &lt;!-- hidden表示隐藏 --&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>名字: <input type="text" name="username" size="33"></p>
<p>密码: <input type="password" name="pwd" maxlength="8" size="33" hidden></p> 
</body>
</html>

<hr>
<p><strong>只读 readonly</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;span&gt;贱贱的操作:&lt;/span&gt;<br> &lt;p&gt;名字: &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;史迪奇国王&quot;</span> <span class="hljs-built_in">readonly</span>&gt;&lt;/p&gt;   &lt;!-- <span class="hljs-built_in">readonly</span>表示只读 --&gt;<br> &lt;p&gt;密码: &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;pwd&quot;</span>&gt;&lt;/p&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<span>贱贱的操作:</span>
 <p>名字: <input type="text" name="username" value="史迪奇国王" readonly></p>
 <p>密码: <input type="password" name="pwd"></p>
</body>
</html>

<hr>
<p><strong>禁用 checked disabled</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;p&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;radio&quot;</span> value=<span class="hljs-string">&quot;boy&quot;</span> name=<span class="hljs-string">&quot;sex&quot;</span>/&gt;男<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;radio&quot;</span> value=<span class="hljs-string">&quot;girl&quot;</span> name=<span class="hljs-string">&quot;sex&quot;</span> checked disabled/&gt;女  &lt;!-- checked disabled表示禁用 假如你是男生也会默认给你性别女, 并且不能更改 --&gt;<br>&lt;/p&gt;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>
    <input type="radio" value="boy" name="sex" disabled>男
    <input type="radio" value="girl" name="sex" checked disabled>女  
</p>
</body>
</html>

<hr>
<h1 id="扩大鼠标范围"><a href="#扩大鼠标范围" class="headerlink" title="扩大鼠标范围"></a>扩大鼠标范围</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;p&gt;<br>    &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;sdq&quot;</span>&gt;扩大范围至文字&lt;/label&gt;  &lt;!-- label标签扩充鼠标的可用性 --&gt;<br>    &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;sdq&quot;</span>&gt;<br>&lt;/p&gt;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>
    <label for="sdq">扩大范围至文字</label>
    <input type="text" id="sdq">
</p>
</body>
</html>

<hr>
<h1 id="提示信息"><a href="#提示信息" class="headerlink" title="提示信息"></a>提示信息</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ &lt;p&gt;账户: &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> size=<span class="hljs-string">&quot;33&quot;</span> placeholder=<span class="hljs-string">&quot;请输入账号&quot;</span> required&gt;&lt;/p&gt;   &lt;!-- required表示非空状态 也就是说必须要填 --&gt;<br>$ &lt;p&gt;密码: &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;pwd&quot;</span> maxlength=<span class="hljs-string">&quot;8&quot;</span> size=<span class="hljs-string">&quot;33&quot;</span> placeholder=<span class="hljs-string">&quot;请输入密码&quot;</span>&gt;&lt;/p&gt;   &lt;!-- placeholder表示提示信息 --&gt;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>账户: <input type="text" name="username" size="33" placeholder="请输入账号" required></p>
<p>密码: <input type="password" name="pwd" maxlength="8" size="33" placeholder="请输入密码"></p>
</body>
</html>

<hr>
<h1 id="正则表达式-pattern"><a href="#正则表达式-pattern" class="headerlink" title="正则表达式 pattern"></a>正则表达式 pattern</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;p&gt;自定义邮箱<br>    &lt;input <span class="hljs-built_in">type</span>=text name=<span class="hljs-string">&quot;diymain&quot;</span> pattern=<span class="hljs-string">&quot;邮箱的正则表达式&quot;</span>&gt;  &lt;!-- pattern表示正则表达式  diy意思是自定义 --&gt;<br>&lt;/p&gt;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<!DOCTYPE html>
<html lang="cn">
<head>
    <meta charset="UTF-8">
    <title>HTML基本控件大集合</title>
</head>
<body>
<p>自定义邮箱
    <input type="text" name="diymain" pattern="邮箱的正则表达式">
</p></body>
</html>

<hr>
<p><img src="/images/HTML%E5%8F%AF%E6%93%8D%E4%BD%9C%E5%A4%A7%E9%9B%86%E5%90%88/%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0%E6%A0%BC%E5%BC%8F.jpg"></p>
<h1 id="只要input都需要value值和name值-这样就可以养成好习惯"><a href="#只要input都需要value值和name值-这样就可以养成好习惯" class="headerlink" title="只要input都需要value值和name值, 这样就可以养成好习惯"></a>只要input都需要value值和name值, 这样就可以养成好习惯</h1>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML 表格</title>
    <url>/HTML-form.html</url>
    <content><![CDATA[<p><strong>HTML个人整理</strong></p>
<a id="more"></a>

<h1 id="table"><a href="#table" class="headerlink" title="table"></a>table</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ tr  //行<br>$ td  //列<br></code></pre></td></tr></table></figure>

<h1 id="跨列"><a href="#跨列" class="headerlink" title="跨列"></a>跨列</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tb</span> <span class="hljs-attr">cospan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="跨行"><a href="#跨行" class="headerlink" title="跨行"></a>跨行</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">$ <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tb</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>$ <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>关于Hexo搭建博客我所踩过的坑和小白安装教程</title>
    <url>/Hexo-install.html</url>
    <content><![CDATA[<p><strong>搭建博客笔记</strong></p>
<a id="more"></a>

<h1 id="第一是-Hexo-环境搭建"><a href="#第一是-Hexo-环境搭建" class="headerlink" title="第一是 Hexo 环境搭建"></a>第一是 Hexo 环境搭建</h1><p>前提是需要安装 Node.js,不懂的可以百度下载然后按照<a href="https://www.bilibili.com/video/BV1wA411s7re?from=search&seid=11841654225437997570">B站的安装视频按照</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ npm install hexo-cli -g<br></code></pre></td></tr></table></figure>
<h1 id="第二是-Hexo初始化博客"><a href="#第二是-Hexo初始化博客" class="headerlink" title="第二是 Hexo初始化博客"></a>第二是 Hexo初始化博客</h1><p><strong>cd 到你想存放博客源码的一个目录里面，这时会自动建立一个博客文件夹</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo init blog  //hexo init (博客名字自定义)<br></code></pre></td></tr></table></figure>

<h1 id="第三是-给安装博客依赖"><a href="#第三是-给安装博客依赖" class="headerlink" title="第三是 给安装博客依赖"></a>第三是 给安装博客依赖</h1><p><strong>cd 进刚创建的博客文件夹，安装依赖模块命令如下</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ npm install<br></code></pre></td></tr></table></figure>
<h1 id="第四是-找主题"><a href="#第四是-找主题" class="headerlink" title="第四是 找主题"></a>第四是 找主题</h1><p><strong>到这个 <a href="https://hexo.bootcss.com/themes/">Hexo网站</a> 去找主题</strong></p>
<h1 id="第五是-清除静态文件"><a href="#第五是-清除静态文件" class="headerlink" title="第五是 清除静态文件"></a>第五是 清除静态文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo clean<br></code></pre></td></tr></table></figure>
<h1 id="第六是-生成静态文件和"><a href="#第六是-生成静态文件和" class="headerlink" title="第六是 生成静态文件和"></a>第六是 生成静态文件和</h1><p><strong>部署在GitHub 或者 Gitee服务器上，生成静态文件，生成的静态文件在博客工程的 public文件夹下 到哪里找就行了</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo g<br></code></pre></td></tr></table></figure>
<h1 id="第七是-部署"><a href="#第七是-部署" class="headerlink" title="第七是 部署"></a>第七是 部署</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo d<br></code></pre></td></tr></table></figure>
<h1 id="第八是-本地运行"><a href="#第八是-本地运行" class="headerlink" title="第八是 本地运行"></a>第八是 本地运行</h1><p><strong>这里地址是localhost:4000</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>
<h1 id="查看你有没有被百度收录文章"><a href="#查看你有没有被百度收录文章" class="headerlink" title="查看你有没有被百度收录文章"></a>查看你有没有被百度收录文章</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ site:(你的博客)  //直接复制命令百度搜索<br></code></pre></td></tr></table></figure>
<h1 id="amp-的作用"><a href="#amp-的作用" class="headerlink" title="&amp;的作用"></a>&amp;的作用</h1><p><strong>表示清除静态文件和部署</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo clean &amp; hexo d <br></code></pre></td></tr></table></figure>
<h1 id="改变文章链接规则"><a href="#改变文章链接规则" class="headerlink" title="改变文章链接规则"></a>改变文章链接规则</h1><p><strong>Ctrl+f搜索 permalink</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ permalink: :id.html   //填入:id.html<br></code></pre></td></tr></table></figure>
<p><strong>然后在指定位置填入id即可 数字随意，只要保证每篇文章里面的数字不要一样就行</strong></p>
<img src="/images/Hexo博客/案例.jpg">]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
  </entry>
  <entry>
    <title>Java Swing 图形界面速背表(未完工)</title>
    <url>/Java-Swing.html</url>
    <content><![CDATA[<p><strong>学习Java个人整理</strong></p>
<a id="more"></a>

<blockquote>
<h1 id="JavaSwing-布局管理器"><a href="#JavaSwing-布局管理器" class="headerlink" title="JavaSwing 布局管理器"></a>JavaSwing 布局管理器</h1></blockquote>
<p>getWigth 得到宽度 或者 控件的高度<br>getHeight 得到高度 或者 控件的宽度<br>root.setLayout(layoutMgr) 给容器设置一个布局器<br>layoutMgr.layoutContainer(…) 当容器改变大小时，自动调用布局器重新布局<br>Perferred Size 指控件最佳大小<br>Dimension 表示尺寸信息 size.width/size.height</p>
<h1 id="FlowLayout-流式布局"><a href="#FlowLayout-流式布局" class="headerlink" title="FlowLayout (流式布局)"></a>FlowLayout (流式布局)</h1><p>setPreferred Size() 控制每个控件的显示高度和宽度</p>
<p>GridLayout (网格布局)</p>
<p>GridBagLayout (网格袋布局)</p>
<p>BoxLayout (箱式布局)</p>
<p>GroupLayout (分组布局)</p>
<p>AFXLayout  (水平布局)</p>
<h1 id="AfAnyWhere-自由位置布局"><a href="#AfAnyWhere-自由位置布局" class="headerlink" title="AfAnyWhere (自由位置布局)"></a>AfAnyWhere (自由位置布局)</h1><p>new AfMargin(top,left,botton,right)</p>
<h1 id="CardLayout-卡片布局"><a href="#CardLayout-卡片布局" class="headerlink" title="CardLayout (卡片布局)"></a>CardLayout (卡片布局)</h1><p>CardLayout.show(pane,”name”)</p>
<h1 id="BorderLayout-边界布局"><a href="#BorderLayout-边界布局" class="headerlink" title="BorderLayout (边界布局)"></a>BorderLayout (边界布局)</h1><p>setPreferrendSize() 对于上下边界调高度，左右边界调宽度<br>PAGE_START 上边界<br>PAGE_END 下边界<br>LINE_START 左边界<br>LINE_END 右边<br>CENTER 中央</p>
<p>SpringLayout (弹性布局)</p>
<p>null (绝对布局)</p>
<blockquote>
<h1 id="JavaSwing-基本组件"><a href="#JavaSwing-基本组件" class="headerlink" title="JavaSwing 基本组件"></a>JavaSwing 基本组件</h1></blockquote>
<h1 id="JLabel-标签"><a href="#JLabel-标签" class="headerlink" title="JLabel (标签)"></a>JLabel (标签)</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ JLabel x = new JLabel(<span class="hljs-string">&quot;我是JLabel&quot;</span>);<br>$ contenntPane.add(x);<br>$ //也可以用一行<br>$ contenntPane.add(new JLabel(<span class="hljs-string">&quot;我是JLabel&quot;</span>);<br></code></pre></td></tr></table></figure>
<p>JLabel 用于显示短文本或图标<br>setText() 设置文件<br>setFont() 设置字体<br>setForeground() 设置文件颜色<br>setToolTipText() 设置工具提示<br>getText() 取得用户输入</p>
<h2 id="JButton-按钮"><a href="#JButton-按钮" class="headerlink" title="JButton (按钮)"></a>JButton (按钮)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ JButton x = new JButton(<span class="hljs-string">&quot;我是JButton&quot;</span>);<br>$ contenntPane.add(x);<br>$ //也可以用一行<br>$ contenntPane.add(new JButton(<span class="hljs-string">&quot;我是JButton&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>JRadioButton (单选按钮)</p>
<h1 id="JCheckBox-复选框"><a href="#JCheckBox-复选框" class="headerlink" title="JCheckBox (复选框)"></a>JCheckBox (复选框)</h1><p>getSelected() 选中状态<br>setSelected() 设置<br>getText() 选项文字<br>addActionListener() 用户选中/取消时触发</p>
<p>JToggleButton (开关按钮)</p>
<h1 id="JTextField-文本框-或者-单行文本框"><a href="#JTextField-文本框-或者-单行文本框" class="headerlink" title="JTextField (文本框 或者 单行文本框)"></a>JTextField (文本框 或者 单行文本框)</h1><p>JTextField 用于显示单行文本<br>new JTextField(10) 其中,10用于表示列数，用于计算宽度(并不是字数限制)<br>setText() 设置文本<br>getText() 获取文本<br>setFont() 设置字体</p>
<h1 id="JoptionPane-消息框"><a href="#JoptionPane-消息框" class="headerlink" title="JoptionPane 消息框"></a>JoptionPane 消息框</h1><p>JoptionPane.showMessageDialog() 提示消息框<br>showMessageDialog  简单消息提示<br>showConfirmDialog  简单消息确认<br>showInputDialog  简单数据输入<br>showoptionDialog  简单选择输入<br>Blocked 阻塞<br>JoptionPane.showInputDialog() 提示消息框</p>
<p>JPasswordField (密码框)</p>
<h2 id="JTextArea-文本区域-或者-多行文本框"><a href="#JTextArea-文本区域-或者-多行文本框" class="headerlink" title="JTextArea (文本区域 或者 多行文本框)"></a>JTextArea (文本区域 或者 多行文本框)</h2><p>JComboBox (下拉列表框)</p>
<p>JList (列表框)</p>
<p>JProgressBar (进度条)</p>
<p>JSlider (滑块)</p>
<blockquote>
<h1 id="JavaSwing-面板组件"><a href="#JavaSwing-面板组件" class="headerlink" title="JavaSwing 面板组件"></a>JavaSwing 面板组件</h1></blockquote>
<p>JPanel (面板)</p>
<p>JScrollPane (滚动面板)</p>
<p>JSplitPane (分隔面板)</p>
<p>JTabbedPane (选项卡面板)</p>
<p>JLayeredPane (层级面板)</p>
<blockquote>
<h1 id="JavaSwing-其他组件"><a href="#JavaSwing-其他组件" class="headerlink" title="JavaSwing 其他组件"></a>JavaSwing 其他组件</h1></blockquote>
<p>JFrame (窗口)[一般存放标题]<br>setTitle  (设置标题)</p>
<p>Container (内容面板)</p>
<h1 id="setVisible-设置窗口大小-和-setVisble-显示窗口大小"><a href="#setVisible-设置窗口大小-和-setVisble-显示窗口大小" class="headerlink" title="setVisible (设置窗口大小) 和 setVisble(显示窗口大小)"></a>setVisible (设置窗口大小) 和 setVisble(显示窗口大小)</h1><p>setVisible(boolean)方法是用来显示/隐藏GUI组件的。<br>需要显示则使用true，需要隐藏则使用false</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ setVisible(<span class="hljs-literal">true</span>)  //例如这个<br></code></pre></td></tr></table></figure>
<p>意思是说数据模型已经构造好了，允许JVM可以根据数据模型执行paint方法开始画图并显示到屏幕上了，并不是显示图形，而是可以运行开始画图，要把setVisible()方法放到最后面，代码是按顺序执行的 ，如果把setVisible()放在前边，后边再添加其他组件的时候，有可能不会显示出来</p>
<p>JDialog, JOptionPane (对话框)</p>
<p>JFileChooser (文件选择器)</p>
<p>JColorChooser (颜色选择器)</p>
<h1 id="JMenuBar-菜单栏"><a href="#JMenuBar-菜单栏" class="headerlink" title="JMenuBar (菜单栏)"></a>JMenuBar (菜单栏)</h1><p>JMenuBar (菜单项)<br>JMenu (菜单)<br>JMenuItem (菜单项)</p>
<h1 id="JToolBar-工具栏"><a href="#JToolBar-工具栏" class="headerlink" title="JToolBar (工具栏)"></a>JToolBar (工具栏)</h1><p>JButton 工具按钮<br>setIcin() 图标<br>setAction Command() 命令<br>setToolTipText() 提示文字<br>add Action Listener() 事件处理</p>
<p>JPopupMenu (弹出菜单 或者 上下文菜单 或者 右键菜单)<br>JPopupMenu 创建<br>JMenuItem  添加<br>添加鼠标右键的响应，显示窗口菜单<br>菜单项被点击时，执行事件处理</p>
<p>JTable (表格)</p>
<p>JTree (树)</p>
<p>JInternalFrame (内部窗口)</p>
<blockquote>
<h1 id="JavaSwing-相关特性-了解就行"><a href="#JavaSwing-相关特性-了解就行" class="headerlink" title="JavaSwing 相关特性(了解就行)"></a>JavaSwing 相关特性(了解就行)</h1></blockquote>
<p>组件的位置和尺寸</p>
<h1 id="组件边框-Border"><a href="#组件边框-Border" class="headerlink" title="组件边框 (Border)"></a>组件边框 (Border)</h1><p>Border本身就是一个接口<br>Padding: 边框与它的内容之间的间距<br>Margin: 边框与它外面的容器之间的间距</p>
<h1 id="AfBorder-添加边框和边距"><a href="#AfBorder-添加边框和边距" class="headerlink" title="AfBorder 添加边框和边距"></a>AfBorder 添加边框和边距</h1><p>addPadding() 内边距<br>addMargin() 外边距<br>addOuterBorder() 外边添加Border<br>addInnerBorder() 里面添加Border</p>
<h1 id="AfPanel-用于快速布局"><a href="#AfPanel-用于快速布局" class="headerlink" title="AfPanel 用于快速布局"></a>AfPanel 用于快速布局</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ AfPanel p = new AfPanel();<br>$ p.padding();  //设置内边距<br>$ p.margin();  //设置外边距<br>$ p.preferredWidth();  //设置PrefedSise的宽度<br>$ p.preferredHeight();  //设置PrefedSise的高度<br></code></pre></td></tr></table></figure>
<h1 id="图片缩放工具"><a href="#图片缩放工具" class="headerlink" title="图片缩放工具"></a>图片缩放工具</h1><p>fitXY()  XY方向拉伸占满<br>fitCenter()  居中显示，并保持长宽比<br>fitCenterInside() 如果图片较小，则居中显示，如果图片越出范围，则舒服显示</p>
<h1 id="图片显示控件"><a href="#图片显示控件" class="headerlink" title="图片显示控件"></a>图片显示控件</h1><p>AfImageView  图片显示控件<br>setScaleType()  设置缩放类型<br>setImage()  显示图片<br>setBgColor()  设置背景图</p>
<h1 id="鼠标事件-MouseEvent"><a href="#鼠标事件-MouseEvent" class="headerlink" title="鼠标事件 MouseEvent"></a>鼠标事件 MouseEvent</h1><p>addMouseliskener()<br>鼠标点击 mouseClicked<br>鼠标按下 mousePressed<br>鼠标抬起 mouseExited<br>鼠标移入 mouseEntered<br>鼠标移出 mouseExited<br>addMouseMotionliskener()<br>鼠标移动 mouseMoved<br>鼠标拖动 mouseDragged<br>addMouseWheelListener<br>鼠标滚动 mouseWheelMoved</p>
<p>事件处理</p>
<p>多线程并发与线程安全</p>
<p>拖拽功能</p>
<p>系统托盘 (System Tray)</p>
<p>闪屏 (Splash Screen)</p>
<h1 id="Java-AWT-Swing-其他相关"><a href="#Java-AWT-Swing-其他相关" class="headerlink" title="Java AWT/Swing 其他相关"></a>Java AWT/Swing 其他相关</h1><p>Java绘图: 使用Graphics类绘制线段, 矩形, 椭圆/圆弧/扇形, 图片, 文本</p>
<p>Java图片操作 — 图片的读取, 绘制, 缩放, 裁剪, 保存</p>
<p>Java代码截屏: 使用 Java 代码截取电脑屏幕并保存</p>
<p>Java模拟鼠标键盘输入事件 — Robot 类</p>
<p>Java操作桌面应用 — Desktop 类</p>
<p>Java操作系统剪贴板(Clipboard)实现复制和粘贴 –&gt;</p>
<h1 id="特别提醒-AWT-例如-Label-Button"><a href="#特别提醒-AWT-例如-Label-Button" class="headerlink" title="特别提醒 AWT 例如: Label,Button"></a>特别提醒 AWT 例如: Label,Button</h1><h1 id="特别提醒-Swing-例如-JLabel-JButton-只要是以J开头的"><a href="#特别提醒-Swing-例如-JLabel-JButton-只要是以J开头的" class="headerlink" title="特别提醒 Swing 例如: JLabel,JButton 只要是以J开头的"></a>特别提醒 Swing 例如: JLabel,JButton 只要是以J开头的</h1><h1 id="ActionListener-是一个接口，所以派生时用impleme"><a href="#ActionListener-是一个接口，所以派生时用impleme" class="headerlink" title="ActionListener 是一个接口，所以派生时用impleme"></a>ActionListener 是一个接口，所以派生时用impleme</h1><p>addActionListener(…)  传入的参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ Button.addActionListener(x);  //意思是把什么交给谁，例如button(按键) 和 x <br></code></pre></td></tr></table></figure>
<h1 id="演示drawString（）方法的示例程序"><a href="#演示drawString（）方法的示例程序" class="headerlink" title="演示drawString（）方法的示例程序:"></a>演示drawString（）方法的示例程序:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">drawString示例程序<br><span class="hljs-variable">$import</span> java.awt.*; <br><span class="hljs-variable">$import</span> java.applet.*; <br><span class="hljs-variable">$public</span> class HelloWorldApplet扩展Applet &#123;     <br>$ public void paint(Graphics g)&#123;         <br>$ g.drawString(<span class="hljs-string">&quot;Hello World&quot;</span>，100,100);<br></code></pre></td></tr></table></figure>
<h1 id="显示消息对话框"><a href="#显示消息对话框" class="headerlink" title="显示消息对话框"></a>显示消息对话框</h1><p>showMessageDialog(“里面的文字”)<br>f.setVisible(true)<br>f.setTitle(“框框上的文字”)<br>charAt<br>看见actionPerformed 就要implements ActionListener<br><strong>(Button saveButton = new Button)</strong><br>saveButton.addActionListener(this);没什么加就this<br>(ActionListener=监听器)<br>(this=当前对象的意思)<br>(super是父级对象)<br><strong>如果Container contentPane = newContainer();</strong><br><strong>就Container contentPane = getContentPane();</strong><br>有Thread就想起Runnable</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript BOM</title>
    <url>/JavaScript-BOM.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="window"><a href="#window" class="headerlink" title="window"></a>window</h1><p><strong>作用: 有关浏览器窗口</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<br>undefind<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span><br><span class="hljs-number">790</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span><br><span class="hljs-number">918</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">outerHeight</span><br><span class="hljs-number">28</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">outerWidth</span><br><span class="hljs-number">160</span><br></code></pre></td></tr></table></figure>
<h1 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h1><p><strong>作用: 封装浏览器信息</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">navigator.<span class="hljs-property">appName</span><br><span class="hljs-string">&quot;Netscape&quot;</span><br>navigator.<span class="hljs-property">appVersion</span><br><span class="hljs-string">&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&quot;</span><br>navigator.<span class="hljs-property">userAgent</span><br><span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&quot;</span><br>navigator.<span class="hljs-property">platform</span><br><span class="hljs-string">&quot;Win32&quot;</span><br></code></pre></td></tr></table></figure>
<h1 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h1><p><strong>作用: 代表屏幕尺寸</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">screen.<span class="hljs-property">width</span><br><span class="hljs-number">1536</span><br>screen.<span class="hljs-property">height</span><br><span class="hljs-number">864</span><br></code></pre></td></tr></table></figure>
<h1 id="location-重要"><a href="#location-重要" class="headerlink" title="location (重要)"></a>location (重要)</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 主机</span><br><span class="hljs-attr">host</span>: <span class="hljs-string">&quot;www.baidu.com&quot;</span><br><span class="hljs-comment">// 当前指向的位置</span><br><span class="hljs-attr">href</span>: <span class="hljs-string">&quot;http://www.baidu.com/&quot;</span><br><span class="hljs-comment">// 协议</span><br><span class="hljs-attr">protocol</span>: <span class="hljs-string">&quot;http:&quot;</span><br><span class="hljs-comment">//重新加载/刷新</span><br><span class="hljs-attr">reload</span>: ƒ <span class="hljs-title function_">reload</span>()<br><span class="hljs-comment">// 设置新的地址</span><br>location.<span class="hljs-title function_">assign</span>(<span class="hljs-string">&#x27;https://sdq3.gitee.io/&#x27;</span>)<br></code></pre></td></tr></table></figure>
<h1 id="document"><a href="#document" class="headerlink" title="document"></a>document</h1><p><strong>document 表示当前页面, HTML DOM文档树</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span><br><span class="hljs-string">&quot;百度一下，你就知道&quot;</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;我叫史迪奇&quot;</span><br><span class="hljs-string">&quot;我叫史迪奇&quot;</span><br></code></pre></td></tr></table></figure>
<p><strong>获取具体的文档树节点</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">id</span> =<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>史迪奇<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>史迪奇国王<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>史迪奇骑士<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    var dl = document.getElementById(&#x27;app&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><strong>获取cookie</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span><br><span class="hljs-string">&quot;BIDUPSID=EC9E21CA08B01D9E2E577F635293067...&quot;</span><br></code></pre></td></tr></table></figure>
<p><strong>劫持cookie原理</strong><br>    + 劫持cookie: 获取你的cookie然后上传的它的服务器<br>    + 预防: 服务器端设置 cokie: httpOnly</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;script src=<span class="hljs-string">&quot;sdq.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h1 id="history"><a href="#history" class="headerlink" title="history"></a>history</h1><p><strong>代表浏览器的历史记录</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 前进</span><br>history.<span class="hljs-title function_">forward</span>()<br><span class="hljs-comment">// 返回</span><br>history.<span class="hljs-title function_">back</span>()<br></code></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 函数</title>
    <url>/JavaScript-apply-Data.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="方法的定义和调用"><a href="#方法的定义和调用" class="headerlink" title="方法的定义和调用"></a>方法的定义和调用</h1><h2 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h2><p><strong>方法就是把函数放在对象里面 对象只有两个东西: 属性和方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> sdq = &#123;<br>    <span class="hljs-comment">// 名称</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;史迪奇&quot;</span>,、<br>    <span class="hljs-comment">// 编号</span><br>    <span class="hljs-attr">number</span>: <span class="hljs-number">626</span>,<br><br>    <span class="hljs-comment">//方法</span><br>    计算编号: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">// 今年 - 编号</span><br>        <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>():<br>        <span class="hljs-keyword">return</span> now - <span class="hljs-variable language_">this</span>.<span class="hljs-property">nuber</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 属性</span><br>sdq.<span class="hljs-property">name</span><br><span class="hljs-comment">// 方法 (方法一定带括号)</span><br>sdq.<span class="hljs-title function_">number</span>()<br></code></pre></td></tr></table></figure>
<p><strong>另类写法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSdq</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>():<br>        <span class="hljs-keyword">return</span> now - <span class="hljs-variable language_">this</span>.<span class="hljs-property">nuber</span>;<br>    &#125;<br><br><span class="hljs-keyword">var</span> sdq = &#123;<br>    <span class="hljs-comment">// 名称</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;史迪奇&quot;</span>,、<br>    <span class="hljs-comment">// 编号</span><br>    <span class="hljs-attr">number</span>: <span class="hljs-number">626</span>,<br>    <span class="hljs-attr">sdq3</span>: getSdq<br>&#125;<br><br><span class="hljs-comment">// 提示: 正常</span><br>sdq.<span class="hljs-property">name</span><br><span class="hljs-comment">// 提示: NaN window</span><br>sdq.<span class="hljs-title function_">number</span>()<br></code></pre></td></tr></table></figure>
<h1 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h1><p><strong>控制this指向</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSdq</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>():<br>        <span class="hljs-keyword">return</span> now - <span class="hljs-variable language_">this</span>.<span class="hljs-property">nuber</span>;<br>    &#125;<br><br><span class="hljs-keyword">var</span> sdq = &#123;<br>    <span class="hljs-comment">// 名称</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;史迪奇&quot;</span>,、<br>    <span class="hljs-comment">// 编号</span><br>    <span class="hljs-attr">number</span>: <span class="hljs-number">626</span>,<br>    <span class="hljs-attr">sdq3</span>: getSdq<br>&#125;<br><br><span class="hljs-comment">// this 指向 sdq 参数为空</span><br>etSdq.<span class="hljs-title function_">apply</span>(sdq,[]);<br></code></pre></td></tr></table></figure>
<h1 id="内部对象"><a href="#内部对象" class="headerlink" title="内部对象"></a>内部对象</h1><h2 id="标准对象"><a href="#标准对象" class="headerlink" title="标准对象"></a>标准对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">typeof</span> <span class="hljs-number">333</span><br><span class="hljs-string">&quot;number&quot;</span><br><br><span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;333&#x27;</span><br><span class="hljs-string">&quot;string&quot;</span><br><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span><br><span class="hljs-string">&quot;boolean&quot;</span><br><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Na</span>N<br><span class="hljs-string">&quot;number&quot;</span><br><br><span class="hljs-keyword">typeof</span> []<br><span class="hljs-string">&quot;object&quot;</span><br><br><span class="hljs-keyword">typeof</span> &#123;&#125;<br><span class="hljs-string">&quot;object&quot;</span><br><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Math</span>.<span class="hljs-property">sdq</span><br><span class="hljs-string">&quot;function&quot;</span><br><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span><br><span class="hljs-string">&quot;undefined&quot;</span><br></code></pre></td></tr></table></figure>
<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br>now.<span class="hljs-title function_">getFullYear</span>(); <span class="hljs-comment">// 年</span><br>now.<span class="hljs-title function_">getMonth</span>();    <span class="hljs-comment">// 月 0-11</span><br>now.<span class="hljs-title function_">getDate</span>();     <span class="hljs-comment">// 日</span><br>now.<span class="hljs-title function_">getDay</span>();      <span class="hljs-comment">// 星期几</span><br>now.<span class="hljs-title function_">getHours</span>();    <span class="hljs-comment">// 时</span><br>now.<span class="hljs-title function_">getMinutes</span>();  <span class="hljs-comment">// 分</span><br>now.<span class="hljs-title function_">getseconds</span>();  <span class="hljs-comment">// 秒</span><br>now.<span class="hljs-title function_">getTime</span>();     <span class="hljs-comment">// 时间截 全世界统一 1970 1.1 0:00:00 毫秒数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(一窜数字))  <span class="hljs-comment">//时间截转为时间</span><br></code></pre></td></tr></table></figure>
<p><strong>转换</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(一窜数字);<br><br><span class="hljs-title class_">Sat</span> <span class="hljs-title class_">Jan</span> <span class="hljs-number">04</span> <span class="hljs-number">2021</span> <span class="hljs-number">10</span>:<span class="hljs-number">48</span>:<span class="hljs-number">35</span> <span class="hljs-variable constant_">GMT</span>+<span class="hljs-number">0800</span> (中国标准时间)<br><br>now.<span class="hljs-property">toLocaleString</span>  <span class="hljs-comment">// 注意, 调用是一个方法/方式 非属性</span><br><br>f <span class="hljs-title function_">toLocaleString</span>(<span class="hljs-params"></span>) &#123;[native code]&#125;<br><br>now.<span class="hljs-title function_">toLocaleString</span>()<br><span class="hljs-string">&quot;2020/1/4 上午10:51:25&quot;</span><br><br>now.<span class="hljs-title function_">toGMTString</span>()<br><span class="hljs-string">&quot;Sat, 03 Jan 2021 05:48:42&quot;</span><br></code></pre></td></tr></table></figure>
<h2 id="json字符串js对象的转换"><a href="#json字符串js对象的转换" class="headerlink" title="json字符串js对象的转换"></a>json字符串js对象的转换</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;史迪奇&quot;</span>,<br>    <span class="hljs-attr">number</span>: <span class="hljs-number">626</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;未知&quot;</span><br>&#125;<br><br><span class="hljs-comment">// 对象转化json字符串 &#123;&quot;name&quot;:&quot;史迪奇&quot;, &quot;number&quot;:626, &quot;sex&quot;: &quot;未知&quot;&#125;</span><br><span class="hljs-keyword">var</span> jsonUser = <span class="hljs-variable constant_">JSON</span>.<span class="hljs-title function_">stringify</span>(user);<br><br><span class="hljs-comment">// json 字符串转化对象 参数为 json字符串</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-variable constant_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;史迪奇&quot;, &quot;number&quot;:626, &quot;sex&quot;: &quot;未知&quot;&#125;&#x27;</span>);<br></code></pre></td></tr></table></figure>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><ul>
<li>原生的js写法 xhr 异步请求</li>
<li>jQuey 封装的方法 $(“#name”).ajax(“”)</li>
<li>axios 请求</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript (函数之定义和获取)</title>
    <url>/JavaScript-definition-obtain.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="绝对值函数"><a href="#绝对值函数" class="headerlink" title="绝对值函数"></a>绝对值函数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">abs</span>(<span class="hljs-params">x</span>) &#123;&#125;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>一旦执行return 代表函数结束,返回结果 没有执行return, 函数执行完也会返回结果 undefined</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> abs = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;&#125;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>function(x){….}是匿名函数, 可以把结果赋值给abs, 可以调用函数</strong></p>
<h1 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h1><p><strong>可以传任意个参数, 也可以不传递参数 假设不传递参数, 如何规避</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> abs = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;&#125;<br>    <span class="hljs-comment">//手动抛出异常来判断</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x!== <span class="hljs-string">&quot;number&quot;</span>) &#123;<br>        thow <span class="hljs-string">&quot;Not a Number&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="arguments-传递进来的所有的参数是一个数组"><a href="#arguments-传递进来的所有的参数是一个数组" class="headerlink" title="arguments 传递进来的所有的参数是一个数组"></a>arguments 传递进来的所有的参数是一个数组</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> abs = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;&#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;x=&gt;&quot;</span>+x)<br>        thow <span class="hljs-string">&quot;Not a Number&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>;i++)&#123;<br>        <span class="hljs-variable language_">console</span>,<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>[i]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="rest"><a href="#rest" class="headerlink" title="rest"></a>rest</h1><p><strong>以前:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>.;length&gt;<span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">2</span>;i&lt;<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>;i++) &#123;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>ES6的引入的新特性, 获取除了已经定义的参数之外的所有参数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sdq</span>(<span class="hljs-params">s,d,q,... rest</span>) &#123;&#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;s=&gt;&quot;</span>+s);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;d=&gt;&quot;</span>+d);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;q=&gt;&quot;</span>+q);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rest);<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>rest参数只能写在最后面, 必须用…标识</strong></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 函数的定义和参数获取</title>
    <url>/JavaScript-definition-obtain.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><strong>概念: 对象(属性, 函数/方法)</strong><br>    + 函数放在对象里面叫方法<br>    + 放在外面是函数</p>
<h3 id="绝对值函数"><a href="#绝对值函数" class="headerlink" title="绝对值函数"></a>绝对值函数</h3><p><strong>后端写法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F; 如果没有执行return函数执行完也会返回结果, 结果是undefined<br>function sdq(x)&#123;<br>    if(x&gt;&#x3D;0)&#123;<br>        &#x2F;&#x2F; 一旦执行到return代表函数结束, 返回结果<br>        return x;<br>    &#125;<br>    else&#123;<br>        &#x2F;&#x2F; 一旦执行到return代表函数结束, 返回结果<br>        return -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>前端写法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F; function(x)&#123;...&#125;这是一个匿名函数, 但是可以把结果赋值给sdq, 通过sdq调用函数<br>var sdq &#x3D; function(x)&#123;<br>    if(x&gt;&#x3D;0)&#123;<br>        &#x2F;&#x2F; 一旦执行到return代表函数结束, 返回结果<br>        return x;<br>    &#125;<br>    else&#123;<br>        &#x2F;&#x2F; 一旦执行到return代表函数结束, 返回结果<br>        return -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">sdq(3)  &#x2F;&#x2F;输出3<br>sdq(-3)  &#x2F;&#x2F;输出3<br></code></pre></td></tr></table></figure>
<h3 id="异常判断"><a href="#异常判断" class="headerlink" title="异常判断"></a>异常判断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var sdq &#x3D; function(x)&#123;<br>    &#x2F;&#x2F; x的类型(typeof)是不是数字(number)不是数字规避<br>    if (typeof x!&#x3D;&#x3D; &#39;number&#39;)&#123;<br>        throw &#39;压根不是数字&#39;<br>    &#125;<br>    if(x&gt;&#x3D;0)&#123;<br>        return x;<br>    &#125;<br>    else&#123;<br>        return -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="arguments-数组"><a href="#arguments-数组" class="headerlink" title="arguments 数组"></a>arguments 数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var sdq &#x3D; function(x)&#123;<br>    console.log(&quot;x&#x3D;&gt;&quot;+x);<br>    for (var i &#x3D; 0; i &lt; arguments.length; i++)&#123;<br>        console.log(arguments.[i]);<br>    &#125;<br><br>    &#x2F;&#x2F; if (arguments.length&gt;1)&#123;<br>    &#x2F;&#x2F;  arguments[1]<br>    &#x2F;&#x2F;&#125;<br><br>    if(x&gt;&#x3D;0)&#123;<br>        return x;<br>    &#125;<br>    else&#123;<br>        return -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="rest"><a href="#rest" class="headerlink" title="rest"></a>rest</h3><p><strong>ES6 引入的型特性, 获取除了已经定义的参数之外的所有参数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F; rest参数只能写在最后面, 必须用...标识<br>function sdq(s,d,q,...rest)&#123;<br>    console.log(&quot;s&#x3D;&gt;&quot;+s);<br>    console.log(&quot;d&#x3D;&gt;&quot;+d);<br>    console.log(&quot;q&#x3D;&gt;&quot;+q);<br>    console.log(rest);<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 函数的定义和参数获取</title>
    <url>/JavaScript-function.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><strong>概念: 对象(属性, 函数/方法)</strong><br>    + 函数放在对象里面叫方法<br>    + 放在外面是函数</p>
<h3 id="绝对值函数"><a href="#绝对值函数" class="headerlink" title="绝对值函数"></a>绝对值函数</h3><p><strong>后端写法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F; 如果没有执行return函数执行完也会返回结果, 结果是undefined<br>function sdq(x)&#123;<br>    if(x&gt;&#x3D;0)&#123;<br>        &#x2F;&#x2F; 一旦执行到return代表函数结束, 返回结果<br>        return x;<br>    &#125;<br>    else&#123;<br>        &#x2F;&#x2F; 一旦执行到return代表函数结束, 返回结果<br>        return -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>前端写法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F; function(x)&#123;...&#125;这是一个匿名函数, 但是可以把结果赋值给sdq, 通过sdq调用函数<br>var sdq &#x3D; function(x)&#123;<br>    if(x&gt;&#x3D;0)&#123;<br>        &#x2F;&#x2F; 一旦执行到return代表函数结束, 返回结果<br>        return x;<br>    &#125;<br>    else&#123;<br>        &#x2F;&#x2F; 一旦执行到return代表函数结束, 返回结果<br>        return -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">sdq(3)  &#x2F;&#x2F;输出3<br>sdq(-3)  &#x2F;&#x2F;输出3<br></code></pre></td></tr></table></figure>
<h3 id="异常判断"><a href="#异常判断" class="headerlink" title="异常判断"></a>异常判断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var sdq &#x3D; function(x)&#123;<br>    &#x2F;&#x2F; x的类型(typeof)是不是数字(number)不是数字规避<br>    if (typeof x!&#x3D;&#x3D; &#39;number&#39;)&#123;<br>        throw &#39;压根不是数字&#39;<br>    &#125;<br>    if(x&gt;&#x3D;0)&#123;<br>        return x;<br>    &#125;<br>    else&#123;<br>        return -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="arguments-数组"><a href="#arguments-数组" class="headerlink" title="arguments 数组"></a>arguments 数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">var sdq &#x3D; function(x)&#123;<br>    console.log(&quot;x&#x3D;&gt;&quot;+x);<br>    for (var i &#x3D; 0; i &lt; arguments.length; i++)&#123;<br>        console.log(arguments.[i]);<br>    &#125;<br><br>    &#x2F;&#x2F; if (arguments.length&gt;1)&#123;<br>    &#x2F;&#x2F;  arguments[1]<br>    &#x2F;&#x2F;&#125;<br><br>    if(x&gt;&#x3D;0)&#123;<br>        return x;<br>    &#125;<br>    else&#123;<br>        return -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="rest"><a href="#rest" class="headerlink" title="rest"></a>rest</h3><p><strong>ES6 引入的型特性, 获取除了已经定义的参数之外的所有参数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F; rest参数只能写在最后面, 必须用...标识<br>function sdq(s,d,q,...rest)&#123;<br>    console.log(&quot;s&#x3D;&gt;&quot;+s);<br>    console.log(&quot;d&#x3D;&gt;&quot;+d);<br>    console.log(&quot;q&#x3D;&gt;&quot;+q);<br>    console.log(rest);<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 数据类型之(Map和Set)</title>
    <url>/JavaScript-Map-Set.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/*ES6 Map*/</span><br><span class="hljs-comment">/*学生的成绩, 学生的名字 两种方式*/</span><br><span class="hljs-keyword">var</span> names = [<span class="hljs-string">&quot;史迪奇&quot;</span>,<span class="hljs-string">&quot;史迪仔&quot;</span>,<span class="hljs-string">&quot;强霸&quot;</span>];<br><span class="hljs-keyword">var</span> scores = [<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">36</span>]<br><span class="hljs-comment">/*另一种*/</span><br><span class="hljs-keyword">var</span> map = naw <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&quot;史迪奇&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;史迪仔&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;强霸&quot;</span>,<span class="hljs-number">36</span>]]);<br><span class="hljs-keyword">var</span> name = map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;史迪奇&quot;</span>);    <span class="hljs-comment">/*通过key获得value*/</span> <br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;独眼霹雳&quot;</span>,<span class="hljs-number">60</span>);          <span class="hljs-comment">/*新增或修改*/</span> <br>map.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&quot;强霸&quot;</span>);              <span class="hljs-comment">/*删除*/</span><br></code></pre></td></tr></table></figure>
<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">set.<span class="hljs-title function_">add</span>(<span class="hljs-number">3</span>)                 <span class="hljs-comment">/*添加*/</span>  <br>set.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&quot;强霸&quot;</span>);        <span class="hljs-comment">/*删除*/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(set.<span class="hljs-title function_">has</span>(<span class="hljs-number">3</span>))    <span class="hljs-comment">/*是否包含某个元素*/</span><br></code></pre></td></tr></table></figure>
<h1 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h1><p><strong>遍历数组</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/*通过for of, for in 下标 */</span>  <br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> arr)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>遍历map</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&quot;史迪奇&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;史迪仔&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;强霸&quot;</span>,<span class="hljs-number">100</span>]]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> map)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>遍历set</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title function_">set</span>([[<span class="hljs-string">&quot;史迪奇&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;史迪仔&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;强霸&quot;</span>,<span class="hljs-number">100</span>]]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> set)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 数据类型之(分支和循环)</title>
    <url>/JavaScript-branch-loop.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="if-判断-循环"><a href="#if-判断-循环" class="headerlink" title="if 判断/循环"></a>if 判断/循环</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">if</span>(sdq &gt; <span class="hljs-number">3</span>)&#123;    <span class="hljs-comment">/*第一个判断*/</span><br> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;史迪奇骑士&quot;</span>);<br> &#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sdq &lt; <span class="hljs-number">5</span>)&#123;    <span class="hljs-comment">/*第二个判断*/</span><br> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;史迪奇国王&quot;</span>);<br> &#125;<br><span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">/*否则*/</span><br> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;史迪奇战士&quot;</span>);<br> &#125; <br></code></pre></td></tr></table></figure>
<h1 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">while</span>(sdq &lt; <span class="hljs-number">100</span>)&#123;<br>     sdq = sdq + <span class="hljs-number">1</span>;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdq)<br>     &#125;  <br></code></pre></td></tr></table></figure>
<h1 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do while 循环"></a>do while 循环</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">do</span> &#123;<br>     sdq = sdq + <span class="hljs-number">1</span>;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdq)<br>     &#125; <br> <span class="hljs-keyword">while</span>(sdq &lt; <span class="hljs-number">100</span>) <br></code></pre></td></tr></table></figure>
<h1 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="forEach-循环"><a href="#forEach-循环" class="headerlink" title="forEach 循环"></a>forEach 循环</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> sdq = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br><span class="hljs-comment">/*函数*/</span><br>sdq.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>&#125;)<br></code></pre></td></tr></table></figure>
<h1 id="for-…-in-循环"><a href="#for-…-in-循环" class="headerlink" title="for … in 循环"></a>for … in 循环</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> sdq <span class="hljs-keyword">in</span> age) &#123;<br>    <span class="hljs-keyword">if</span> (sdq.<span class="hljs-title function_">hasOwnProperty</span>(sdz)) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;存在&quot;</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sdq[sdz])<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 数据类型之(字符串类型)</title>
    <url>/JavaScript-string.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="字符串常用"><a href="#字符串常用" class="headerlink" title="字符串常用"></a>字符串常用</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">$ <span class="hljs-string">&quot;字符串&quot;</span>     <span class="hljs-comment">/*双引号包裹*/</span><br>$ <span class="hljs-string">&#x27;字符串&#x27;</span>     <span class="hljs-comment">/*单引号包裹*/</span><br></code></pre></td></tr></table></figure>

<h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">\<span class="hljs-string">&#x27;           /*代表它是一个字符串*/</span><br>\n           <span class="hljs-comment">/*换行*/</span><br>\t           <span class="hljs-comment">/*tab*/</span><br>\u5d3d       <span class="hljs-comment">/*Unicode字符*/</span><br>\x45         <span class="hljs-comment">/*Asll字符*/</span><br></code></pre></td></tr></table></figure>
<h1 id="多行字符串编写"><a href="#多行字符串编写" class="headerlink" title="多行字符串编写"></a>多行字符串编写</h1><p><strong>例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">$ <span class="hljs-comment">/*tab键上面  esc键下面*/</span><br>  <span class="hljs-keyword">var</span> msg =<br>      haha<br> 哈哈<br> 蛤蛤  <br></code></pre></td></tr></table></figure>
<h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><p><strong>例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">$ <span class="hljs-comment">/*tab键上面  esc键下面*/</span><br>  <span class="hljs-keyword">let</span> sdq = <span class="hljs-string">&quot;史迪奇&quot;</span>;<br>  <span class="hljs-keyword">let</span> sdz = <span class="hljs-string">&quot;史迪仔&quot;</span>;<br>  <span class="hljs-keyword">let</span> age = <span class="hljs-number">119</span>;<br>  <span class="hljs-keyword">let</span> sdqz = <span class="hljs-string">&#x27;我叫.$&#123;sdq&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure>
<h1 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">str.<span class="hljs-property">length</span><br></code></pre></td></tr></table></figure>
<h1 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/*是方法不是属性*/</span><br>sdq.<span class="hljs-title function_">toUpperCase</span>()          <span class="hljs-comment">/*大写*/</span><br>sdq.<span class="hljs-title class_">LowerCase</span>()          <span class="hljs-comment">/*小写*/</span><br></code></pre></td></tr></table></figure>
<h1 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h1><p><strong>subsrting</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">sdq.<span class="hljs-title function_">subsrting</span>(<span class="hljs-number">1</span>)          <span class="hljs-comment">/*从第一个字符串截取到最后一个字符串*/</span><br>sdq.<span class="hljs-title class_">LowerCase</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)          <span class="hljs-comment">/*包头不包尾*/</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 数据类型之(对象)</title>
    <url>/JavaScript-object.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="JavaScript也是一种面向对象的语言-所有的键都是字符串-值可以是任意对象"><a href="#JavaScript也是一种面向对象的语言-所有的键都是字符串-值可以是任意对象" class="headerlink" title="JavaScript也是一种面向对象的语言 所有的键都是字符串 值可以是任意对象"></a>JavaScript也是一种面向对象的语言 所有的键都是字符串 值可以是任意对象</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> 对象名 = &#123;    <br>    属性名: 属性值<br>    属性名: 属性值<br>    属性名: 属性值<br>$ &#125; <br>$<br>$ <span class="hljs-comment">/*通过下标取值和赋值*/</span><br>$ <span class="hljs-keyword">var</span> person = &#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;sdq&quot;</span>,<br>   <span class="hljs-attr">age</span>: <span class="hljs-number">3</span>,<br>   <span class="hljs-attr">email</span>: <span class="hljs-string">&quot;???????@???&quot;</span><br>   <span class="hljs-attr">score</span>: <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>若干个键值对 js中对象, {…..}表示一个对象, 键值对描述属性xxxx: xxxx, 多个属性之间使用逗号隔开, 最后一个属性不加逗号</strong></p>
<h1 id="对象赋值"><a href="#对象赋值" class="headerlink" title="对象赋值"></a>对象赋值</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">person.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;sdq&quot;</span>      <span class="hljs-comment">/*这里赋值sdq*/</span><br>person.<span class="hljs-property">name</span>              <span class="hljs-comment">/*这里输出sdq*/</span><br></code></pre></td></tr></table></figure>
<h1 id="undefined-使用不存在对象-不会报错"><a href="#undefined-使用不存在对象-不会报错" class="headerlink" title="undefined 使用不存在对象, 不会报错"></a>undefined 使用不存在对象, 不会报错</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">person.<span class="hljs-property">sdz</span><br><span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure>
<h1 id="delete-动态的删减属性"><a href="#delete-动态的删减属性" class="headerlink" title="delete 动态的删减属性"></a>delete 动态的删减属性</h1><p><strong>例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">$ <span class="hljs-keyword">delete</span> person.<span class="hljs-property">name</span><br>$ <span class="hljs-literal">true</span><br>$ person<br></code></pre></td></tr></table></figure>
<h1 id="动态的添加给新的属性添加值"><a href="#动态的添加给新的属性添加值" class="headerlink" title="动态的添加给新的属性添加值"></a>动态的添加给新的属性添加值</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">person.<span class="hljs-property">sdq</span> = <span class="hljs-string">&quot;sdz&quot;</span>  <span class="hljs-comment">/*这里赋值sdz*/</span><br>person      <br></code></pre></td></tr></table></figure>
<h1 id="判断属性值是否在这个对象-属性值是否在这个对象"><a href="#判断属性值是否在这个对象-属性值是否在这个对象" class="headerlink" title="判断属性值是否在这个对象  属性值是否在这个对象"></a>判断属性值是否在这个对象  属性值是否在这个对象</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-string">&quot;sdq&quot;</span> <span class="hljs-keyword">in</span> person        <br><span class="hljs-literal">true</span>         <br><span class="hljs-string">&quot;sdqz&quot;</span> <span class="hljs-keyword">in</span> person   <br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>
<h1 id="判断属性是否是这个对象自身拥有的-hasOwnProperty"><a href="#判断属性是否是这个对象自身拥有的-hasOwnProperty" class="headerlink" title="判断属性是否是这个对象自身拥有的 hasOwnProperty()"></a>判断属性是否是这个对象自身拥有的 hasOwnProperty()</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">person.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;toString&quot;</span>)<br><span class="hljs-literal">false</span>       <br>person.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;sdq&quot;</span>)<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 面向对象</title>
    <url>/JavaScript-object-oriented.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="面向对象原型继承"><a href="#面向对象原型继承" class="headerlink" title="面向对象原型继承"></a>面向对象原型继承</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 定义实验品</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Syp</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;史迪奇&quot;</span>,<br>    <span class="hljs-attr">number</span>: <span class="hljs-number">626</span>,<br>    <span class="hljs-attr">run</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;星际宝贝&quot;</span>)<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Sdq</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;史迪奇&quot;</span><br>&#125;;<br><br><span class="hljs-comment">// 原型对象</span><br><span class="hljs-title class_">Sdq</span>.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Syp</span>;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Sdz</span> = &#123;<br>    <span class="hljs-attr">destruction</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;疯狂破坏&quot;</span>)<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 史迪仔的原型 是 实验品</span><br><span class="hljs-title class_">Sdz</span>.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Syp</span>;<br></code></pre></td></tr></table></figure>
<h1 id="class-继承"><a href="#class-继承" class="headerlink" title="class 继承"></a>class 继承</h1><h2 id="定义类-属性-方法"><a href="#定义类-属性-方法" class="headerlink" title="定义类 属性 方法"></a>定义类 属性 方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 定义实验品</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Syp</span> = &#123;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    &#125;<br><br>    <span class="hljs-title function_">destruction</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;破坏&quot;</span>)<br>    &#125;<br><br><span class="hljs-keyword">var</span> sdq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Syp</span>(<span class="hljs-string">&quot;史迪奇&quot;</span>);<br><span class="hljs-keyword">var</span> sdz = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Syp</span>(<span class="hljs-string">&quot;史迪仔&quot;</span>);<br><br>sdq.<span class="hljs-title class_">Syp</span>()<br>sdz.<span class="hljs-title class_">Syp</span>()<br></code></pre></td></tr></table></figure>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 定义实验品</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Syp</span> = &#123;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    &#125;<br><br>    <span class="hljs-title function_">destruction</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;破坏&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Syp626</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Syp</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,grade</span>)&#123;<br>    <span class="hljs-variable language_">super</span>.(name);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span> = grade;<br>    &#125;<br><br>    <span class="hljs-title function_">myGrade</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;搞破坏&quot;</span>)<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">var</span> sdq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Syp</span>(<span class="hljs-string">&quot;小怪物&quot;</span>);<br><span class="hljs-keyword">var</span> sdz = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Syp</span>626(<span class="hljs-string">&quot;小怪物&quot;</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure>
<p><strong>原型链</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><br>       prototype<br>      /￣￣￣￣￣↘<br><span class="hljs-title class_">Person</span>           <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br>(构造函数)         (实例原型)<br>    |  ↖__________/      |<br>    |   constructor    ↑  |<br>    |                  |  |<br>    |                  |  |<br>    |                  |  |<br>   person ——————————————  |  _proto_<br>                          |<br>                          |<br>                          |<br>        prototype         |<br>       /￣￣￣￣￣↘       |<br><span class="hljs-title class_">Object</span>()           <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br>      ↖__________/       |<br>       constructor        |  _proto_<br>                          |<br>                          ↓<br>                         <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure>
















]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 数据类型之(数组类型)</title>
    <url>/JavaScript-array.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="Array可以包含任意的数据类型"><a href="#Array可以包含任意的数据类型" class="headerlink" title="Array可以包含任意的数据类型"></a>Array可以包含任意的数据类型</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];     <span class="hljs-comment">/*通过下标取值和赋值*/</span><br>arr[<span class="hljs-number">0</span>]<br>arr[<span class="hljs-number">3</span>] = <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>
<h1 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">arr.<span class="hljs-property">length</span>      <span class="hljs-comment">/*赋值过小值, 元素就会丢失*/</span><br></code></pre></td></tr></table></figure>
<h1 id="indexOf-通过元素获得下标"><a href="#indexOf-通过元素获得下标" class="headerlink" title="indexOf  通过元素获得下标"></a>indexOf  通过元素获得下标</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]; <br>arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">2</span>);  <span class="hljs-comment">/*输出1  字符串&quot;1&quot;和数字1是不同的*/</span><br></code></pre></td></tr></table></figure>
<h1 id="slice-截取Array的一部分-返回一个数组"><a href="#slice-截取Array的一部分-返回一个数组" class="headerlink" title="slice() 截取Array的一部分, 返回一个数组"></a>slice() 截取Array的一部分, 返回一个数组</h1><p><strong>例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">$ <span class="hljs-title function_">slice</span>()   <span class="hljs-comment">/*类似于String中的substring*/</span><br></code></pre></td></tr></table></figure>
<h1 id="push-和pop-尾部"><a href="#push-和pop-尾部" class="headerlink" title="push()和pop()尾部"></a>push()和pop()尾部</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-attr">push</span>:    <span class="hljs-comment">/*压入到头部*/</span><br><span class="hljs-attr">shift</span>:   <span class="hljs-comment">/*弹出头部的一个元素*/</span><br></code></pre></td></tr></table></figure>


<h1 id="排序-sort"><a href="#排序-sort" class="headerlink" title="排序 sort()"></a>排序 sort()</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">(<span class="hljs-number">3</span>)[<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>]         <span class="hljs-comment">/*排序前*/</span><br>arr.<span class="hljs-title function_">sort</span>()         <br>(<span class="hljs-number">3</span>)[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>]         <span class="hljs-comment">/*排序后*/</span><br></code></pre></td></tr></table></figure>
<h1 id="元素反转-reverse"><a href="#元素反转-reverse" class="headerlink" title="元素反转 reverse()"></a>元素反转 reverse()</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">(<span class="hljs-number">3</span>)[<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>]         <span class="hljs-comment">/*反转前*/</span><br>arr.<span class="hljs-title function_">reverse</span>()        <br>(<span class="hljs-number">3</span>)[<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>]         <span class="hljs-comment">/*反转后*/</span><br></code></pre></td></tr></table></figure>
<h1 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h1><p><strong>注意concat()并没有修改数组, 只是会返回一个新的数组</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">(<span class="hljs-number">3</span>)[<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>]<br>arr.<span class="hljs-title function_">concat</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])        <br>(<span class="hljs-number">6</span>)[<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>arr<br>(<span class="hljs-number">3</span>)[<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>]<br></code></pre></td></tr></table></figure>
<h1 id="join-连接符"><a href="#join-连接符" class="headerlink" title="join 连接符"></a>join 连接符</h1><p><strong>例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">(<span class="hljs-number">3</span>)[<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>] <br>arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>)         <span class="hljs-comment">/*使用特定的字符串连接*/</span>   <br><span class="hljs-comment">/*结果输出&quot;C-B-A&quot;*/</span>       <br></code></pre></td></tr></table></figure>
<h1 id="多位数组"><a href="#多位数组" class="headerlink" title="多位数组"></a>多位数组</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">arr = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>]];<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]   <br><span class="hljs-comment">/*结果输出4*/</span>  <br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Java面向对象思维</title>
    <url>/Object-oriented.html</url>
    <content><![CDATA[<p><strong>学习Java个人整理</strong></p>
<a id="more"></a>

<h1 id="例如造一辆车-而车有什么属性？-例如-车有颜色-车有轮子-车座位"><a href="#例如造一辆车-而车有什么属性？-例如-车有颜色-车有轮子-车座位" class="headerlink" title="例如造一辆车 而车有什么属性？ 例如 车有颜色 车有轮子 车座位"></a>例如造一辆车 而车有什么属性？ 例如 车有颜色 车有轮子 车座位</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"> //成员变量<br>$ public class Car &#123;<br>$ String color;  //颜色<br>$ int wheel;   //轮子<br>$ int seat;   //座位<br>$ &#125;<br></code></pre></td></tr></table></figure>

<h1 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h1><p><strong>例如车能飞</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"> //成员方法<br>$ public void <span class="hljs-function"><span class="hljs-title">fly</span></span>()&#123;<br>$ System.out.println(<span class="hljs-string">&quot;车能飞&quot;</span>);<br>$ &#125;<br></code></pre></td></tr></table></figure>
<p><strong>例如车可以潜水</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"> //成员方法<br>$ public void <span class="hljs-function"><span class="hljs-title">diving</span></span>()&#123;<br>$ System.out.println(<span class="hljs-string">&quot;车可以下水&quot;</span>);<br>$ &#125;<br></code></pre></td></tr></table></figure>
<h1 id="执行main方法"><a href="#执行main方法" class="headerlink" title="执行main方法"></a>执行main方法</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"> //成员方法<br>$ public static void main(String[ ] args) &#123;<br> Car c = new Car();   //先创建一辆车<br> c.fly();  //.表示调用  众所周知所以车都是可以飞的<br> c.diving();  //.表示调用  众所周知所以车都是可以下水的<br> c.color = <span class="hljs-string">&quot;透明&quot;</span>;  //我的车是透明色<br> c.wheel = 5; //众所周知所以车都是5个轮子<br> c.seat = 9;  //我的车 里面坐4个 车前绑1个人用来刹车 车顶坐1个人 剩下3个人的拿板拿雨伞凳坐后车厢 尾气管那面绑上1个人 用来吸收尾气<br> System.out.println(c.color);<br> System.out.println(c.wheel);<br> System.out.println(c.seat);<br>$ &#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript DOM</title>
    <url>/JavaScript-DOM.html</url>
    <content><![CDATA[<p><strong>JavaScript个人整理</strong></p>
<a id="more"></a>

<h1 id="操作DOM对象"><a href="#操作DOM对象" class="headerlink" title="操作DOM对象"></a>操作DOM对象</h1><h2 id="获得DOM节点"><a href="#获得DOM节点" class="headerlink" title="获得DOM节点"></a>获得DOM节点</h2><p><strong>浏览器网页就是一个DOM树形结构</strong><br>    + 更新: 更新DOM节点<br>    + 遍历DOM节点: 得到DOM节点<br>    + 删除: 删除一个DOM节点<br>    + 添加: 添加一个新的节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 要操作一个DOM节点就必须先获得这个DOM节点</span><br><span class="hljs-comment">// 获得DOM节点</span><br>&lt;div id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;<br>    &lt;h1&gt;实验品&lt;/h1&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/p&gt;<br>    &lt;p <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安娜&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-comment">// 对应 css选择器</span><br>    <span class="hljs-keyword">var</span> h1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;h1&quot;</span>)<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Reuben</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Reuben&quot;</span>)<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Angel</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementByclassName</span>(<span class="hljs-string">&quot;Angel&quot;</span>)<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Stitch</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Stitch&quot;</span>)<br>    <span class="hljs-comment">// 获取父节点下的所有子节点</span><br>    <span class="hljs-keyword">var</span> childrens = <span class="hljs-title class_">Syp</span>.<span class="hljs-property">hildrens</span>;<br>    <span class="hljs-comment">// Syp.firstChild</span><br>    <span class="hljs-comment">// Syp.LastChild</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="更新DOM节点"><a href="#更新DOM节点" class="headerlink" title="更新DOM节点"></a>更新DOM节点</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 要操作一个DOM节点就必须先获得这个DOM节点</span><br><span class="hljs-comment">// 获得DOM节点</span><br>&lt;div id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;<br>    &lt;h1&gt;实验品&lt;/h1&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/p&gt;<br>    &lt;p <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安娜&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Syp</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Syp&quot;</span>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h3 id="操作文本"><a href="#操作文本" class="headerlink" title="操作文本"></a>操作文本</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 修改文本的值</span><br><span class="hljs-title class_">Syp</span>.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;我叫史迪奇&#x27;</span>;<br><span class="hljs-comment">// 可以解析HTML文本标签</span><br><span class="hljs-title class_">Syp</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;strong&gt;我叫史迪奇&lt;/strong&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure>
<h3 id="操作css"><a href="#操作css" class="headerlink" title="操作css"></a>操作css</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 属性使用 字符串 包起来</span><br><span class="hljs-title class_">Syp</span>.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;blue&#x27;</span>;<br><span class="hljs-comment">// fontSize是驼峰命名</span><br><span class="hljs-title class_">Syp</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = <span class="hljs-string">&#x27;333px&#x27;</span>;<br><span class="hljs-title class_">Syp</span>.<span class="hljs-property">style</span>.<span class="hljs-property">padding</span> = <span class="hljs-string">&#x27;3em&#x27;</span>;<br></code></pre></td></tr></table></figure>
<h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p><strong>步骤: 先获取父节点, 再获取子节点, 然后通过父节点删除子节点</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;<br>    &lt;h1&gt;实验品&lt;/h1&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/p&gt;<br>    &lt;p <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安娜&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-comment">// 先获取父节点</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Syp</span> = <span class="hljs-title class_">Reuben</span>.<span class="hljs-property">parentElement</span>;<br>    <span class="hljs-comment">// 再获取子节点</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Reuben</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Reuben&quot;</span>)<br>    <span class="hljs-comment">// 然后通过父节点删除子节点</span><br>    <span class="hljs-title class_">Syp</span>.<span class="hljs-title function_">removeChild</span>(<span class="hljs-title class_">Reuben</span>)<br><br>    <span class="hljs-comment">// 删除是一个动态过程 一删除其余的也跟着删除</span><br>    <span class="hljs-title class_">Syp</span>.<span class="hljs-title function_">removeChild</span>(<span class="hljs-title class_">Syp</span>.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h2 id="插入DOM节点"><a href="#插入DOM节点" class="headerlink" title="插入DOM节点"></a>插入DOM节点</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;p id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;实验品&lt;/p&gt;<br>&lt;div id=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安娜&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Syp</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Syp&quot;</span>)<br>    <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;list&quot;</span>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><strong>然后浏览器输入来实现 追加效果</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">// 追加<br>list.appendChild(Stitch);<br></code></pre></td></tr></table></figure>

<h2 id="创建DOM新节点"><a href="#创建DOM新节点" class="headerlink" title="创建DOM新节点"></a>创建DOM新节点</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;p id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;实验品&lt;/p&gt;<br>&lt;div id=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安娜&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Syp</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Syp&quot;</span>)<br>    <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;list&quot;</span>)<br><br>    <span class="hljs-comment">// 通过 JS 创建新的p节点</span><br>    <span class="hljs-keyword">var</span> sdq = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createRlement</span>(<span class="hljs-string">&quot;p&quot;</span>)<br>    <span class="hljs-comment">// 给它创建id</span><br>    sdq.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;sdq&quot;</span><br>    <span class="hljs-comment">// 内容</span><br>    sdq.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;我叫史迪奇&quot;</span><br><br>    list.<span class="hljs-property">appendChild</span><br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><strong>然后浏览器输入来实现 创建效果</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">// 创建<br>list.appendChild(sdq);<br></code></pre></td></tr></table></figure>
<h3 id="创建一个script标签节点"><a href="#创建一个script标签节点" class="headerlink" title="创建一个script标签节点"></a>创建一个script标签节点</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;p id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;实验品&lt;/p&gt;<br>&lt;div id=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安娜&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Syp</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Syp&quot;</span>)<br>    <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;list&quot;</span>)<br>    <span class="hljs-keyword">var</span> sdq = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createRlement</span>(<span class="hljs-string">&quot;p&quot;</span>)<br>    sdq.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;sdq&quot;</span><br>    sdq.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;我叫史迪奇&quot;</span><br><br>    <span class="hljs-comment">// 通过这个属性, 可以设置任意的值</span><br>    <span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createRlement</span>(<span class="hljs-string">&quot;script&quot;</span>);<br>    script.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-string">&#x27;text/javascript&#x27;</span>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><strong>然后浏览器输入来实现 创建效果</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">// 创建<br>list.appendChild(script);<br></code></pre></td></tr></table></figure>
<h3 id="创建一个script标签节点-1"><a href="#创建一个script标签节点-1" class="headerlink" title="创建一个script标签节点"></a>创建一个script标签节点</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;p id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;实验品&lt;/p&gt;<br>&lt;div id=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安娜&lt;/p&gt;<br>    &lt;p id=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Syp</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Syp&quot;</span>)<br>    <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;list&quot;</span>)<br>    <span class="hljs-keyword">var</span> sdq = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createRlement</span>(<span class="hljs-string">&quot;p&quot;</span>)<br>    sdq.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;sdq&quot;</span><br>    sdq.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;我叫史迪奇&quot;</span><br><br>    <span class="hljs-comment">// 创建空style标签</span><br>    <span class="hljs-keyword">var</span> style = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createRlement</span>(<span class="hljs-string">&quot;style&quot;</span>);<br>    style.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-string">&#x27;text/css&#x27;</span>);<br>    <span class="hljs-comment">// 标签内容</span><br>    style.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;body&#123;background-color: chartreuse;&#125;&#x27;</span><br>    <span class="hljs-comment">// document.getElementsByTagName(&#x27;head&#x27;)[0].appendChild(style)</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>



<p><strong>然后浏览器输入来实现 创建效果</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">// 创建style<br>document.getElementsByTagName(&#x27;head&#x27;)[0].appendChild(style)<br></code></pre></td></tr></table></figure>
<h2 id="操作表单-验证"><a href="#操作表单-验证" class="headerlink" title="操作表单 (验证)"></a>操作表单 (验证)</h2><pre><code>+ 文本框 text
+ 下拉框 &lt;select&gt;
+ 单选框 radio
+ 多选框 checkbox
+ 隐藏域 hidden
+ 密码框  password</code></pre>
<h3 id="获得提交的信息"><a href="#获得提交的信息" class="headerlink" title="获得提交的信息"></a>获得提交的信息</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;form action=<span class="hljs-string">&quot;list&quot;</span>&gt;<br>&lt;p&gt;<br>    &lt;span&gt;实验品编号: &lt;/span&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span></span><br>&lt;/p&gt;<br>    &lt;!-- 多选框的值, 就是定义好value --&gt;<br>    &lt;p&gt;<br>        &lt;span&gt;实验品编号: &lt;/span&gt;<br>        &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;See&quot;</span> vlaue=<span class="hljs-string">&quot;Yes&quot;</span> id=<span class="hljs-string">&quot;Yes&quot;</span>&gt;有看过<br>        &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> name=<span class="hljs-string">&quot;See&quot;</span> vlaue=<span class="hljs-string">&quot;No&quot;</span> id=<span class="hljs-string">&quot;No&quot;</span>&gt;没看过<br>    &lt;/p&gt;<br><br>&lt;/div&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">See</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>)<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Yes</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Yes&quot;</span>)<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">NO</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createRlement</span>(<span class="hljs-string">&quot;No&quot;</span>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><strong>然后浏览器输入来实现 创建效果</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML">// 得到输入框的值<br>See.value<br>// 修改输入框的值<br>See.value = &#x27;333&#x27;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C"> 以下为效果</font></p>
<p>
    <span>实验品编号: </span><input type="text" id="name">
</p>
    <!-- 多选框的值, 就是定义好value -->
    <p>
        <span>实验品编号: </span>
        <input type="radio" name="See" vlaue="Yes" id="Yes">有看过
        <input type="radio" name="See" vlaue="No" id="No">没看过
    </p>



<script>
    var See = document.getElementById("name")
    var Yes = document.getElementById("Yes")
    var NO = document.createRlement("No")
</script>


<h2 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;!-- <span class="hljs-variable constant_">MD5</span> 工具类 --&gt;<br>&lt;script src=<span class="hljs-string">&quot;https:cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;form action=<span class="hljs-string">&quot;#&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>&lt;p&gt;<br>    &lt;span&gt;实验品编号: &lt;/span&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span></span><br>&lt;/p&gt;<br>&lt;p&gt;<br>    &lt;span&gt;密&amp;emsp;&amp;emsp;&amp;emsp;码: &lt;/span&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-pwd&quot;</span>&gt;</span></span><br>&lt;/p&gt;<br>    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> id=<span class="hljs-string">&quot;md5-pwd&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;<br>    &lt;!-- 绑定事件 onclick 被点击 --&gt;<br>    &lt;button type=<span class="hljs-string">&quot;submit&quot;</span> onclick=<span class="hljs-string">&quot;dianji()&quot;</span>&gt;登陆&lt;/button&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">dianji</span>(<span class="hljs-params"></span>)<br>        <span class="hljs-keyword">var</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-keyword">var</span> pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;pwd&quot;</span>);<br>        <span class="hljs-keyword">var</span> md5pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;md5-pwd&quot;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name.<span class="hljs-property">value</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pwd.<span class="hljs-property">value</span>);<br><br>        <span class="hljs-comment">// MD5 算法</span><br>        pwd.<span class="hljs-property">value</span> = <span class="hljs-title function_">md5</span>(pwd.<span class="hljs-property">value</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pwd.<span class="hljs-property">value</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C"> 以下为效果</font></p>
<!-- MD5 工具类 -->
<script src="https:cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js"></script>
<form action="#" method="post">
<p>
    <span>实验品编号: </span><input type="text" id="name">
</p>
<p>
    <span>密&emsp;&emsp;&emsp;码: </span><input type="password" id="input-pwd">
</p>
    <input type="hidden" id="md5-pwd" name="password">
    <!-- 绑定事件 onclick 被点击 -->
    <button type="submit" onclick="dianji()">登陆</button>

<script>
    function dianji()
        var name = document.getElementById("name");
        var pwd = document.getElementById("pwd");
        var md5pwd = document.getElementById("md5-pwd");
        console.log(name.value);
        console.log(pwd.value);

        // MD5 算法
        md5pwd.value = md5(pwd.value)
        console.log(pwd.value);
</script>

<h1>加强版</h1>

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;!-- <span class="hljs-variable constant_">MD5</span> 工具类 --&gt;<br>&lt;script src=<span class="hljs-string">&quot;https:cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;&lt;/script&gt;<br><br>&lt;!-- 表单绑定提交事件onsubmit= 绑定应该提交检查的函数 trur和<span class="hljs-literal">false</span>将结果返回给表单用 --&gt;<br>&lt;form action=<span class="hljs-string">&quot;http://www.baidu.com/&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> onsubit=<span class="hljs-string">&quot;dianji()&quot;</span>&gt;<br>&lt;p&gt;<br>    &lt;span&gt;实验品编号: &lt;/span&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span></span><br>&lt;/p&gt;<br>&lt;p&gt;<br>    &lt;span&gt;密&amp;emsp;&amp;emsp;&amp;emsp;码: &lt;/span&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input-pwd&quot;</span>&gt;</span></span><br>&lt;/p&gt;<br>    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> id=<span class="hljs-string">&quot;md5-pwd&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;<br>    &lt;!-- 绑定事件 onclick 被点击 --&gt;<br>    &lt;button type=<span class="hljs-string">&quot;submit&quot;</span>&gt;登陆&lt;/button&gt;<br><br>&lt;script&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">dianji</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">var</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-keyword">var</span> pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;pwd&quot;</span>);<br>        <span class="hljs-keyword">var</span> md5pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;md5-pwd&quot;</span>);<br>        <span class="hljs-comment">// MD5 算法</span><br>        md5pwd.<span class="hljs-property">value</span> = <span class="hljs-title function_">md5</span>(pwd.<span class="hljs-property">value</span>);<br>        <span class="hljs-comment">// 可以判断表单内容 true 通过提交 false 阻止提交</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C"> 以下为效果</font></p>
<!-- MD5 工具类 -->
<script src="https:cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js"></script>

<!-- 表单绑定提交事件onsubmit= 绑定应该提交检查的函数 trur和false将结果返回给表单用 -->
<form action="http://www.baidu.com/" method="post" onsubit="dianji()">
<p>
    <span>实验品编号: </span><input type="text" id="name">
</p>
<p>
    <span>密&emsp;&emsp;&emsp;码: </span><input type="password" id="input-pwd">
</p>
    <input type="hidden" id="md5-pwd" name="password">
    <!-- 绑定事件 onclick 被点击 -->
    <button type="submit">登陆</button>

<script>
    function dianji(){
        alert(1);
        var name = document.getElementById("name");
        var pwd = document.getElementById("pwd");
        var md5pwd = document.getElementById("md5-pwd");
        // MD5 算法
        md5pwd.value = md5(pwd.value);
        // 可以判断表单内容 true 通过提交 false 阻止提交
        return true;
    }
</script>





</form></form>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Java面向对象思维之getter和setter(作用)</title>
    <url>/Object-oriented-getter-setter.html</url>
    <content><![CDATA[<p><strong>学习Java个人整理</strong></p>
<a id="more"></a>

<h1 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h1><p><strong>主要是给成员变量赋值, 做一定的保护</strong></p>
<h1 id="setter"><a href="#setter" class="headerlink" title="setter"></a>setter</h1><p><strong>从成员变量中获取数据</strong></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript jQuery</title>
    <url>/JavaScript-jQuery.html</url>
    <content><![CDATA[<p><strong><a href="https://jquery.cuishifeng.cn/jQuery.Ajax.html">JavaScript jQuery个人整理</a></strong></p>
<a id="more"></a>

<h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;script src=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;&lt;/script&gt;<br><br><br>&lt;script&gt;<br>   <span class="hljs-comment">// 选择器就是css的选择器</span><br>   $(<span class="hljs-string">&#x27;#test-jquey&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我叫史迪奇&#x27;</span>)<br>   )<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br><span class="hljs-comment">//原生js的css选择器</span><br>    <span class="hljs-comment">// 标签选择器</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>();<br>    <span class="hljs-comment">// id选择器</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsById</span>();<br>    <span class="hljs-comment">// 类 class选择器</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>();<br>    <br><span class="hljs-comment">// jQuery的css选择器</span><br>    <span class="hljs-comment">// 标签选择器</span><br>    $(<span class="hljs-string">&#x27;p&#x27;</span>).<span class="hljs-title function_">click</span>()<br>    <span class="hljs-comment">// id选择器</span><br>    $(<span class="hljs-string">&#x27;#id3&#x27;</span>).<span class="hljs-title function_">click</span>()<br>    <span class="hljs-comment">// 类 class选择器</span><br>    $(<span class="hljs-string">&#x27;.class3&#x27;</span>).<span class="hljs-title function_">click</span>()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p><strong>鼠标事件</strong><br>    + mousedown()按下<br>    + mouseenter()当鼠标指针穿过元素时<br>    + mouseleave()离开<br>    + mousemove()移动<br>    + mouseout()当鼠标指针从元素上移开时<br>    + mouseover()点击结束<br>    + mouseup()元素上放松鼠标按钮</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;head&gt;<br>    &lt;title&gt;定位板&lt;/title&gt;<br>    &lt;script src=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;style&gt;<br>        #divMove &#123;<br>            <span class="hljs-attr">width</span>: 500px;<br>            <span class="hljs-attr">height</span>: 500px;<br>            <span class="hljs-attr">border</span>: 1px solid blue;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;!--要求: 获取鼠标当前的一个坐标--&gt;<br>    <span class="hljs-attr">mouse</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mouseMove&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>    &lt;div id=<span class="hljs-string">&quot;divMove&quot;</span>&gt;<br>        在这里移动鼠标<br>    &lt;/div&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">// 当网页元素加载完毕之后, 响应事件</span><br>        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            $(<span class="hljs-string">&#x27;#divMove&#x27;</span>).<span class="hljs-title function_">mousemove</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>                $(<span class="hljs-string">&#x27;#mouseMove&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;x:&#x27;</span> + e.<span class="hljs-property">pageX</span> + <span class="hljs-string">&#x27;y:&#x27;</span> + e.<span class="hljs-property">pageY</span>)<br>            &#125;)<br>        &#125;);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>
<!DOCTYPE html>
<html lang="cn">

<head>
    <title>定位板</title>
    <script src="http://libs.baidu.com/jquery/2.0.0/jquery.min.js"></script>
    <style>
        #divMove {
            width: 500px;
            height: 500px;
            border: 1px solid blue;
        }
    </style>
</head>

<body>
    <!--要求: 获取鼠标当前的一个坐标-->
    mouse: <span id="mouseMove"></span>
    <div id="divMove">
        在这里移动鼠标
    </div>
    <script>
        // 当网页元素加载完毕之后, 响应事件
        $(function() {
            $('#divMove').mousemove(function(e) {
                $('#mouseMove').text('x:' + e.pageX + 'y:' + e.pageY)
            })
        });
    </script>
</body>

</html>

<h1 id="操作-DOM元素"><a href="#操作-DOM元素" class="headerlink" title="操作 DOM元素"></a>操作 DOM元素</h1><h3 id="节点文本操作"><a href="#节点文本操作" class="headerlink" title="节点文本操作"></a>节点文本操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">&lt;head&gt;<br>    &lt;title&gt;节点文本操作&lt;/title&gt;<br>    &lt;script src=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;ul id=<span class="hljs-string">&quot;Syp&quot;</span>&gt;实验品<br>        &lt;li name=<span class="hljs-string">&quot;Stitch&quot;</span>&gt;史迪奇&lt;/li&gt;<br>        &lt;li name=<span class="hljs-string">&quot;Reuben&quot;</span>&gt;鲁本&lt;/li&gt;<br>        &lt;li name=<span class="hljs-string">&quot;Angel&quot;</span>&gt;安琪&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;script&gt;<br>        $(<span class="hljs-string">&#x27;#Syp li[name=Stitch]&#x27;</span>).<span class="hljs-title function_">text</span>()<br>        $(<span class="hljs-string">&#x27;#Syp&#x27;</span>).<span class="hljs-property">html</span><br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>
<p><strong>浏览器输入来实现效果</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 获得值</span><br>$(<span class="hljs-string">&#x27;#Syp li[name=Stitch]&#x27;</span>).<span class="hljs-title function_">text</span>()<br><span class="hljs-comment">// 设置值</span><br>$(<span class="hljs-string">&#x27;#Syp li[name=Stitch]&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;我叫史迪奇&quot;</span>)<br><span class="hljs-comment">// 获得值</span><br>$(<span class="hljs-string">&#x27;#Syp&#x27;</span>).<span class="hljs-title function_">html</span>()<br><span class="hljs-comment">// 设置值</span><br>$(<span class="hljs-string">&#x27;#Syp&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;strong&gt;我叫史迪奇&lt;/strong&gt;&quot;</span>)<br></code></pre></td></tr></table></figure>
<h3 id="css的操作"><a href="#css的操作" class="headerlink" title="css的操作"></a>css的操作</h3><p><strong>浏览器输入来实现效果</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">$(<span class="hljs-string">&#x27;#Syp li[name=Stitch]&#x27;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;blue&quot;</span>&#125;)<br></code></pre></td></tr></table></figure>
<h3 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h3><p><strong>浏览器输入来实现效果</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 本质 display: none;</span><br>    <span class="hljs-comment">// 显示</span><br>    $(<span class="hljs-string">&#x27;#Syp li[name=Stitch]&#x27;</span>).<span class="hljs-title function_">show</span>()<br>    <span class="hljs-comment">// 隐藏</span><br>    $(<span class="hljs-string">&#x27;#Syp li[name=Stitch]&#x27;</span>).<span class="hljs-title function_">hide</span>()<br></code></pre></td></tr></table></figure>
<h3 id="window操作"><a href="#window操作" class="headerlink" title="window操作"></a>window操作</h3><p><strong>浏览器输入来实现效果</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 查看窗口宽度</span><br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">width</span>()<br><span class="hljs-comment">// 查看窗口高度</span><br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">height</span>()<br><span class="hljs-comment">// 切换显示与隐藏</span><br>$(<span class="hljs-string">&#x27;#Syp li[name=Stitch]&#x27;</span>).<span class="hljs-title function_">toggle</span>();<br></code></pre></td></tr></table></figure>
<h3 id="ajax操作"><a href="#ajax操作" class="headerlink" title="ajax操作"></a>ajax操作</h3><p><strong>浏览器输入来实现效果</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs JavaScript">$(<span class="hljs-string">&quot;#Syp&quot;</span>).<span class="hljs-title function_">ajax</span>()<br><br>$.<span class="hljs-title function_">ajax</span>(&#123; <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;test.html&quot;</span>, <span class="hljs-attr">context</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>, <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;done&quot;</span>);<br>&#125;&#125;);<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">以下为实验对象</font></p>
<!DOCTYPE html>
<html lang="cn">

<head>
    <title>节点文本操作</title>
    <script src="http://libs.baidu.com/jquery/2.0.0/jquery.min.js"></script>
</head>

<body>
    <ul id="Syp">实验品
        <li name="Stitch">史迪奇</li>
        <li name="Reuben">鲁本</li>
        <li name="Angel">安琪</li>
    </ul>
    <script>
        $('#Syp li[name=Stitch]').text()
        $('#Syp').html
    </script>
</body>

</html>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Java面向对象思维之构造方法需的重载</title>
    <url>/Object-oriented-constructor-heavy-load.html</url>
    <content><![CDATA[<p><strong>学习Java个人整理</strong></p>
<a id="more"></a>

<h1 id="例如造一辆车-例如-车有颜色-车有轮子-车座位"><a href="#例如造一辆车-例如-车有颜色-车有轮子-车座位" class="headerlink" title="例如造一辆车 例如 车有颜色 车有轮子 车座位"></a>例如造一辆车 例如 车有颜色 车有轮子 车座位</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"> //成员变量<br>$ public class Car &#123;<br>$ String color;  //颜色<br>$ int wheel;   //轮子<br>$ int seat;   //座位<br>$ &#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ public Car(String color,  int seat) &#123; <br>   设置属性信息<br>   this.color = color; 颜色<br>   this.seat = seat; 座位<br>$ &#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ public Car(String color, int wheel, int seat) &#123; <br>   设置属性信息<br>   this(color,seat);  //this还可以调用当前累中其他的构造方法<br>   this.wheel = wheel; 轮子<br>$ &#125;<br></code></pre></td></tr></table></figure>
<h1 id="执行main方法"><a href="#执行main方法" class="headerlink" title="执行main方法"></a>执行main方法</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"> //成员方法<br>$ public static void main(String[ ] args) &#123;<br>   Car c1 = new Car(<span class="hljs-string">&quot;透明&quot;</span>,9);<br>   Car c2 = new Car(<span class="hljs-string">&quot;黄&quot;</span>,5,9);<br>   &#125;<br>$ &#125;<br></code></pre></td></tr></table></figure>
<h1 id="注意是this-可以访问其他构造方法"><a href="#注意是this-可以访问其他构造方法" class="headerlink" title="注意是this()可以访问其他构造方法"></a>注意是this()可以访问其他构造方法</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java面向对象思维之构造方法</title>
    <url>/Object-oriented-constructor.html</url>
    <content><![CDATA[<p><strong>学习Java个人整理</strong></p>
<a id="more"></a>

<h1 id="例如造一辆车-而车有什么属性？-例如-车有颜色-车有轮子-车座位"><a href="#例如造一辆车-而车有什么属性？-例如-车有颜色-车有轮子-车座位" class="headerlink" title="例如造一辆车 而车有什么属性？ 例如 车有颜色 车有轮子 车座位"></a>例如造一辆车 而车有什么属性？ 例如 车有颜色 车有轮子 车座位</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"> //成员变量<br>$ public class Car &#123;<br>$ String color;  //颜色<br>$ int wheel;   //轮子<br>$ int seat;   //座位<br>$ &#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ 自动生成一个无参数的构造方法 public <span class="hljs-function"><span class="hljs-title">Car</span></span>() &#123; <br>$ public Car(String color, int wheel, int seat) &#123; //这里给它添加参数  <br>   设置属性信息<br>   this.color = color; 颜色<br>   this.wheel = wheel; 轮子<br>   this.seat = seat; 座位<br>$ &#125;<br></code></pre></td></tr></table></figure>
<h1 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h1><p><strong>例如 车能飞</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"> //成员方法<br>$ public class <span class="hljs-function"><span class="hljs-title">fly</span></span>()&#123;<br>$ System.out.println(this.color+<span class="hljs-string">&quot;车能飞&quot;</span>);<br>$ &#125;<br></code></pre></td></tr></table></figure>
<p><strong>例如 车可以潜水</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"> //成员方法<br>$ public class <span class="hljs-function"><span class="hljs-title">diving</span></span>()&#123;<br>$ System.out.println(this.diving+<span class="hljs-string">&quot;车可以下水&quot;</span>);<br>$ &#125;<br></code></pre></td></tr></table></figure>
<h1 id="执行main方法"><a href="#执行main方法" class="headerlink" title="执行main方法"></a>执行main方法</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"> //成员方法<br>$ public static void main(String[ ] args) &#123;<br>   Car c1 = new Car(<span class="hljs-string">&quot;透明&quot;</span>,5,9);<br>   Car c2 = new Car(<span class="hljs-string">&quot;黄&quot;</span>,5,9);<br>   c1.fly();<br>   c1.diving();<br>$ <br>   c2.fly();<br>   c2.diving();<br>   &#125;<br>$ &#125;<br></code></pre></td></tr></table></figure>
<h1 id="构造方法需要注意"><a href="#构造方法需要注意" class="headerlink" title="构造方法需要注意"></a>构造方法需要注意</h1><p><strong>没有返回值这一项</strong><br><strong>在new的时候, 给对象设置属性信息</strong><br><strong>Java会默认自动的送每个类一个无参数的构造方法, 如果你写了构造方法, 那么Java就不送了</strong></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java面向对象思维</title>
    <url>/Object-oriented-this.html</url>
    <content><![CDATA[<p><strong>学习Java个人整理</strong></p>
<a id="more"></a>

<h1 id="例如造一辆车-而车有什么属性？-例如-车有颜色-车有轮子-车座位"><a href="#例如造一辆车-而车有什么属性？-例如-车有颜色-车有轮子-车座位" class="headerlink" title="例如造一辆车 而车有什么属性？ 例如 车有颜色 车有轮子 车座位"></a>例如造一辆车 而车有什么属性？ 例如 车有颜色 车有轮子 车座位</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"> //成员变量<br>$ public class Car &#123;<br>$ 	String color;  //颜色<br>$ 	int wheel;   //轮子<br>$ 	int seat;   //座位<br>$ &#125;<br></code></pre></td></tr></table></figure>
<p><strong>显示属性</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"> //成员方法<br>$ public void <span class="hljs-function"><span class="hljs-title">run</span></span>() &#123;<br>$	System.out.println(this.color);    //颜色<br>$	System.out.println(this.wheel);    //轮子<br>$	System.out.println(this.seat);     //座位<br>$ &#125;<br></code></pre></td></tr></table></figure>
<h1 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h1><p><strong>例如车能飞</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"> //成员方法<br>$ public class <span class="hljs-function"><span class="hljs-title">fly</span></span>()&#123;<br>$ System.out.println(this.color+<span class="hljs-string">&quot;车能飞&quot;</span>);<br>$ &#125;<br></code></pre></td></tr></table></figure>
<p><strong>例如车可以潜水</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"> //成员方法<br>$ public class <span class="hljs-function"><span class="hljs-title">diving</span></span>()&#123;<br>$ System.out.println(this.color+<span class="hljs-string">&quot;车可以下水&quot;</span>);<br>$ &#125;<br></code></pre></td></tr></table></figure>
<h1 id="执行main方法"><a href="#执行main方法" class="headerlink" title="执行main方法"></a>执行main方法</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ public static void main(String[ ] args) &#123;<br>$ 	  Car c1 = new Car();   //先创建一辆车<br>$ 	  c1.color = <span class="hljs-string">&quot;透明&quot;</span>;  //我的车是透明色<br>$ 	  c1.wheel = 5;  //众所周知所以车都是5个轮子<br>    c1.seat = 9; //我的车 里面坐4个 车前绑1个人用来刹车 车顶坐1个人<br>    c1.run();<br>    c1.fly();<br>    c1.diving();<br>$<br>    Car c2 = new Car();   //先创建一辆车<br>$	  c2.color = <span class="hljs-string">&quot;黄&quot;</span>;  //我的车是屎黄<br>$	  c2.wheel = 5;  //众所周知所以车都是5个轮子<br>    c2.seat = 9; //我的车 里面坐4个 车前绑1个人用来刹车 车顶坐1个人<br>    c2.run();<br>    c2.fly();<br>    c2.diving();<br>$	&#125;<br>$ &#125;<br></code></pre></td></tr></table></figure>
<h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h1><p><strong>this: 当前类的对象</strong><br><strong>this可以在方法内部获取到对象中的属性信息</strong><br><strong>this还可以区分局部变量和成员变量</strong></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Linux命令(未完工)</title>
    <url>/Linux-command.html</url>
    <content><![CDATA[<p><strong>Linux基本命令</strong></p>
<a id="more"></a>

<blockquote>
<h1 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h1></blockquote>
<p><strong>命令英文原意: list</strong><br><strong>命令所在路径: /bin/ls</strong><br><strong>执行权限: 所有用户</strong><br><strong>功能描述: 显示目录文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ ls 显示当前目录下文件<br><br><span class="hljs-variable">$ls</span> 目录名 显示指定目录下文件<br><br><span class="hljs-variable">$ls</span> -l 长格式显示目录文件<br><br><span class="hljs-variable">$ls</span> -l 文件名 长格式显示指定文件<br><br><span class="hljs-variable">$ls</span> -a 显示所有文件包含隐藏文件<br><br><span class="hljs-variable">$ls</span> -al 长格式显示当前目录下所有文件<br><br><span class="hljs-variable">$ls</span> -h 文件大小显示为常见大小单位 B KB MB …<br><br><span class="hljs-variable">$ls</span> -d 显示目录本身，而不是里面的子文件<br></code></pre></td></tr></table></figure>
<h1 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h1><p><strong>命令英文原意: change directory</strong><br><strong>命令所在路径: shell内置命令</strong><br><strong>执行权限: 所有用户</strong><br><strong>功能描述: 切换所在目录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$cd</span> /xx  切换到指定路径(使用绝对路径方式)<br><br><span class="hljs-variable">$cd</span> ~    进入当前用户的家目录<br><br><span class="hljs-variable">$cd</span> –    进入上次目录<br><br><span class="hljs-variable">$cd</span> ..   进入上一级目录<br><br><span class="hljs-variable">$cd</span> .    进入当前目录<br></code></pre></td></tr></table></figure>
<!-- ``` bash
$ 
``` -->

]]></content>
  </entry>
  <entry>
    <title>SQL Server T-SQL 从创建数据库到创建数据表到插入数据</title>
    <url>/SQL-kbl.html</url>
    <content><![CDATA[<p><strong>SQL Server个人整理</strong></p>
<a id="more"></a>

<h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">CREATE DATABASE 数据库名;<br></code></pre></td></tr></table></figure>
<p><strong>例子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">CREATE DATABASE sdz;<br></code></pre></td></tr></table></figure>
<h1 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">create table 表名(<br>	参数 类型(位数),<br>	参数 类型(位数),<br>	参数 类型(位数),<br>	参数 类型(位数)<br>);<br></code></pre></td></tr></table></figure>
<p><strong>例子在sdz数据库创建sdq这个表</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">use sdq;<br>CREATE TABLE bbs (<br>  id int(11) ,<br>  name varchar(200) ,<br>  sex varchar(200) ,<br>  age int(11)  ,<br>  classid int(11) <br>);<br></code></pre></td></tr></table></figure>

<h1 id="插入数据表内容"><a href="#插入数据表内容" class="headerlink" title="插入数据表内容"></a>插入数据表内容</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">INSERT INTO 数据表 (参数, 参数, 参数)<br>VALUES (参数, 参数, 参数); <br></code></pre></td></tr></table></figure>
<p><strong>例子</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">INSERT INTO bbs (id,name,sex,age,classid) VALUES<br>(1, <span class="hljs-string">&#x27;sdqz&#x27;</span>, NULL, NULL, 2),<br>(2, <span class="hljs-string">&#x27;sdq&#x27;</span>, NULL,  NULL,  3),<br>(3, <span class="hljs-string">&#x27;sdz&#x27;</span>, NULL,  NULL,  4);<br></code></pre></td></tr></table></figure>

<h1 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ elect * from sdq<br></code></pre></td></tr></table></figure>
<h1 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ DROP TABLE 表名;<br></code></pre></td></tr></table></figure>
<p><strong>例子</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ DROP TABLE sdq;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>SQL Server T-SQL 视图</title>
    <url>/SQL-try.html</url>
    <content><![CDATA[<p><strong>SQL Server个人整理</strong></p>
<a id="more"></a>

<h1 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ create view 视图(字段别名) as select 字段 from 表 WITH CHECK OPTION<br></code></pre></td></tr></table></figure>
<h1 id="向视图插入数据"><a href="#向视图插入数据" class="headerlink" title="向视图插入数据"></a>向视图插入数据</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ insert 视图 values(<span class="hljs-string">&#x27;数据&#x27;</span>) <br></code></pre></td></tr></table></figure>
<h1 id="查询视图数据"><a href="#查询视图数据" class="headerlink" title="查询视图数据"></a>查询视图数据</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ select 字段 from 视图<br></code></pre></td></tr></table></figure>
<h1 id="修改-更新-视图数据"><a href="#修改-更新-视图数据" class="headerlink" title="修改(更新)视图数据"></a>修改(更新)视图数据</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ update 视图 <span class="hljs-built_in">set</span> 修改的字段=<span class="hljs-string">&#x27;修改的数据&#x27;</span> <span class="hljs-built_in">where</span> 匹配字段=<span class="hljs-string">&#x27;匹配数据&#x27;</span> <br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>String 比较</title>
    <url>/String-compare.html</url>
    <content><![CDATA[<p><strong>个人笔记</strong></p>
<a id="more"></a>

<h1 id="String-比较"><a href="#String-比较" class="headerlink" title="String 比较"></a>String 比较</h1><p><strong>当String进行比较时应该用equals</strong></p>
<p><strong>因为equals是String类重写后的用于比较字符串内容的方法</strong></p>
<p><strong>为什么不用==进行比较, 因为==是用于比较地址值</strong></p>
]]></content>
  </entry>
  <entry>
    <title>TypeScript 打包代码</title>
    <url>/TypeScript-Parcel.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<p><strong><a href="https://wwr.lanzoui.com/iFfQ7shdb4d">未打包文件</a></strong></p>
<ul>
<li>密码: sdq3</li>
</ul>
<h1 id="Parcel打包"><a href="#Parcel打包" class="headerlink" title="Parcel打包"></a>Parcel打包</h1><h3 id="Parcel安装方法"><a href="#Parcel安装方法" class="headerlink" title="Parcel安装方法"></a>Parcel安装方法</h3><p><strong>用yarn来安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">yarn add --dev parcel@next<br></code></pre></td></tr></table></figure>
<p><strong>用npm来安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">npm install parcel@next --save<br></code></pre></td></tr></table></figure>
<p><strong>用cnpm来安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">cnpm install parcel@next --save<br></code></pre></td></tr></table></figure>
<h3 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#123;<br>  &quot;name&quot;: &quot;sdqts&quot;,<br>  &quot;version&quot;: &quot;1.0.0&quot;,<br>  &quot;description&quot;: &quot;&quot;,<br>  &quot;main&quot;: &quot;index.js&quot;,<br>  &quot;scripts&quot;: &#123;<br>    &#x2F;&#x2F; 要打包路径<br>    &quot;test&quot;: &quot;parcel .&#x2F;src&#x2F;index.html&quot;<br>  &#125;,<br>  &quot;keywords&quot;: [],<br>  &quot;author&quot;: &quot;&quot;,<br>  &quot;license&quot;: &quot;ISC&quot;,<br>  &quot;dependencies&quot;: &#123;<br>    &quot;parcel&quot;: &quot;^2.0.0-rc.0&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="引入-script"><a href="#引入-script" class="headerlink" title="引入 script"></a>引入 script</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;script src&#x3D;&quot;.&#x2F;page.ts&quot;&gt;&lt;&#x2F;script&gt;<br>   &lt;title&gt;史迪奇国王&lt;&#x2F;title&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt; <br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<h3 id="page-ts"><a href="#page-ts" class="headerlink" title="page.ts"></a>page.ts</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const sdq : string &#x3D; &quot;史迪奇&quot;<br>console.log(sdq)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>SQL Server T-SQL 存储过程</title>
    <url>/SQL-storage.html</url>
    <content><![CDATA[<p><strong>SQL Server个人整理</strong></p>
<a id="more"></a>

<h1 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a>创建变量</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">declare</span> 变量名 数据类型 常量<br></code></pre></td></tr></table></figure>
<h1 id="查询变量"><a href="#查询变量" class="headerlink" title="查询变量"></a>查询变量</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ select 变量名<br></code></pre></td></tr></table></figure>
<h1 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ create Procedure 存储过程名 as select 字段 from 表名<br></code></pre></td></tr></table></figure>
<h1 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ EXECUTE 存储过程名<br></code></pre></td></tr></table></figure>
<h1 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ drop proc 存储过程名<br></code></pre></td></tr></table></figure>
<h1 id="Procedure-简写为-proc"><a href="#Procedure-简写为-proc" class="headerlink" title="Procedure 简写为: proc"></a>Procedure 简写为: proc</h1>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript 使用Jquery库</title>
    <url>/TypeScript-Jquery.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<p><strong><a href="https://wwr.lanzoui.com/iFfQ7shdb4d">未打包文件</a></strong></p>
<ul>
<li>密码: sdq3</li>
</ul>
<h1 id="Jquery的引入"><a href="#Jquery的引入" class="headerlink" title="Jquery的引入"></a>Jquery的引入</h1><h3 id="html文件"><a href="#html文件" class="headerlink" title="html文件"></a>html文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br><br>    &lt;!-- 引入jquery --&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;3.5.1&#x2F;jquery.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;script src&#x3D;&quot;.&#x2F;page.ts&quot;&gt;&lt;&#x2F;script&gt;<br>   &lt;title&gt;史迪奇国王&lt;&#x2F;title&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    <br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<h3 id="page-ts"><a href="#page-ts" class="headerlink" title="page.ts"></a>page.ts</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F; 解决报错问题 或者 npm i @types&#x2F;jquery 和 cnpm i @types&#x2F;jquery <br>declare var $: any;<br><br>const sdq: string &#x3D; &quot;史迪奇&quot;;<br>console.log(sdq);<br><br>$(function () &#123;<br>  alert(&quot;史迪奇&quot;);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript数据注解和类型推断</title>
    <url>/TypeScript-zjtd.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<h1 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h1><p><strong>自动注解成Number</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">let sdq : number;<br>sdq &#x3D; 333;<br>let countInference &#x3D; 333<br></code></pre></td></tr></table></figure>
<h1 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h1><p><strong>把鼠标悬浮在上面自动会出现推断</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">function getTotal(one, two) &#123;<br>    return one + two;<br>&#125;<br>var total &#x3D; getTotal(1, 2);<br></code></pre></td></tr></table></figure>
<h1 id="工作使用问题"><a href="#工作使用问题" class="headerlink" title="工作使用问题"></a>工作使用问题</h1><ul>
<li>如果TS能够自动分析变量类型, 我们上面也不需要做了</li>
</ul>
<ul>
<li>如果TS无法自动分析变量的话, 我们就需要使用类型注释</li>
</ul>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript数组类型注解的方法</title>
    <url>/TypeScript-array.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>


<h3 id="常见的"><a href="#常见的" class="headerlink" title="常见的"></a>常见的</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">数字型<br>const numberArr : number[] &#x3D; [1,2,3,4,5,6,7,8,9]<br><br>字符串型<br>const stringArr : string[] &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;]<br></code></pre></td></tr></table></figure>
<h3 id="不常见的"><a href="#不常见的" class="headerlink" title="不常见的"></a>不常见的</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const  : UndefinedArr : Undefined[] &#x3D; [Undefined,Undefined,Undefined]<br></code></pre></td></tr></table></figure>
<h3 id="多类型"><a href="#多类型" class="headerlink" title="多类型"></a>多类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const arr : (nuber | string)[] &#x3D; [2,&quot;史迪奇&quot;,3]<br></code></pre></td></tr></table></figure>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const sdq: &#123;name:string,age:number&#125;[] &#x3D; [<br>    &#123;name:&quot;史迪奇&quot;,age:2001&#125;,<br>    &#123;name:&quot;史迪仔&quot;,age:2001&#125;<br>]<br></code></pre></td></tr></table></figure>
<p><strong>typr alias 类型别名</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">type sdz &#x3D;&#123;name:string,age:number&#125;<br>class Madam &#123;<br>    name:string;<br>    age:number;<br>&#125;<br>const sdq: Madam[] &#x3D; [<br>    &#123;name:&quot;史迪奇&quot;,age:2001&#125;,<br>    &#123;name:&quot;史迪仔&quot;,age:2001&#125;<br>]<br></code></pre></td></tr></table></figure>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const sdq:[string,string,number] &#x3D; [&#39;史迪奇&#39;,&#39;雄性&#39;,626]<br></code></pre></td></tr></table></figure>
<p><strong>列表包元组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const sdq:[string,string,number] []&#x3D; [<br>    [&#39;史迪奇&#39;,&#39;雄性&#39;,626],<br>    [&#39;鲁本&#39;,&#39;雄性&#39;,625],<br>    [&#39;安琪&#39;,&#39;雌性&#39;,624]<br>]<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript 枚举类型</title>
    <url>/TypeScript-Enum.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<h1 id="非常常见的一种类型"><a href="#非常常见的一种类型" class="headerlink" title="非常常见的一种类型"></a>非常常见的一种类型</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">enum Status &#123;<br>  Reuben &#x3D; 625,<br>  Angel &#x3D; 624,<br>  Stitch &#x3D; 626,<br>&#125;<br><br>function getServe(status: any) &#123;<br>  if (status &#x3D;&#x3D;&#x3D; Status.Reuben) &#123;<br>    return &quot;鲁本&quot;;<br>  &#125; else if (status &#x3D;&#x3D;&#x3D; Status.Angel) &#123;<br>    return &quot;安娜&quot;;<br>  &#125; else if (status &#x3D;&#x3D;&#x3D; Status.Stitch) &#123;<br>    return &quot;史迪奇&quot;;<br>  &#125;<br>&#125;<br><br>const result &#x3D; getServe(Status.AngelStitch);<br><br>&#x2F;&#x2F; 可以凭实验品编号查询<br>&#x2F;&#x2F; const result &#x3D; getServe(626);<br><br>console.log(&#96;实验品$&#123;result&#125;&#96;);<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript 泛型</title>
    <url>/TypeScript-genericity.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<h1 id="函数中使用泛型"><a href="#函数中使用泛型" class="headerlink" title="函数中使用泛型"></a>函数中使用泛型</h1><h3 id="泛型函数中基本使用"><a href="#泛型函数中基本使用" class="headerlink" title="泛型函数中基本使用"></a>泛型函数中基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">function join&lt;sdq&gt;(one: sdq, two: sdq) &#123;<br>  return &#96;$&#123;one&#125;$&#123;two&#125;&#96;;<br>&#125;<br>join &lt;string&gt; (&quot;我叫&quot;, &quot;史迪奇&quot;);<br></code></pre></td></tr></table></figure>
<h3 id="泛型中数组的使用"><a href="#泛型中数组的使用" class="headerlink" title="泛型中数组的使用"></a>泛型中数组的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F; 定义数组<br>function MyName&lt;SDQ&gt;(params: Array&lt;SDQ&gt;) &#123;<br>  return params;<br>&#125;<br>MyName &lt;string&gt; ([&quot;626&quot;, &quot;626&quot;]);<br></code></pre></td></tr></table></figure>
<h3 id="多个泛型的定义"><a href="#多个泛型的定义" class="headerlink" title="多个泛型的定义"></a>多个泛型的定义</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F; 定义多个泛型<br>function join&lt;sdq, sdz&gt;(one: sdq, two: sdz) &#123;<br>  return &#96;$&#123;one&#125;$&#123;two&#125;&#96;;<br>&#125;<br>join &lt; number, string &gt; (626, &quot;626&quot;);<br></code></pre></td></tr></table></figure>
<h1 id="类中使用泛型"><a href="#类中使用泛型" class="headerlink" title="类中使用泛型"></a>类中使用泛型</h1><h3 id="泛型类中基本使用"><a href="#泛型类中基本使用" class="headerlink" title="泛型类中基本使用"></a>泛型类中基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">class Syp &lt;sdq&gt; &#123;<br>  constructor(private syps: sdq[]) &#123;&#125;<br>  getSyp(index: number): sdq &#123;<br>    return this.syps[index];<br>  &#125;<br>&#125;<br><br>const syp &#x3D; new Syp([&quot;史迪奇&quot;, &quot;鲁本&quot;, &quot;安娜&quot;]);<br>console.log(syp.getSyp(1));<br></code></pre></td></tr></table></figure>
<h3 id="泛型中的继承"><a href="#泛型中的继承" class="headerlink" title="泛型中的继承"></a>泛型中的继承</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">interface SDQ&#123;<br>  name:string;<br>&#125;<br><br>&#x2F;&#x2F; 继承SDQ<br>class Syp &lt;sdq extends SDQ&gt; &#123;<br>  constructor(private syps: sdq[]) &#123;&#125;<br>  getSyp(index: number): string &#123;<br>    return this.syps[index].name;<br>  &#125;<br>&#125;<br><br>const syp &#x3D; new Syp([<br>  &#123;name:&quot;史迪奇&quot;&#125;,<br>  &#123;name:&quot;鲁本&quot;&#125;,<br>  &#123;name:&quot;安娜&quot;&#125;<br>]);<br>console.log(syp.getSyp(0));<br></code></pre></td></tr></table></figure>
<h3 id="泛型的约束"><a href="#泛型的约束" class="headerlink" title="泛型的约束"></a>泛型的约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F; 约束: 要么是number要么是string<br>class Syp &lt;sdq extends number | string&gt; &#123;<br>  constructor(private syps: sdq[]) &#123;&#125;<br>  getSyp(index: number): sdq &#123;<br>    return this.syps[index];<br>  &#125;<br>&#125;<br><br>const syp &#x3D; new Syp &lt;string&gt;([&quot;史迪奇&quot;, &quot;鲁本&quot;, &quot;安娜&quot;]);<br>console.log(syp.getSyp(1));<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript类</title>
    <url>/TypeScript-class.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>


<h1 id="使用类"><a href="#使用类" class="headerlink" title="使用类"></a>使用类</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">sdq是sdz是父类<br>class sdq&#123;<br>    content &#x3D; &quot;史迪奇&quot;<br>    sayHello()&#123;<br>        return this.content<br>    &#125;<br>&#125;<br><br>sdz是sdq是子类<br>class sdz extends sdq&#123;<br>    sayHello()&#123;<br>        return super.sayHello()+&#39;是小恶魔&#39;<br>    &#125;<br>    sayLove()&#123;<br>        return &quot;史迪仔&quot;<br>    &#125;<br>&#125;<br><br><br>const goddess &#x3D; new sdz()<br>console.log(goddess.sayHello())<br>console.log(goddess.sayLove())<br></code></pre></td></tr></table></figure>
<h1 id="publie-private-protected"><a href="#publie-private-protected" class="headerlink" title="publie private protected"></a>publie private protected</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">类的内部和类的外部<br>class SDQ&#123;<br>    这里就是类的内部 <br>    name : string;<br>    &#x2F;&#x2F;相当于 publie name : string;<br>&#125;<br><br>这里就是类的外部<br>const sdq &#x3D; new SDQ()<br>sdq.name &#x3D; &#39;史迪奇&#39;<br>console.log(sdq.name)<br></code></pre></td></tr></table></figure>


<h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p><strong>继承前</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">class SDQ &#123;<br>    相当于1 public name : string;<br>    constructor(public name : string)&#123;<br>    相当于2 this.name &#x3D; name<br>    &#125;<br>&#125;<br><br>const sdq &#x3D; new SDQ(&quot;我叫史迪奇&quot;)<br>console.log(sdq.name)<br></code></pre></td></tr></table></figure>
<p><strong>继承后</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">class SDQ &#123;<br>    constructor(public name : string)&#123;&#125;<br>&#125;<br><br>类的继承<br>class SDZ extends SDQ&#123;<br>    constructor(public bianhao:number)&#123;<br>        super(&quot;史迪仔&quot;)<br>    &#125;<br>&#125;<br><br>const sdz &#x3D; new SDZ(626)<br>console.log(sdz.bianhao)<br></code></pre></td></tr></table></figure>
<h3 id="get和set"><a href="#get和set" class="headerlink" title="get和set"></a>get和set</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">class SDQ &#123;<br>    constructor(public _age: number)&#123;&#125;<br>    get age()&#123;<br>        return this._age-10<br>    &#125;<br>    set age(age:number)&#123;<br>        this._age &#x3D; age+3 <br>    &#125;<br>&#125;<br><br>const sdq &#x3D; new SDQ(626)<br>sdq.age&#x3D;25<br>console.log(sdq.age)<br></code></pre></td></tr></table></figure>
<h3 id="静态类"><a href="#静态类" class="headerlink" title="静态类"></a>静态类</h3><p><strong>statc</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">class SDQ&#123;<br>    static MyName()&#123;<br>        return &quot;我叫史迪奇&quot;<br>    &#125;<br>&#125;<br><br>console.log(SDQ.MyName())<br></code></pre></td></tr></table></figure>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">抽象类<br>abstract class sdq &#123;<br>    abstract skill()<br>&#125;<br><br>抽象方法<br>class cifan extends sdq&#123;<br>    业务逻辑<br>    skill()&#123;<br>        console.log(&quot;进食&quot;)<br>    &#125;<br>&#125;<br><br>抽象方法<br>class shuijiao extends sdq&#123;<br>    业务逻辑<br>    skill()&#123;<br>        console.log(&quot;睡觉&quot;)<br>    &#125;<br>&#125;<br><br>抽象方法<br>class pohuai extends sdq&#123;<br>    业务逻辑<br>    skill()&#123;<br>        console.log(&quot;破坏&quot;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="只读方法"><a href="#只读方法" class="headerlink" title="只读方法"></a>只读方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">class SDQ &#123;<br>    public readonly _name :string;<br>    constructor(name:string )&#123;<br>        this._name &#x3D; name;<br>    &#125;<br>&#125;<br><br>const sdq &#x3D; new SDQ(&#39;史迪仔&#39;)<br><br>无法分配到 &quot;_name&quot; ，因为它是只读属性<br>sdq._name&#x3D; &#39;史迪奇&#39;<br>console.log(sdq._name)<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript 联合类型和类型保护</title>
    <url>/TypeScript-Union-type-protection.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<h1 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h1><p><strong>关键符好是 | 是联合类型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F; 接口<br>interface SDQ &#123;<br>  anjiao: boolean;<br>  say: () &#x3D;&gt; &#123;&#125;;<br>&#125;<br>&#x2F;&#x2F; 接口<br>interface SDZ &#123;<br>  anjiao: boolean;<br>  skill: () &#x3D;&gt; &#123;&#125;;<br>&#125;<br><br>&#x2F;&#x2F; 联合类型的关键符合是 | <br>function subject(Number: SDQ | SDZ) &#123;<br>  if(Number.anjiao)&#123;<br>    (Number as SDZ).skill<br>  &#125;else&#123;<br>    (Number as SDQ).say<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h1><p><strong>类型保护/类型断言</strong></p>
<h2 id="as语法"><a href="#as语法" class="headerlink" title="as语法"></a>as语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F; 接口<br>interface SDQ &#123;<br>  anjiao: boolean;<br>  say: () &#x3D;&gt; &#123;&#125;;<br>&#125;<br>&#x2F;&#x2F; 接口<br>interface SDZ &#123;<br>  anjiao: boolean;<br>  skill: () &#x3D;&gt; &#123;&#125;;<br>&#125;<br><br>function subject(Number: SDQ | SDZ) &#123;<br>&#x2F;&#x2F; 可以通过断言number as Teacher然后直接调用skill方法<br>  if(Number.anjiao)&#123;<br>    (Number as SDZ).skill<br>  &#125;else&#123;<br>    (Number as SDQ).say<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="in语法"><a href="#in语法" class="headerlink" title="in语法"></a>in语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">function subjectTwo(Number: SDQ | SDZ) &#123;<br>&#x2F;&#x2F; in来判断number里有没有skill()方<br>  if (&quot;skill&quot; in Number) &#123;<br>    Number.skill();<br>  &#125; else &#123;<br>    Number.say();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="typeof语法"><a href="#typeof语法" class="headerlink" title="typeof语法"></a>typeof语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">function sdq(first: string | number, second: string | number) &#123;<br>&#x2F;&#x2F; typeof来判断是不是string<br>  if (typeof first &#x3D;&#x3D;&#x3D; &quot;string&quot; || typeof second &#x3D;&#x3D;&#x3D; &quot;string&quot;) &#123;<br>    return &#96;$&#123;first&#125;$&#123;second&#125;&#96;;<br>  &#125;<br>  return first + second;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="instanceof语法"><a href="#instanceof语法" class="headerlink" title="instanceof语法"></a>instanceof语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">function sdz(first: object | NumberObj, second: object | NumberObj) &#123;<br>  if (first instanceof NumberObj &amp;&amp; second instanceof NumberObj) &#123;<br>    return first.count + second.count;<br>  &#125;<br>  return 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript调用接口</title>
    <url>/TypeScript-interface.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>


<h3 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">interface Girl &#123;<br>    name : string;<br>    age : number;<br>    bust : number;<br>&#125;<br><br>const girl&#x3D;&#123;<br>    name:&#39;史迪奇&#39;,<br>    age : 0,<br>    bust : 999<br><br>&#125;<br><br>const screenResume &#x3D; (girl:Girl) &#x3D;&gt; &#123;<br>    girl.age &lt; 24 &amp;&amp; girl.bust &gt;&#x3D; 90 &amp;&amp; console.log(girl.name + &#39;进入战场&#39;)<br>    girl.age &gt;&#x3D; 24 || girl.bust &lt; 90 &amp;&amp; console.log(girl.name + &#39;已死亡&#39;)<br>&#125;<br><br>const getResume &#x3D; (girl:Girl) &#x3D;&gt; &#123;<br>    console.log(girl.name+&#39;的年龄&#39;+girl.age)<br>    console.log(girl.name+&#39;的实验品编号&#39;+girl.bust)<br>&#125;<br><br>screenResume(girl)<br>getResume(girl)<br></code></pre></td></tr></table></figure>
<p><strong>接口不仅能限制对象还可以限制类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">interface Girl &#123;<br>    name : string;<br>    age : number;<br>    bust : number;<br>    waistline ?: number;<br>    [propname:string]:any;<br>    say():string<br>&#125;<br><br>interface syp extends Girl&#123;<br>    syp():string<br>&#125;<br><br>const girl&#x3D;&#123;<br>    name:&#39;史迪奇&#39;,<br>    age : 0,<br>    bust : 626,<br>    waistline:999,<br>    sex:&#39;男&#39;,<br>    say()&#123;<br>        return &quot;毁灭吧&quot;<br>    &#125;<br>&#125;<br><br>class sdq implements Girl&#123;<br>    name:&#39;鲁本&#39;<br>    age : 0<br>    bust : 625<br>    waistline:999<br>    sex:&#39;男&#39;<br>    say()&#123;<br>        return &quot;毁灭吧&quot;<br>    &#125;<br>&#125;<br><br>const screenResume &#x3D; (girl:Girl) &#x3D;&gt; &#123;<br>    girl.age &lt; 24 &amp;&amp; girl.bust &gt;&#x3D; 90 &amp;&amp; console.log(girl.name + &#39;进入战场&#39;)<br>    girl.age &gt;&#x3D; 24 || girl.bust &lt; 90 &amp;&amp; console.log(girl.name + &#39;已死亡&#39;)<br>&#125;<br><br>const getResume &#x3D; (girl:Girl) &#x3D;&gt; &#123;<br>    console.log(girl.name+&#39;的年龄&#39;+girl.age)<br>    console.log(girl.name+&#39;的实验品编号&#39;+girl.bust)<br>    girl.waistline &amp;&amp; console.log(girl.name+&#39;的战斗力&#39;+girl.waistline)<br>    girl.sex &amp;&amp; console.log(girl.name+&#39;的性别&#39;+girl.sex)<br>&#125;<br><br>screenResume(girl)<br>getResume(girl)<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript 配置文件</title>
    <url>/TypeScript-config.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<h1 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h1><p><strong>命令行输入</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">tsc -init<br></code></pre></td></tr></table></figure>
<h1 id="常用tsconfig-json配置知识"><a href="#常用tsconfig-json配置知识" class="headerlink" title="常用tsconfig.json配置知识"></a>常用tsconfig.json配置知识</h1><h3 id="include-属性是用来指定要编译的文件的"><a href="#include-属性是用来指定要编译的文件的" class="headerlink" title="include 属性是用来指定要编译的文件的"></a>include 属性是用来指定要编译的文件的</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#123;<br>  &quot;include&quot;:[&quot;demo.ts&quot;],<br>  &quot;compilerOptions&quot;: &#123;<br>      &#x2F;&#x2F;any something<br>      &#x2F;&#x2F;........<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="exclude-除什么文件之外"><a href="#exclude-除什么文件之外" class="headerlink" title="exclude 除什么文件之外"></a>exclude 除什么文件之外</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#123;<br>  &quot;exclude&quot;:[&quot;demo.ts&quot;],<br>  &quot;compilerOptions&quot;: &#123;<br>      &#x2F;&#x2F;any something<br>      &#x2F;&#x2F;........<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="files-配置效果和include几乎一样"><a href="#files-配置效果和include几乎一样" class="headerlink" title="files 配置效果和include几乎一样"></a>files 配置效果和include几乎一样</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#123;<br>  &quot;files&quot;:[&quot;demo.ts&quot;],<br>  &quot;compilerOptions&quot;: &#123;<br>      &#x2F;&#x2F;any something<br>      &#x2F;&#x2F;........<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="常用complierOptions配置知识"><a href="#常用complierOptions配置知识" class="headerlink" title="常用complierOptions配置知识"></a>常用complierOptions配置知识</h1><h3 id="removeComments-属性"><a href="#removeComments-属性" class="headerlink" title="removeComments 属性"></a>removeComments 属性</h3><p><strong>作用: removeComments的值设置为true，就是在js中不显示注释</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&quot;removeComments&quot;: false<br></code></pre></td></tr></table></figure>
<h3 id="strict-属性"><a href="#strict-属性" class="headerlink" title="strict 属性"></a>strict 属性</h3><p><strong>作用: 把这个设置为false或者注释掉，意思是我们可以对设置一些不严格的写法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&quot;strict&quot;: false<br></code></pre></td></tr></table></figure>
<h3 id="noImplicitAny-属性"><a href="#noImplicitAny-属性" class="headerlink" title="noImplicitAny 属性"></a>noImplicitAny 属性</h3><p><strong>作用: 允许你的注解类型 any 不用特意表明</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&quot;noImplicitAny&quot;: true<br></code></pre></td></tr></table></figure>
<h3 id="strictNullChecks-属性"><a href="#strictNullChecks-属性" class="headerlink" title="strictNullChecks 属性"></a>strictNullChecks 属性</h3><p><strong>作用: 不强制检查 NULL 类型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&quot;strictNullChecks&quot;: true<br></code></pre></td></tr></table></figure>
<h3 id="rootDir属性-和-outDir属性"><a href="#rootDir属性-和-outDir属性" class="headerlink" title="rootDir属性 和 outDir属性"></a>rootDir属性 和 outDir属性</h3><p><strong>作用: 就是存放路径和生成路径</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&quot;outDir&quot;: &quot;.&#x2F;build&quot; ,  &#x2F;&#x2F; 生成js的目录 <br>&quot;rootDir&quot;: &quot;.&#x2F;src&quot;     &#x2F;&#x2F; 存放ts的目录<br></code></pre></td></tr></table></figure>
<h3 id="sourceMap-属性"><a href="#sourceMap-属性" class="headerlink" title="sourceMap 属性"></a>sourceMap 属性</h3><p><strong>作用: 里面储存着位置信息</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&quot;sourceMap&quot;: true<br></code></pre></td></tr></table></figure>
<h3 id="noUnusedLocals属性-和-noUnusedParameters属性"><a href="#noUnusedLocals属性-和-noUnusedParameters属性" class="headerlink" title="noUnusedLocals属性 和 noUnusedParameters属性"></a>noUnusedLocals属性 和 noUnusedParameters属性</h3><p><strong>作用: 提示未使用变量和未使用方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&quot;noUnusedLocals&quot;: true,       &#x2F;&#x2F;打包时进行提示未使用的变量    <br>&quot;noUnusedParameters&quot;: true    &#x2F;&#x2F;打包是进行提示未使用的方法<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript静态数据类型</title>
    <url>/TypeScript-type.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<h1 id="TypeScript中的基础静态数据类型有"><a href="#TypeScript中的基础静态数据类型有" class="headerlink" title="TypeScript中的基础静态数据类型有"></a>TypeScript中的基础静态数据类型有</h1><ul>
<li>Undefined :</li>
<li>Number : 数值类型;</li>
<li>string : 字符串类型;</li>
<li>Boolean : 布尔类型；</li>
<li>enum : 枚举类型；</li>
<li>any : 任意类型，一个牛X的类型；</li>
<li>void : 空类型；</li>
<li>Array : 数组类型;</li>
<li>Tuple : 元祖类型；</li>
<li>Null : 空类型</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const count : number &#x3D; 333;<br>const myNname : string &#x3D; &quot;史迪奇&quot;;<br></code></pre></td></tr></table></figure>
<h1 id="还包含对象类型-数组类型-类类型-函数类型"><a href="#还包含对象类型-数组类型-类类型-函数类型" class="headerlink" title="还包含对象类型 数组类型 类类型 函数类型"></a>还包含对象类型 数组类型 类类型 函数类型</h1><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const sdq : &#123;<br>    name:string,<br>    age:number<br>&#125; &#x3D; &#123;<br>    name &#x3D; &quot;史迪奇&quot;,<br>    age &#x3D; 18<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><p><strong>对象类型也可以是数组, 但是类型必须一致</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">const sdq : string [] &#x3D; [&#39;史迪奇&#39;,&#39;独眼霹雳&#39;,&#39;强霸&#39;]<br></code></pre></td></tr></table></figure>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">class Experimentalarticle&#123;&#125;<br>const sdq : Experimentalarticle &#x3D; new Experimentalarticle()<br><br>const sdz : ()&#x3D;&gt;string &#x3D; () &#x3D;&gt;&#123;return &#39;史迪奇&#39;&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript 命名空间</title>
    <url>/TypeScript-NameSpace.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>

<h3 id="首先创建文件夹然后终端定位到文件夹下生成-package-json"><a href="#首先创建文件夹然后终端定位到文件夹下生成-package-json" class="headerlink" title="首先创建文件夹然后终端定位到文件夹下生成 package.json"></a>首先创建文件夹然后终端定位到文件夹下生成 package.json</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">cnpm init -y<br></code></pre></td></tr></table></figure>
<p><strong>没安装cnpm就执行以下命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">npm init -y<br></code></pre></td></tr></table></figure>
<h3 id="第二-执行以下命令生成-tsconfig-json"><a href="#第二-执行以下命令生成-tsconfig-json" class="headerlink" title="第二 执行以下命令生成 tsconfig.json"></a>第二 执行以下命令生成 tsconfig.json</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">tsc -init<br></code></pre></td></tr></table></figure>
<p><strong>然后建两文件夹 build 和 src, 然后根目录可以建html文件了, 在src目录下创建page.ts文件</strong></p>
<h3 id="第三-改-tsconfig-json里面的路径-找到-outDir-和-rootDir"><a href="#第三-改-tsconfig-json里面的路径-找到-outDir-和-rootDir" class="headerlink" title="第三 改 tsconfig.json里面的路径 找到 outDir 和 rootDir"></a>第三 改 tsconfig.json里面的路径 找到 outDir 和 rootDir</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&quot;outDir&quot;: &quot;.&#x2F;build&quot; ,  &#x2F;&#x2F; 生成js的目录 <br>&quot;rootDir&quot;: &quot;.&#x2F;src&quot;     &#x2F;&#x2F; 存放ts的目录<br></code></pre></td></tr></table></figure>
<h3 id="第四-在page-ts写入以下代码"><a href="#第四-在page-ts写入以下代码" class="headerlink" title="第四 在page.ts写入以下代码"></a>第四 在page.ts写入以下代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">namespace Home &#123;<br>    class Header &#123;<br>      constructor() &#123;<br>        const elem &#x3D; document.createElement(&quot;div&quot;);<br>        elem.innerText &#x3D; &quot;史迪奇的头&quot;;<br>        document.body.appendChild(elem);<br>      &#125;<br>    &#125;<br>  <br>    class Content &#123;<br>      constructor() &#123;<br>        const elem &#x3D; document.createElement(&quot;div&quot;);<br>        elem.innerText &#x3D; &quot;史迪奇的身体&quot;;<br>        document.body.appendChild(elem);<br>      &#125;<br>    &#125;<br>  <br>    class Footer &#123;<br>      constructor() &#123;<br>        const elem &#x3D; document.createElement(&quot;div&quot;);<br>        elem.innerText &#x3D; &quot;史迪奇的脚&quot;;<br>        document.body.appendChild(elem);<br>      &#125;<br>    &#125;<br>  <br>    export class Page &#123;<br>      constructor() &#123;<br>        new Header();<br>        new Content();<br>        new Footer();<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>
<h3 id="最后在html文件中加入"><a href="#最后在html文件中加入" class="headerlink" title="最后在html文件中加入"></a>最后在html文件中加入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;cn&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br><br>    &lt;!-- 这是选择路径 --&gt;<br>    &lt;script src&#x3D;&quot;.&#x2F;build&#x2F;page.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;title&gt;史迪奇国王&lt;&#x2F;title&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;script&gt;<br><br>    &lt;!-- 这是生成文件 --&gt;<br>    new Home.Page();<br>    &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<p><strong><a href="https://wwr.lanzoui.com/iAy5hsgzzed">对比这个文件你会学到东西</a></strong></p>
<ul>
<li>密码: sdq3</li>
</ul>
<h1 id="命名空间的嵌套"><a href="#命名空间的嵌套" class="headerlink" title="命名空间的嵌套"></a>命名空间的嵌套</h1><p><strong>接着以上代码</strong></p>
<h3 id="第一-先在src里面创建-components-js"><a href="#第一-先在src里面创建-components-js" class="headerlink" title="第一 先在src里面创建 components.js"></a>第一 先在src里面创建 components.js</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">    namespace Components &#123;<br><br>      &#x2F;&#x2F; 子命名空间<br>      export namespace SdqComponents&#123;<br>        export class Sdz &#123;&#125;<br>      &#125;<br><br>      export class Header &#123;<br>        constructor() &#123;<br>          const elem &#x3D; document.createElement(&quot;div&quot;);<br>          elem.innerText &#x3D; &quot;史迪奇的头&quot;;<br>          document.body.appendChild(elem);<br>        &#125;<br>      &#125;<br>    <br>      export class Content &#123;<br>        constructor() &#123;<br>          const elem &#x3D; document.createElement(&quot;div&quot;);<br>          elem.innerText &#x3D; &quot;史迪奇的身体&quot;;<br>          document.body.appendChild(elem);<br>        &#125;<br>      &#125;<br>    <br>      export class Footer &#123;<br>        constructor() &#123;<br>          const elem &#x3D; document.createElement(&quot;div&quot;);<br>          elem.innerText &#x3D; &quot;史迪奇的脚&quot;;<br>          document.body.appendChild(elem);<br>        &#125;<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="第二-改page-ts"><a href="#第二-改page-ts" class="headerlink" title="第二 改page.ts"></a>第二 改page.ts</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">namespace Home &#123;<br>  export class Page &#123;<br>    constructor() &#123;<br>      new Components.Header();<br>      new Components.Content();<br>      new Components.Footer();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="第三-改-tsconfig-json里面的路径-找到-module把-commonjs改-amd-添加-outFile路径"><a href="#第三-改-tsconfig-json里面的路径-找到-module把-commonjs改-amd-添加-outFile路径" class="headerlink" title="第三 改 tsconfig.json里面的路径 找到 module把 commonjs改 amd 添加 outFile路径"></a>第三 改 tsconfig.json里面的路径 找到 module把 commonjs改 amd 添加 outFile路径</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&quot;module&quot;: &quot;amd&quot;, <br>&quot;outFile&quot;: &quot;.&#x2F;build&#x2F;page.js&quot;<br></code></pre></td></tr></table></figure>
<p><strong><a href="https://wwr.lanzoui.com/iioRtsh1bxa">对比这个文件你会学到进步很大</a></strong></p>
<h1 id="import语法"><a href="#import语法" class="headerlink" title="import语法"></a>import语法</h1><h3 id="page-ts用import引入"><a href="#page-ts用import引入" class="headerlink" title="page.ts用import引入"></a>page.ts用import引入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F; 引入<br>import &#123; Header, Content, Footer &#125; from &quot;.&#x2F;components&quot;;<br>export class Page &#123;<br>  constructor() &#123;<br>    new Header();<br>    new Content();<br>    new Footer();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="component-ts改成以下代码"><a href="#component-ts改成以下代码" class="headerlink" title="component.ts改成以下代码"></a>component.ts改成以下代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F; export是ES6中的接口<br>export class Header &#123;<br>  constructor() &#123;<br>    const elem &#x3D; document.createElement(&quot;div&quot;);<br>    elem.innerText &#x3D; &quot;This is Header&quot;;<br>    document.body.appendChild(elem);<br>  &#125;<br>&#125;<br><br>export class Content &#123;<br>  constructor() &#123;<br>    const elem &#x3D; document.createElement(&quot;div&quot;);<br>    elem.innerText &#x3D; &quot;This is Content&quot;;<br>    document.body.appendChild(elem);<br>  &#125;<br>&#125;<br><br>export class Footer &#123;<br>  constructor() &#123;<br>    const elem &#x3D; document.createElement(&quot;div&quot;);<br>    elem.innerText &#x3D; &quot;This is Footer&quot;;<br>    document.body.appendChild(elem);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1 id="html文件-引用"><a href="#html文件-引用" class="headerlink" title="html文件 引用"></a>html文件 引用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;cn&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<br>    &lt;!-- require.js 的 CDN 地址 --&gt;<br>    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;require.js&#x2F;2.3.6&#x2F;require.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;script src&#x3D;&quot;.&#x2F;build&#x2F;page.js&quot;&gt;&lt;&#x2F;script&gt;<br>    &lt;title&gt;史迪奇国王&lt;&#x2F;title&gt;<br>&lt;&#x2F;head&gt;<br>&lt;body&gt;<br>    &lt;script&gt;<br>        &#x2F;&#x2F; require.js方式引入<br>        require([&quot;page&quot;], function (page) &#123;<br>          &#x2F;&#x2F; ES6基本写法<br>          new page.default();<br>        &#125;);<br>      &lt;&#x2F;script&gt;<br>&lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>第一个Vue.js</title>
    <url>/one-Vue.html</url>
    <content><![CDATA[<p><strong>Vue.js个人整理</strong></p>
<a id="more"></a>

<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Vue学习&lt;/title&gt;<br>    &lt;script src=<span class="hljs-string">&quot;js/vue.min.js&quot;</span>&gt;&lt;/script&gt; <br>    &lt;!-- 导入Vue.js --&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id = <span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;button @click=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;请点击&lt;/button&gt;<br>        &lt;p&gt;&#123;&#123;ms&#125;&#125;&lt;/p&gt;<br>        &lt;!-- &#123;&#123;massage&#125;&#125; --&gt;<br>    &lt;/div&gt;<br>    <br>        &lt;script&gt;<br>            var app = new Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            Model : 数据<br>             data:&#123;<br>                 ms: <span class="hljs-string">&quot;hello,vue!&quot;</span>,<br>             &#125;,<br>             methods:&#123;<br>                 <span class="hljs-function"><span class="hljs-title">showInfo</span></span>()&#123;<br>                        this.ms = <span class="hljs-string">&quot;你好666999, Vue&quot;</span><br>                 &#125;<br>             &#125;<br>        &#125;);<br>        &lt;/script&gt;<br>    &lt;/script&gt;<br>    <br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>
<h1 id="view和Model双向绑定"><a href="#view和Model双向绑定" class="headerlink" title="view和Model双向绑定"></a>view和Model双向绑定</h1>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>TypeScript函数参数和返回类型的注解</title>
    <url>/TypeScript-hscsfhlxdzj.html</url>
    <content><![CDATA[<p><strong>TypeScript学习笔记</strong></p>
<a id="more"></a>


<p><strong>先复制对象再对象后面加个类型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">function getTotal(&#123;one, two&#125;) : &#123;one : number,two : number&#125; &#123;<br>    return one + two;<br>&#125;<br>const total &#x3D; add(&#123;one:1,two:2&#125;)<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>Vue.js 网页笔记本</title>
    <url>/Vue-network-books.html</url>
    <content><![CDATA[<p><strong>Vue.js个人整理</strong></p>
<a id="more"></a>

<h1 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/marked.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/moment.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/icon.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;notebook&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;side-bar&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;toolbar&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;addNote&quot;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;addButtonTitle&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;material-icons&quot;</span>&gt;</span>add_box<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                    新建笔记<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;notes&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;note in notes&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;selectNote(note)&quot;</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123;selected:note === selectedNote&#125;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon material-icons&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;note.favorite&quot;</span>&gt;</span>star<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                    &#123;&#123;note.title&#125;&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;selectedNote&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;toolbar&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selectedNote.title&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入笔记标题&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;removeNote&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;删除笔记&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;material-icons&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;favoriteNote&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;收藏笔记&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;material-icons&quot;</span>&gt;</span>&#123;&#123;selectedNote.favorite?&#x27;star&#x27;:&#x27;star_border&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selectedNote.content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;toolbar status-bar&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;date&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>创建日期: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span>&#123;&#123;selectedNote.created | changeDate&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lines&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>行数: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span>&#123;&#123;linesCount&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;words&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>单词数: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span>&#123;&#123;wordsCount&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;characters&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>字符数: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span>&#123;&#123;charactersCount&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;preview&quot;</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;notePreview&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    var app=new Vue(&#123;<br>        el:&#x27;#notebook&#x27;,<br>        data()&#123;<br>            return&#123;<br>                notes:JSON.parse(localStorage.getItem(&#x27;notes&#x27;)) || [],<br>                selectedId:localStorage.getItem(&quot;selected-id&quot;) || null,<br>            &#125;<br>        &#125;,<br>        methods:&#123;<br>                    saveNote(v)&#123;<br>                        localStorage.setItem(&#x27;notes&#x27;,JSON.stringify(this.notes))<br>                        console.log(&quot;笔记已经保存! &quot;,new Date())<br>                    &#125;,<br>                    addNote()&#123;<br>                        const time = Date.now()<br>                        const note = <br>                        &#123;<br>                            id:String(time),<br>                            title:&#x27;New Note&#x27; + (this.notes.length+1),<br>                            content:&#x27;Hi,Wellcome to write a new note!&#x27;,<br>                            created:time,<br>                            favorite:false,<br>                        &#125;<br>                        this.notes.push(note)<br>                    &#125;,<br>                    selectNote(v)&#123;<br>                        this.selectedId=v.id<br>                    &#125;,<br>                    removeNote()&#123;<br>                        if (this.selectedNote &amp;&amp; confirm(&#x27;确定删除笔记?&#x27;))<br>                        &#123;<br>                            const index = this.notes.indexOf(this.selectedNote)<br>                            if(index !== -1)<br>                            &#123;<br>                                this.notes.splice(index,1)&#125;<br>                        &#125;<br>                    &#125;,<br>                    <br>                    favoriteNote()<br>                    &#123;<br>                        this.selectedNote.favorite=!this.selectedNote.favorite<br>                    &#125;<br>                &#125;,<br>        computed:&#123;<br>                notePreview()&#123;<br>                    return this.selectedNote?marked(this.selectedNote.content):&#x27;&#x27;<br>                &#125;,<br>                addButtonTitle()&#123;<br>                    return this.notes.length+&#x27; note(s) already&#x27;<br>                &#125;,<br>                selectedNote()&#123;<br>                    return this.notes.find(note=&gt;note.id===this.selectedId)<br>                &#125;,<br>                sortedNotes()&#123;<br>                    return this.notes.slice().sort((a,b)=&gt;a.created-b.created).sort((a,b)=&gt;(a.favorite===b.favorite)?0:a.favorite?-1:1)<br>                &#125;,<br>                linesCount()&#123;<br>                    if(this.selectedNote)<br>                    &#123;<br>                        return this.selectedNote.content.split(/\r\n|\r|\n/).length<br>                    &#125;<br>                &#125;,<br>            wordsCount()&#123;<br>                if(this.selectedNote)&#123;<br>                    var s = this.selectedNote.content;<br>                    s = s.replace(/\n/g,&#x27;&#x27;)<br>                    s = s.replace(/(^\s*)|(\s*$)/gi,&#x27;&#x27;)<br>                    s = s.replace(/\s\s+/gi,&#x27;&#x27;)<br>                    return s.split(&#x27; &#x27;).length<br>                &#125;<br>            &#125;,<br>                    charactersCount()&#123;<br>                        if(this.selectedNote)&#123;<br>                        return this.selectedNote.content.split(&#x27;&#x27;).length<br>                        &#125;<br>                    &#125;<br>            &#125;,<br>            watch:&#123;<br>                notes:&#123;<br>                    handler:&#x27;saveNote&#x27;,<br>                    deep:true,<br>                &#125;,<br>                selectedId(v)&#123;<br>                    localStorage.setItem(&#x27;selected-id&#x27;,v)<br>                &#125;<br>            &#125;,<br>            filters:&#123;<br>                changeDate(v)&#123;<br>                    return moment(v).format(&#x27;YYYY-MM-DD&#x27;)<br>                &#125;<br>            &#125;,<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">直接实战</font></p>
<p><a href="./项目/项目工程.html" target="_blank">演示效果</a></p>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>Arch wsl的傻瓜式安装 (有手就行)</title>
    <url>/Arch-Wsl-install.html</url>
    <content><![CDATA[<p><strong>本人是Arch教徒过来传一下教</strong> </p>
<img src="/images/wsl傻瓜式安装/Arch教徒.jpg" style="width: 200px; height: 200px;">
<a id="more"></a>

<h1 id="第一步-程序与功能中打开-或者-以管理员身份打开-PowerShell-终端-输入命令如下"><a href="#第一步-程序与功能中打开-或者-以管理员身份打开-PowerShell-终端-输入命令如下" class="headerlink" title="第一步 程序与功能中打开 或者 以管理员身份打开 PowerShell 终端 输入命令如下"></a>第一步 程序与功能中打开 或者 以管理员身份打开 PowerShell 终端 输入命令如下</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-variable">$</span> <span class="hljs-built_in">Enable-WindowsOptionalFeature</span> <span class="hljs-literal">-Online</span> <span class="hljs-literal">-FeatureName</span> Microsoft<span class="hljs-literal">-Windows-Subsystem-Linux</span><br></code></pre></td></tr></table></figure>
<img src="/images/wsl傻瓜式安装/按照提示重启电脑.jpg" style="width: 300px; height: 300px;">

<p><strong>按照提示重启电脑</strong></p>
<h1 id="第二步-下载文件"><a href="#第二步-下载文件" class="headerlink" title="第二步 下载文件"></a>第二步 下载文件</h1><p><strong>然后下载<a href="https://github.com/yuk7/ArchWSL">Arch WSL</a></strong></p>
<img src="/images/wsl傻瓜式安装/Arch wsl下载.jpg">
<br>
<img src="/images/wsl傻瓜式安装/Arch wsl下载版本.jpg">

<p><strong>那个安装证书是给appx版的arch wsl用的</strong></p>
<p><strong>你已经安装zip版的</strong></p>
<p><strong>没有必要安两次</strong></p>
<p><strong>只用需要用到zip</strong></p>
<h1 id="第三步-配置Arch-Wsl"><a href="#第三步-配置Arch-Wsl" class="headerlink" title="第三步 配置Arch Wsl"></a>第三步 配置Arch Wsl</h1><img src="/images/wsl傻瓜式安装/Arch wsl配置.jpg" style="width: 800px; height: 500px;">

<p><strong>反正按照我这个改，保存是ctrl + x 回车</strong></p>
<h1 id="第四步-配置相关参数"><a href="#第四步-配置相关参数" class="headerlink" title="第四步 配置相关参数"></a>第四步 配置相关参数</h1><p><strong>这里会提示配置  按照我的方法配置</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-variable">$</span> Arch.exe//这个是启动后的显示<br>[<span class="hljs-type">root</span>@<span class="hljs-type">PC</span>-<span class="hljs-type">NAME</span> <span class="hljs-type">user</span>]<span class="hljs-comment"># passwd       //这个是用户名输完名字输密码</span><br></code></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-variable">$</span> Arch.exe<br>[<span class="hljs-type">root</span>@<span class="hljs-type">PC</span>-<span class="hljs-type">NAME</span>]<span class="hljs-comment"># EDITOR=nano visudo</span><br>    %wheel      ALL=(ALL) ALL<br>    (setup sudoers file.)<br></code></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-variable">$</span> [<span class="hljs-type">root</span>@<span class="hljs-type">PC</span>-<span class="hljs-type">NAME</span>]<span class="hljs-comment"># useradd -m -G wheel -s /bin/bash &#123;username&#125;</span><br>(add user)<br></code></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-variable">$</span> [<span class="hljs-type">root</span>@<span class="hljs-type">PC</span>-<span class="hljs-type">NAME</span> <span class="hljs-type">user</span>]<span class="hljs-comment"># passwd &#123;username&#125;      //&#123;&#125;换成你的用户名,记住不需要打&#123;&#125;</span><br>(<span class="hljs-built_in">set</span> default user password)<br></code></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-variable">$</span> [<span class="hljs-type">root</span>@<span class="hljs-type">PC</span>-<span class="hljs-type">NAME</span> <span class="hljs-type">user</span>]<span class="hljs-comment"># exit  //退出</span><br></code></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-variable">$</span> Arch.exe config <span class="hljs-literal">--default-user</span> &#123;username&#125;<br>    (setting to default user)     //现在是root用户,不用加sudo<br></code></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-variable">$</span> sudo pacman<span class="hljs-literal">-key</span> <span class="hljs-literal">--init</span><br></code></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-variable">$</span> [<span class="hljs-type">user</span>@<span class="hljs-type">PC</span>-<span class="hljs-type">NAME</span>]<span class="hljs-variable">$</span> sudo pacman<span class="hljs-literal">-key</span> <span class="hljs-literal">--init</span><br></code></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-variable">$</span> [<span class="hljs-type">root</span>@<span class="hljs-type">PC</span>-<span class="hljs-type">NAME</span>]<span class="hljs-variable">$</span> sudo pacman<span class="hljs-literal">-key</span> <span class="hljs-literal">--populate</span><br></code></pre></td></tr></table></figure>
<h1 id="第五步-安装完后操作"><a href="#第五步-安装完后操作" class="headerlink" title="第五步 安装完后操作"></a>第五步 安装完后操作</h1><p><strong>下面是<a href="https://mirrors.tuna.tsinghua.edu.cn/help/archlinux/">换源</a></strong></p>
<p><strong>打开nano /etc/pacman.d/mirrorlist 然后再最顶端添加 切记去##</strong></p>
<img src="/images/wsl傻瓜式安装/Arch wsl配置文件.jpg" style="width: 800px; height: 500px;">
<br>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-variable">$</span> Server = https:mirrors.tuna.tsinghua.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br></code></pre></td></tr></table></figure>
**然后就可以 更新软件包缓存**

<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-variable">$</span> sudo pacman <span class="hljs-literal">-Syy</span><br></code></pre></td></tr></table></figure>
<h1 id="neofetch查看系统"><a href="#neofetch查看系统" class="headerlink" title="neofetch查看系统"></a>neofetch查看系统</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-variable">$</span> pacman <span class="hljs-literal">-S</span> neofetch<br></code></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs PowerShell"><span class="hljs-variable">$</span> neofetch<br></code></pre></td></tr></table></figure>
<img src="/images/wsl傻瓜式安装/Arch wsl.jpg" style="width: 800px; height: 500px;">

<h1 id="这个教程百分比可以看懂-如果你看不懂那只能说明你没认真去看"><a href="#这个教程百分比可以看懂-如果你看不懂那只能说明你没认真去看" class="headerlink" title="这个教程百分比可以看懂,如果你看不懂那只能说明你没认真去看"></a>这个教程百分比可以看懂,如果你看不懂那只能说明你没认真去看</h1><h1 id="认认真真的反复去看你真的可以看懂的"><a href="#认认真真的反复去看你真的可以看懂的" class="headerlink" title="认认真真的反复去看你真的可以看懂的"></a>认认真真的反复去看你真的可以看懂的</h1><h1 id="然后发现并不难"><a href="#然后发现并不难" class="headerlink" title="然后发现并不难"></a>然后发现并不难</h1>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>下次一定</title>
    <url>/xcyd.html</url>
    <content><![CDATA[<p><strong>本人制作简单的一款软件</strong></p>
<a id="more"></a>

<h1 id="软件截图"><a href="#软件截图" class="headerlink" title="软件截图"></a><a href="https://sdq3.gitee.io/images/lower-second-one-set/xcydjt.jpg">软件截图</a></h1><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a><a href="https://sdq3.gitee.io/images/lower-second-one-set/xcyd.jpg">下载</a></h1><h1 id="声明一下电话救援和电量救援并不是卡-而是给你时间去打开微信-QQ等等软件-然后时间一到就弹出界面-并不是卡"><a href="#声明一下电话救援和电量救援并不是卡-而是给你时间去打开微信-QQ等等软件-然后时间一到就弹出界面-并不是卡" class="headerlink" title="声明一下电话救援和电量救援并不是卡, 而是给你时间去打开微信,QQ等等软件, 然后时间一到就弹出界面, 并不是卡"></a>声明一下电话救援和电量救援并不是卡, 而是给你时间去打开微信,QQ等等软件, 然后时间一到就弹出界面, 并不是卡</h1><h1 id="真无电买用法是死循环然后发热耗电-把电耗完了就不用买账了-蹭饭利器"><a href="#真无电买用法是死循环然后发热耗电-把电耗完了就不用买账了-蹭饭利器" class="headerlink" title="真无电买用法是死循环然后发热耗电, 把电耗完了就不用买账了, 蹭饭利器"></a>真无电买用法是死循环然后发热耗电, 把电耗完了就不用买账了, 蹭饭利器</h1><h1 id="除非然后不行就电话救援-设定好吃东西的时间-然后来个电话-然后去接一下电话-趁机开溜-然后微信发消息给同学-谎称家里有事先走了"><a href="#除非然后不行就电话救援-设定好吃东西的时间-然后来个电话-然后去接一下电话-趁机开溜-然后微信发消息给同学-谎称家里有事先走了" class="headerlink" title="除非然后不行就电话救援, 设定好吃东西的时间, 然后来个电话, 然后去接一下电话, 趁机开溜, 然后微信发消息给同学, 谎称家里有事先走了"></a>除非然后不行就电话救援, 设定好吃东西的时间, 然后来个电话, 然后去接一下电话, 趁机开溜, 然后微信发消息给同学, 谎称家里有事先走了</h1>]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>轻松理解json与python关系</title>
    <url>/json-python.html</url>
    <content><![CDATA[<p><strong>json笔记</strong></p>
<a id="more"></a>


<p><strong>导入json模块</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import json<br></code></pre></td></tr></table></figure>

<h1 id="对应关系"><a href="#对应关系" class="headerlink" title="对应关系"></a>对应关系</h1><table>
<thead>
<tr>
<th align="center">JSON</th>
<th align="center">Python</th>
</tr>
</thead>
<tbody><tr>
<td align="center">object</td>
<td align="center">dict</td>
</tr>
<tr>
<td align="center">array</td>
<td align="center">list</td>
</tr>
<tr>
<td align="center">string</td>
<td align="center">str</td>
</tr>
<tr>
<td align="center">number(int)</td>
<td align="center">int,long</td>
</tr>
<tr>
<td align="center">number(real)</td>
<td align="center">float</td>
</tr>
<tr>
<td align="center">true</td>
<td align="center">True</td>
</tr>
<tr>
<td align="center">false</td>
<td align="center">False</td>
</tr>
<tr>
<td align="center">null</td>
<td align="center">None</td>
</tr>
</tbody></table>
<p><strong>案例</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span>   <br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;史迪奇&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;未知&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">626</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">解释</th>
<th align="center">JSON</th>
<th align="center">Python</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[]中括号起来的</td>
<td align="center">数组</td>
<td align="center">列表</td>
</tr>
<tr>
<td align="center">{}花括号起来的</td>
<td align="center">对象</td>
<td align="center">字典</td>
</tr>
<tr>
<td align="center">“name”</td>
<td align="center">属性的名</td>
<td align="center">字典的键</td>
</tr>
<tr>
<td align="center">“史迪奇”</td>
<td align="center">属性的值</td>
<td align="center">字典的值</td>
</tr>
<tr>
<td align="center">“未知”</td>
<td align="center">字符串</td>
<td align="center">字符串</td>
</tr>
<tr>
<td align="center">626</td>
<td align="center">整数</td>
<td align="center">int</td>
</tr>
</tbody></table>
<h1 id="json转python"><a href="#json转python" class="headerlink" title="json转python"></a>json转python</h1><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">json_str=&#x27;&#x27;&#x27;<span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;史迪奇&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;未知&quot;</span><span class="hljs-punctuation">,</span><br>&quot;id&quot;:626,&#125;]&#x27;&#x27;&#x27;<br><br># 把json格式文件, 转换成python数据<br>rs = json.loads(json_str)<br>#查看类型<br>print(type(rs)) #列表<br>print(type(rs[0])) #字典<br><br># 把json格式文件, 转换成python类型的数据<br>with open(&#x27;data/sdq.json&#x27;) as fp:<br>    # 加载该文件对象, 转换为python类型的数据<br>    python_list = json.load(fp)<br>    print(type(python_list)) #列表<br>    print((type(python_list[0]))) #字典<br></code></pre></td></tr></table></figure>
<p><strong>举例图</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mermaid"><br>graph LR<br><br> <br>  A[&quot;json字符串&quot;]---B[&quot;json.loads(s)&quot;]--&gt;C[&quot;python数据类型&quot;]<br>    D[&quot;json格式的文件对象&quot;]---F[&quot;json.load(fp)&quot;]--&gt;C[&quot;python数据类型&quot;]<br></code></pre></td></tr></table></figure>

<h1 id="python转json"><a href="#python转json" class="headerlink" title="python转json"></a>python转json</h1><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">json_str=&#x27;&#x27;&#x27;<span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;史迪奇&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;未知&quot;</span><span class="hljs-punctuation">,</span><br>&quot;id&quot;:626,&#125;]&#x27;&#x27;&#x27;<br><br>rs = json.loads(json_str)<br># 把python转换json字符串<br>json_str = json.dump(rs)<br>print(json_str)<br><br># 把json格式文件, 转换成python类型的数据<br>with open(&#x27;data/sdz.json&#x27;,&#x27;w&#x27;) as fp:<br>    # 把python以json格式储存到文件中<br>    json.dump(re, fp,  ensure_ascii=False)<br></code></pre></td></tr></table></figure>




<pre><code>        /￣json.dupmps(obj)￣￣￣↘
       /                         json字符串
python数据类型 
       \                         json格式文件
        \__json.dupmps(obj,fp)__↗</code></pre>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python 字符串(我失忆了)</title>
    <url>/python-zfc.html</url>
    <content><![CDATA[<p><strong>我真的失忆了</strong></p>
<a id="more"></a>

<h1 id="以下全是字符串"><a href="#以下全是字符串" class="headerlink" title="以下全是字符串"></a>以下全是字符串</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">s &#x3D; &#39;s&#39;<br>d &#x3D; &quot;d&quot;<br>q &#x3D; &#39;&#39;&#39;q&#39;&#39;&#39;<br>sdq &#x3D; &quot;d &#39;s&#39; &quot;<br>sdz &#x3D; &#39;&#39;&#39; &quot;s&#39;d&#39;&quot; q&#39;&#39;&#39;<br>print(s, d, sdq, q, sdz, sep&#x3D;&#39;\n&#39;)<br></code></pre></td></tr></table></figure>
<h1 id="字符串拼接操作"><a href="#字符串拼接操作" class="headerlink" title="字符串拼接操作"></a>字符串拼接操作</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 字符串拼接<br># print(&#39;s&#39; + &#39;d&#39; + &#39;q&#39;)<br># 字符串和数字是不能拼接的<br># print(&#39;sdq&#39; + 3)<br># 连续打印5次史迪奇<br># print(5 * &#39;sdq&#39;)<br></code></pre></td></tr></table></figure>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 索引 变量名[] 表索引 编程语言都是从0开始计数的<br>sdq&#x3D; &#39;我叫史迪奇&#39;<br>print(str1[0], str1[3], str1[-1])<br>print(str1[10])  #超出会报错<br></code></pre></td></tr></table></figure>
<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 切片 变量名[a:b] 同数学区间的[a,b)<br>sdq &#x3D; &#39;0123456789&#39;<br>print(&#39;sdq[0:3]&#39;, sdq[0:3])         #012<br>print(&#39;sdq[1:]&#39;, sdq[1:])           #123456789<br>print(&#39;sdq[:2]&#39;, sdq[:2])           #01<br>print(&#39;sdq[:]&#39;, sdq[:])             #返回全部<br>print(&#39;sdq[-4:-1]&#39;, sdq[-4:-1])     #678<br>print(sdq[1:100])                   # 切片超出范围是不会报错的会返回全部<br></code></pre></td></tr></table></figure>
<h1 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># name &#x3D; &#39;史迪奇&#39;<br># number &#x3D; 626<br># print(name+&#39;是个&#39;+str(number)+&#39;号实验品&#39;)<br># print(&#39;&#123;&#125;是个&#123;&#125;号实验品&#39;.format(name, number))<br># print(&#39;&#123;name&#125;是个&#123;number&#125;号实验品&#39;.format(name&#x3D;&#39;史迪奇&#39;, number&#x3D;626))<br># print(f&#39;&#123;name&#125;是个&#123;number&#125;号实验品&#39;)<br># 在一些老的教程里会用%的形式格式化代码，在Python3里就不建议使用了<br></code></pre></td></tr></table></figure>
<h1 id="字符串的一些使用方法"><a href="#字符串的一些使用方法" class="headerlink" title="字符串的一些使用方法"></a>字符串的一些使用方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">sdq &#x3D; &#39;Stitch&#39;<br>print(&#39;find第一次出现b的索引&#39;, sdq.find(&#39;h&#39;))  #看h的下标<br>print(&#39;replace&#39;, sdq.replace(&#39;i&#39;, &#39;I&#39;))  #拿I替换i<br>print(&#39;upper&#39;, sdq.upper()) #全大写<br>print(&#39;lower&#39;, sdq.lower()) #全小写<br>print(&#39;swapcase 对换&#39;, &#39;sdq&#39;.swapcase())  #反转字母大小写<br>print(&#39;去前后空格&#39;, &#39; sdq &#39;.strip(), sep&#x3D;&#39;&#39;)  <br>print(&#39;S t i t c h &#39;.replace(&#39; &#39;, &#39;&#39;))   #空格替换空字符串<br><br>print(len(&#39;S t i t c h&#39;)) # 获取字符串长度 里面的空格也是计算长度的<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Android同步源码和编译ROM傻瓜式 (有手就行)</title>
    <url>/Android-compile.html</url>
    <content><![CDATA[<p><strong>本人是用Arch，顺便来传一下教</strong><br><img src="/images/编译Android/Arch教徒.jpg" style="width: 200px; height: 200px;"></p>
<a id="more"></a>

<h1 id="第一是-安装Linux-我以Ubuntu和deepin为例子，建议新手用deepin"><a href="#第一是-安装Linux-我以Ubuntu和deepin为例子，建议新手用deepin" class="headerlink" title="第一是 安装Linux 我以Ubuntu和deepin为例子，建议新手用deepin"></a>第一是 安装Linux 我以Ubuntu和deepin为例子，建议新手用deepin</h1><p><a href="https://www.bilibili.com/video/BV1aW411C7NR">Ubantu的安装视频</a><br><a href="https://www.bilibili.com/video/BV1HW411Y73e">Deepin的安装视频</a></p>
<h1 id="第二是-环境搭载"><a href="#第二是-环境搭载" class="headerlink" title="第二是 环境搭载"></a>第二是 环境搭载</h1><p><strong>1.明确自己要开发的android版本 参考 lineageos官方的wiki: <a href="https://wiki.lineageos.org/">https://wiki.lineageos.org</a> 选择合适的linux发行版(推荐ubuntu 16)推荐而已，你可以是别的Linux,都没问题</strong></p>
<p><strong>2.更新自身ubuntu的软件源  替换到etc/apt/sources.list替换完毕后执行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ sudo apt-get update //如果自身网速不好建议换国内源(清华 中科大 阿里)<br></code></pre></td></tr></table></figure>
<p><strong><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">个人建议清华</a></strong><br><strong>deepin就更简单，直接设置里面换</strong></p>
<p><strong>3.安装jdk，需要根据开发的android版本选择</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ sudo apt-get update<br></code></pre></td></tr></table></figure>

<p><strong>4.安装 软件依赖</strong></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ sudo apt-get install bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev<br></code></pre></td></tr></table></figure>
<p><strong>4.安装jdk，需要根据开发的android版本选择</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ sudo apt-get install openjdk-x-jdk    //x 为jdk版本数字<br></code></pre></td></tr></table></figure>
<p><strong>LineageOS 14.1-15.1: OpenJDK 1.8</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ install openjdk-8-jdk<br></code></pre></td></tr></table></figure>
<p><strong>LineageOS 11.0-13.0: OpenJDK 1.7</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ install openjdk-7-jdk<br></code></pre></td></tr></table></figure>
<h1 id="第三是-安装repo"><a href="#第三是-安装repo" class="headerlink" title="第三是 安装repo"></a>第三是 安装repo</h1><p><strong>(1) 推荐使用mokee开源的 <a href="https://bbs.mokeedev.com/t/topic/21">mokee repo1</a> 或者 <a href="https://tacke.wodemo.com/entry/466371">mokee repo2</a></strong></p>
<p><strong>(2)在终端中输入以下内容，新建bin文件夹</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ mkdir ~/bin<br></code></pre></td></tr></table></figure>
<p><strong>(3)输入以下内容，将bin文件夹添加到环境变量中</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ PATH=~/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure>
<p><strong>(4)接着输入以下内容，下载repo文件到bin文件夹 输入这个请省略下面那一步</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/bin/repo<br></code></pre></td></tr></table></figure>

<p><strong>如果你是欧洲人，有钱买梯子 就省略上步直接输入以下命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ curl http://commondatastorage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo<br></code></pre></td></tr></table></figure>
<p><strong>(5)最后输入以下内容，为repo文件添加运行权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">$ chmod a+x ~&#x2F;bin&#x2F;repo<br></code></pre></td></tr></table></figure>
<h1 id="第四是-同步源码"><a href="#第四是-同步源码" class="headerlink" title="第四是 同步源码"></a>第四是 同步源码</h1><p><strong>(1) win+alt+t打开终端，输入如下，创建一个文件夹</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ mkdir ~/los      //例如: los  名字你可以顺便起<br></code></pre></td></tr></table></figure>
<p><strong>(2) 进入(自己起好名字的文件夹)的文件夹，输入如下</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ~/los         //例如: los 你随便起名字的文件夹<br></code></pre></td></tr></table></figure>
<p><strong>(3) 由于使用repo拉取源码时，会尝试访问官方的git源更新自己，但由于是谷歌，就无法正常访问，所以在正式拉取前，我们需要先做点修改打开主目录，按组合键ctrl+H，在显示的隐藏文件中，打开.bashrc文件，将如下内容复制到你的~/.bashrc最后一行，保存退出</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">export</span> REPO_URL=<span class="hljs-string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo&#x27;</span><br></code></pre></td></tr></table></figure>
<p><strong>(4) 获取源码拉取地址</strong><br>访问<a href="https://github.com/LineageOS">lineage的开源地址库</a>点击android，进入如下界面，这里就看到了拉取lineage-x.x的命令</p>
<p><strong>(5) 获取源码default</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ repo init -u git://github.com/los/android.git -b lineage-x.x       //例如: los 你随便起名字的文件夹和lineage版本<br></code></pre></td></tr></table></figure>
<p><strong>(6) 输入邮箱和昵称</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git config --global user.email xxxxxx@xxxx   //你的邮箱<br>$ git config --global user.name xxxxxxxxx     //随便起一个英文昵称<br></code></pre></td></tr></table></figure>
<p><strong>打开lineageOS文件夹 (如果是空的按组合键ctrl+H，显示隐藏内容)**</strong></p>
<p><img src="/images/%E7%BC%96%E8%AF%91Android/%E5%90%8C%E6%AD%A5%E6%BA%90%E7%A0%81.png"></p>
<p>然后更改<a href="https://mirrors.tuna.tsinghua.edu.cn/help/lineageOS/">链接</a></p>
<h1 id="第五是-拉取源码"><a href="#第五是-拉取源码" class="headerlink" title="第五是 拉取源码"></a>第五是 拉取源码</h1><p><strong>输入</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ repo sync<br></code></pre></td></tr></table></figure>
<p><strong>或者</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ repo sync -c -f -j8 --force-sync --no-clone-bundle<br></code></pre></td></tr></table></figure>
<h1 id="第六是-获取机型device"><a href="#第六是-获取机型device" class="headerlink" title="第六是 获取机型device"></a>第六是 获取机型device</h1><p><strong>(1) 我们进入<a href="https://github.com/LineageOS">lineage的开源项目网站</a></strong></p>
<p><strong>(2) 在搜索框中输入(设备代号)，会看到android_device_(品牌)_(设备代号)这一项</strong></p>
<p><strong>(3) 点击android_device_(品牌)_(设备代号)，就可以看到device的所有内容</strong></p>
<p><strong>(4) 点击右边的Clone or download，然后复制如图中的蓝色内容，这就是此device的下载地址</strong></p>
<p><strong>(5) 组合键ctrl+alt+t，打开终端</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ~/los             //例如: los  你随便起名字的文件夹<br></code></pre></td></tr></table></figure>
<p><strong>(6) 输入如下命令，回车开始同步</strong></p>
<p>解释一下:git clone就是拷贝到本地的命令，那段网址就是我们上面复制的地址，-b后面的lineage-x.x,表示lineage-x.x的分支；device/(品牌)/(设备代号)就是要下载到地方的路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/LineageOS/android_device_(品牌)_(设备代号).git -b lineage-x.x device/(品牌)/(设备代号) depth=1(可加可不加，加入同步源码会小点)<br></code></pre></td></tr></table></figure>
<p><strong>(7) 我们需要拉取的项目如下</strong></p>
<img src="/images/编译Android/找机型.jpg">

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ android_device_(品牌)_(设备代号)<br><br>$ android_device_(品牌)_(处理器代号)-common<br><br>$ android_device_(品牌)_(厂家)_common<br><br>$ android_kernel_(品牌)_(处理器代号)<br><br>$ proprietary_vendor_(品牌) <br></code></pre></td></tr></table></figure>
<p><strong>(8) <a href="https://github.com/TheMuppets">vendor需要访问地址</a>然后搜索(你的品牌)就可以找到</strong></p>
<p><strong>(9) 同样和同步其他项目一样</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/TheMuppets/proprietary_vendor_(品牌).git -b lineage-x.x vendor/(品牌)<br></code></pre></td></tr></table></figure>
<h1 id="第七是-执行编译"><a href="#第七是-执行编译" class="headerlink" title="第七是 执行编译"></a>第七是 执行编译</h1><p><strong>(1)如果你退出了，你就按组合键ctrl+alt+t，打开终端，输入以下命令，回车，进入los             //你随便起名字的文件夹，没有的话跳过这个环节</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ~/los    //例如: los 你随便起名字的文件夹<br></code></pre></td></tr></table></figure>
<p><strong>(2) 初始化</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ . build/envsetup.sh<br></code></pre></td></tr></table></figure>
<p><strong>(3) 输入如下命令，回车</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ breakfast xxx  //自己的机型<br></code></pre></td></tr></table></figure>
<p>如果有错误，就根据错误提示到lineageOS目录检查device, kernel和vendor等是否正确</p>
<p><strong>(4) 输入，回车，进行编译</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ brunch xxx    //自己的机型<br></code></pre></td></tr></table></figure>
<p>编译耗费的时间取决于你的电脑配置情况，所以我不建议用虚拟机，如果你电脑配置相当牛逼，当我没说</p>
<p><strong>(5)在我编译时出现了 fatal error: openssl/opensslv.h: No such file or directory 原因是libssl-dev没有安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ sudo apt-get install libssl-dev<br></code></pre></td></tr></table></figure>
<p><strong>(6) 回到正在编译的终端中，重新输入如下命令，等待编译的完成</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ brunch //自己的机型<br></code></pre></td></tr></table></figure>
<p><strong>(7) 编译完成后</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ 进入主目录\(你随便起名字的文件夹)\out\target\product\(设备代号)中就可以看到我们编译好的ROM了，可以复制到手机刷入了<br></code></pre></td></tr></table></figure>
<h1 id="另外设置ccache提高编译速度"><a href="#另外设置ccache提高编译速度" class="headerlink" title="另外设置ccache提高编译速度"></a>另外设置ccache提高编译速度</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">export</span> USE_CCACHE=1 <br>$ <span class="hljs-built_in">export</span> CCACHE_COMPRESS=1<br>$ ccache -M 50G 或者100G<br></code></pre></td></tr></table></figure>
<p><strong>防止低内存编译出错 设置大小为</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">export</span> ANDROID_JACK_VM_ARGS=<span class="hljs-string">&quot;-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G&quot;</span><br></code></pre></td></tr></table></figure>
<h1 id="祝福大家能自己动手做出属于自己的ROM"><a href="#祝福大家能自己动手做出属于自己的ROM" class="headerlink" title="祝福大家能自己动手做出属于自己的ROM"></a>祝福大家能自己动手做出属于自己的ROM</h1>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Python 字符串(我失忆了)</title>
    <url>/python-zfc.html</url>
    <content><![CDATA[<p><strong>我真的失忆了</strong></p>
<a id="more"></a>

<h1 id="以下全是字符串"><a href="#以下全是字符串" class="headerlink" title="以下全是字符串"></a>以下全是字符串</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">s &#x3D; &#39;s&#39;<br>d &#x3D; &quot;d&quot;<br>q &#x3D; &#39;&#39;&#39;q&#39;&#39;&#39;<br>sdq &#x3D; &quot;d &#39;s&#39; &quot;<br>sdz &#x3D; &#39;&#39;&#39; &quot;s&#39;d&#39;&quot; q&#39;&#39;&#39;<br>print(s, d, sdq, q, sdz, sep&#x3D;&#39;\n&#39;)<br></code></pre></td></tr></table></figure>
<h1 id="字符串拼接操作"><a href="#字符串拼接操作" class="headerlink" title="字符串拼接操作"></a>字符串拼接操作</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 字符串拼接<br># print(&#39;s&#39; + &#39;d&#39; + &#39;q&#39;)<br># 字符串和数字是不能拼接的<br># print(&#39;sdq&#39; + 3)<br># 连续打印5次史迪奇<br># print(5 * &#39;sdq&#39;)<br></code></pre></td></tr></table></figure>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 索引 变量名[] 表索引 编程语言都是从0开始计数的<br>sdq&#x3D; &#39;我叫史迪奇&#39;<br>print(str1[0], str1[3], str1[-1])<br>print(str1[10])  #超出会报错<br></code></pre></td></tr></table></figure>
<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 切片 变量名[a:b] 同数学区间的[a,b)<br>sdq &#x3D; &#39;0123456789&#39;<br>print(&#39;sdq[0:3]&#39;, sdq[0:3])         #012<br>print(&#39;sdq[1:]&#39;, sdq[1:])           #123456789<br>print(&#39;sdq[:2]&#39;, sdq[:2])           #01<br>print(&#39;sdq[:]&#39;, sdq[:])             #返回全部<br>print(&#39;sdq[-4:-1]&#39;, sdq[-4:-1])     #678<br>print(sdq[1:100])                   # 切片超出范围是不会报错的会返回全部<br></code></pre></td></tr></table></figure>
<h1 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># name &#x3D; &#39;史迪奇&#39;<br># number &#x3D; 626<br># print(name+&#39;是个&#39;+str(number)+&#39;号实验品&#39;)<br># print(&#39;&#123;&#125;是个&#123;&#125;号实验品&#39;.format(name, number))<br># print(&#39;&#123;name&#125;是个&#123;number&#125;号实验品&#39;.format(name&#x3D;&#39;史迪奇&#39;, number&#x3D;626))<br># print(f&#39;&#123;name&#125;是个&#123;number&#125;号实验品&#39;)<br># 在一些老的教程里会用%的形式格式化代码，在Python3里就不建议使用了<br></code></pre></td></tr></table></figure>
<h1 id="字符串的一些使用方法"><a href="#字符串的一些使用方法" class="headerlink" title="字符串的一些使用方法"></a>字符串的一些使用方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">sdq &#x3D; &#39;Stitch&#39;<br>print(&#39;find第一次出现b的索引&#39;, sdq.find(&#39;h&#39;))  #看h的下标<br>print(&#39;replace&#39;, sdq.replace(&#39;i&#39;, &#39;I&#39;))  #拿I替换i<br>print(&#39;upper&#39;, sdq.upper()) #全大写<br>print(&#39;lower&#39;, sdq.lower()) #全小写<br>print(&#39;swapcase 对换&#39;, &#39;sdq&#39;.swapcase())  #反转字母大小写<br>print(&#39;去前后空格&#39;, &#39; sdq &#39;.strip(), sep&#x3D;&#39;&#39;)  <br>print(&#39;S t i t c h &#39;.replace(&#39; &#39;, &#39;&#39;))   #空格替换空字符串<br><br>print(len(&#39;S t i t c h&#39;)) # 获取字符串长度 里面的空格也是计算长度的<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Vue.js 表单输入绑定的基础用法</title>
    <url>/Vue-usage.html</url>
    <content><![CDATA[<p><strong>Vue.js个人整理</strong></p>
<a id="more"></a>

<h1 id="输入文本"><a href="#输入文本" class="headerlink" title="输入文本"></a>输入文本</h1><!--more-->
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">   &lt;div id = <span class="hljs-string">&quot;app1&quot;</span>&gt;<br>       &lt;div&gt;<br>          请输入你喜欢的城市&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;cname&quot;</span>&gt;<br>          &lt;p&gt;<br>              你选择的城市:&#123;&#123;cname&#125;&#125;<br>          &lt;/p&gt;<br>      &lt;/div&gt;<br>      &lt;div&gt;<br>          回复评论: &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;huifu&quot;</span>&gt;<br>          &lt;p&gt;<br>              你选回复是:&#123;&#123;huifu&#125;&#125;<br>          &lt;/p&gt;<br>      &lt;/div&gt;<br>$<br>  &lt;/div&gt;<br>      &lt;script&gt;<br>          var app = new Vue(&#123;<br>          el:<span class="hljs-string">&#x27;#app1&#x27;</span>,<br>          data : &#123;<br>              cname : <span class="hljs-string">&quot;哈哈哈尔滨市&quot;</span>,<br>              huifu : <span class="hljs-string">&quot;我叫史迪奇&quot;</span>,<br>          &#125;<br>      &#125;);<br>      &lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">直接实战</font></p>
<iframe id="iframe" src="./html/文本.html"></iframe>

<hr>
<h1 id="输入多行文本"><a href="#输入多行文本" class="headerlink" title="输入多行文本"></a>输入多行文本</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">  &lt;div id = <span class="hljs-string">&quot;app2&quot;</span>&gt;<br>       &lt;div&gt;<br>          &lt;span&gt;你的名字: &lt;/span&gt;<br>          &lt;p style=<span class="hljs-string">&quot;white-space: pre-line;&quot;</span>&gt;&#123;&#123; name &#125;&#125;&lt;/p&gt;<br>          &lt;br&gt;<br>          &lt;textarea v-model=<span class="hljs-string">&quot;name &quot;</span> placeholder=<span class="hljs-string">&quot;请输入你的名字&quot;</span>&gt;&lt;/textarea&gt;<br>$<br>          &lt;p&gt;<br>              你的名字:&#123;&#123;name&#125;&#125;<br>          &lt;/p&gt;<br>      &lt;/div&gt;<br>$<br>  &lt;/div&gt;<br>      &lt;script&gt;<br>          var app = new Vue(&#123;<br>          el:<span class="hljs-string">&#x27;#app2&#x27;</span>,<br>          data : &#123;<br>              name : <span class="hljs-string">&quot;史迪奇&quot;</span>,<br>          &#125;<br>      &#125;);<br>      &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">直接实战</font></p>
<iframe id="iframe" src="./html/多行文本.html"></iframe>

<hr>
<h1 id="输入单个复选框"><a href="#输入单个复选框" class="headerlink" title="输入单个复选框"></a>输入单个复选框</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;div id = <span class="hljs-string">&quot;app3&quot;</span>&gt;<br>    &lt;div&gt;<br>        &lt;p&gt;<br>            你的选择是: &#123;&#123;checked &#125;&#125;<br>        &lt;/p&gt;<br>        &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;checkbox&quot;</span> v-model=<span class="hljs-string">&quot;checked&quot;</span>&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;&#123;&#123; checked &#125;&#125;&lt;/label&gt;        <br>    &lt;/div&gt;<br>&lt;/div&gt;<br>    &lt;script&gt;<br>        var app = new Vue(&#123;<br>        el:<span class="hljs-string">&#x27;#app3&#x27;</span>,<br>        data : &#123;<br>            checked : <span class="hljs-literal">false</span>,<br>        &#125;<br>    &#125;);<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">直接实战</font></p>
<iframe id="iframe" src="/html/单个复选框.html"></iframe>

<hr>
<h1 id="输入多个复选框"><a href="#输入多个复选框" class="headerlink" title="输入多个复选框"></a>输入多个复选框</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;div id = <span class="hljs-string">&quot;app4&quot;</span>&gt;<br>    &lt;div&gt;<br>        &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;blue&quot;</span> value=<span class="hljs-string">&quot;蓝色&quot;</span> v-model=<span class="hljs-string">&quot;color&quot;</span>&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;blue&quot;</span>&gt;蓝色&lt;/label&gt;<br>        &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;red&quot;</span> value=<span class="hljs-string">&quot;红色&quot;</span> v-model=<span class="hljs-string">&quot;color&quot;</span>&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;红色&lt;/label&gt;<br>        &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;yellow&quot;</span> value=<span class="hljs-string">&quot;黄色&quot;</span> v-model=<span class="hljs-string">&quot;color&quot;</span>&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;yellow&quot;</span>&gt;黄色&lt;/label&gt;<br>        &lt;p&gt;<br>            你选择的颜色是: &#123;&#123;color&#125;&#125;<br>        &lt;/p&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br>    &lt;script&gt;<br>        var app = new Vue(&#123;<br>        el:<span class="hljs-string">&#x27;#app4&#x27;</span>,<br>        data : &#123;<br>            color : [],<br>        &#125;<br>    &#125;);<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p><font color="#DC143C">直接实战</font></p>
<iframe id="iframe" src="./html/多个复选框.html"></iframe>

<hr>
<h1 id="输入单选按钮"><a href="#输入单选按钮" class="headerlink" title="输入单选按钮"></a>输入单选按钮</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;div id = <span class="hljs-string">&quot;app5&quot;</span>&gt;<br>        &lt;div&gt;<br>            &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;radio&quot;</span> id=<span class="hljs-string">&quot;男&quot;</span> value=<span class="hljs-string">&quot;男&quot;</span> v-model=<span class="hljs-string">&quot;sex&quot;</span>&gt;<br>            &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;男&lt;/label&gt;<br>            &lt;br&gt;<br>            &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;radio&quot;</span> id=<span class="hljs-string">&quot;女&quot;</span> value=<span class="hljs-string">&quot;女&quot;</span> v-model=<span class="hljs-string">&quot;sex&quot;</span>&gt;<br>            &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;女&lt;/label&gt;<br>            &lt;p&gt;<br>                你选择的性别是: &#123;&#123;sex&#125;&#125;<br>            &lt;/p&gt;<br>        &lt;/div&gt;<br>&lt;/div&gt;<br>    &lt;script&gt;<br>        var app = new Vue(&#123;<br>        el:<span class="hljs-string">&#x27;#app5&#x27;</span>,<br>        data : &#123;<br>            sex :[]<br>        &#125;<br>    &#125;);<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">直接实战</font></p>
<iframe id="iframe" src="./html/单选按钮.html"></iframe>

<hr>
<h1 id="输入选择框单选时"><a href="#输入选择框单选时" class="headerlink" title="输入选择框单选时"></a>输入选择框单选时</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;div id = <span class="hljs-string">&quot;app6&quot;</span>&gt;<br>        &lt;div&gt;<br>            请你选择你喜欢的季节:&lt;select v-model=<span class="hljs-string">&quot;season&quot;</span> style=<span class="hljs-string">&quot;width: 50px;&quot;</span>&gt;<br>                &lt;option&gt;春天&lt;/option&gt;<br>                &lt;option&gt;夏天&lt;/option&gt;<br>                &lt;option&gt;秋天&lt;/option&gt;<br>                &lt;option&gt;冬天&lt;/option&gt;<br>            &lt;/select&gt;<br>        <br>        &lt;p&gt;<br>            你喜欢的季节是: &#123;&#123;season&#125;&#125;<br>        &lt;/p&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;script&gt;<br>        var app = new Vue(&#123;<br>        el:<span class="hljs-string">&#x27;#app6&#x27;</span>,<br>        data : &#123;<br>            season: <span class="hljs-string">&quot;夏天&quot;</span>,<br>        &#125;<br>    &#125;);<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">直接实战</font></p>
<iframe id="iframe" src="./html/选择框单选时.html"></iframe>

<hr>
<h1 id="输入选择框多选时"><a href="#输入选择框多选时" class="headerlink" title="输入选择框多选时"></a>输入选择框多选时</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;div id = <span class="hljs-string">&quot;app7&quot;</span>&gt;<br>        &lt;div&gt;请你选择你喜欢的季节:<br>        &lt;select v-model=<span class="hljs-string">&quot;selected&quot;</span>  multiple style=<span class="hljs-string">&quot;width: 50px;&quot;</span>&gt;<br>            &lt;option&gt;春天&lt;/option&gt;<br>            &lt;option&gt;夏天&lt;/option&gt;<br>            &lt;option&gt;秋天&lt;/option&gt;<br>            &lt;option&gt;冬天&lt;/option&gt;<br>          &lt;/select&gt;<br>          &lt;p&gt;<br>            你喜欢的季节是:&#123;&#123;selected&#125;&#125;<br>            &lt;br&gt;<br>            多选时按住, 往下拖<br>          &lt;/p&gt;<br>        &lt;/div&gt;<br>&lt;/div&gt;<br>    &lt;script&gt;<br>        var app = new Vue(&#123;<br>        el:<span class="hljs-string">&#x27;#app7&#x27;</span>,<br>        data : &#123;<br>            selected:[<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;冬天&quot;</span>]<br>        &#125;<br>    &#125;);<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p><font color="#DC143C">直接实战</font></p>
<iframe id="iframe" src="./html/选择框多选时.html"></iframe>

<hr>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>Python 基本运算符(我失忆了)</title>
    <url>/python-jjcc.html</url>
    <content><![CDATA[<p><strong>我真的失忆了</strong></p>
<a id="more"></a>

<h1 id="pdtho基本运算符"><a href="#pdtho基本运算符" class="headerlink" title="pdtho基本运算符"></a>pdtho基本运算符</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">print(&#39;加&#39;, 2 + 3)<br>print(&#39;减&#39;, 1 - 3)<br>print(&#39;两个减号&#39;, 1 - -2)<br>print(&#39;乘&#39;, 2 * 4)<br>print(&#39;除&#39;, 9 &#x2F; 3)<br>print(&#39;取整&#39;, 10 3, 10 4)<br>print(&#39;取整1&#39;, 10 &#x2F; 3, 10 &#x2F; 4)<br>print(&#39;模运算，取余数&#39;, 10 % 3)  <br></code></pre></td></tr></table></figure>
<h1 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h1><p><strong>4舍6入5看齐,奇进偶不进,相比四舍五入更精确</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">print(round(1.2), round(1.5), round(2.5))<br></code></pre></td></tr></table></figure>
<h1 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">s, d, q, z &#x3D; 1, 2, 3, 1<br><br>print(&#39;s &#x3D;&#x3D; d&#39;, s &#x3D;&#x3D; d)<br>print(&#39;s !&#x3D; d&#39;, s !&#x3D; d)<br>print(&#39;s &gt; d&#39;, s &gt; d)<br>print(&#39;d &lt; z&#39;, d &lt; z)<br><br>print(&#39;s &#x3D;&#x3D; z&#39;, s &#x3D;&#x3D; z)   #比较值<br>print(&#39;s is z&#39;, s is z)   #比较地址<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 Beautiful Soup(牢饭吃到饱)</title>
    <url>/reptile-bs4-lxml.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1>Beautiful Soup4<h1>

<h1 id="安装bs4"><a href="#安装bs4" class="headerlink" title="安装bs4"></a>安装bs4</h1><p><strong>打开cmd 输入以下内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">pip install lxml<br></code></pre></td></tr></table></figure>
<h1 id="find用法"><a href="#find用法" class="headerlink" title="find用法"></a>find用法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">find(&quot;标签&quot;, 属性:id class) <br>find(&quot;p&quot;, id&#x3D;&quot;sdq&quot;)<br></code></pre></td></tr></table></figure>
<h1 id="find-all用法"><a href="#find-all用法" class="headerlink" title="find_all用法"></a>find_all用法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">find(&quot;标签&quot;, 属性:id class).find_all(&quot;标签&quot;)<br>find(&quot;p&quot;, id&#x3D;&quot;sdq&quot;).find_all(&quot;a&quot;)<br></code></pre></td></tr></table></figure>
<h1 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h1><p><strong>打开这个<a href="https://www.umei.cc/bizhitupian/weimeibizhi/">网址</a></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 导入requests和bs4库<br>import requests<br>from bs4 import BeautifulSoup<br>import time<br><br>url &#x3D; &quot;https:&#x2F;&#x2F;www.umei.cc&#x2F;bizhitupian&#x2F;weimeibizhi&#x2F;&quot;<br>resp &#x3D; requests.get(url)<br>resp.encoding &#x3D; &#39;utf-8&#39;  # 处理乱码<br><br># print(resp.text)<br># 把源代码交给bs<br>main_page &#x3D; BeautifulSoup(resp.text, &quot;html.parser&quot;)<br>alist &#x3D; main_page.find(&quot;div&quot;, class_&#x3D;&quot;TypeList&quot;).find_all(&quot;a&quot;)<br># print(alist)<br>for a in alist:<br>    href &#x3D; a.get(&#39;href&#39;)  # 直接通过get就可以拿到属性的值<br>    # 子页面的源代码<br>    child_resp &#x3D; requests.get(href)<br>    child_resp.encoding &#x3D; &#39;utf-8&#39;<br>    child_text &#x3D; child_resp.text<br>    # 从子页面中拿到图片的下载路径<br>    child &#x3D; BeautifulSoup(child_text, &quot;html.parser&quot;)<br>    p &#x3D; child.find(&quot;p&quot;, align&#x3D;&quot;center&quot;)<br>    img &#x3D; p.find(&quot;img&quot;)<br>    src &#x3D; img.get(&quot;src&quot;)<br>    # 下载图片<br>    img_resp &#x3D; requests.get(src)<br>    # img_resp.content  # 这里拿到的是字节<br>    img_name &#x3D; src.split(&quot;&#x2F;&quot;)[-1]  # 拿到url中的最后一个 &#x2F; 以后的内容-1代表最后一个<br>    with open(&quot;img&#x2F;&quot;+img_name, mode&#x3D;&quot;wb&quot;) as f:<br>        f.write(img_resp.content)  # 图片内容写入文件<br><br>    print(&quot;正在下载&quot;, img_name)<br>    time.sleep(1) #停1秒<br><br><br>print(&quot;下载完了&quot;)<br></code></pre></td></tr></table></figure>
<h1 id="lxml模块的使用"><a href="#lxml模块的使用" class="headerlink" title="lxml模块的使用"></a>lxml模块的使用</h1><h3 id="导入lxml的etree库"><a href="#导入lxml的etree库" class="headerlink" title="导入lxml的etree库"></a>导入lxml的etree库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">from lxml import etree<br></code></pre></td></tr></table></figure>
<p>利用etree.HTML 将HTML字符串(bytes类型活str类型) 转化为Element对象 Element对象具有xpath的方法 返回结果列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">html &#x3D; etree.HTML(text)     # text为文本内容<br>ret_list &#x3D; html.xpath(&quot;xpath语法规则字符串&quot;)     # 用xpath来解析<br></code></pre></td></tr></table></figure>
<h3 id="导入lxml的etree-tostring函数的使用"><a href="#导入lxml的etree-tostring函数的使用" class="headerlink" title="导入lxml的etree.tostring函数的使用"></a>导入lxml的etree.tostring函数的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">from lxml import etree<br><br>html_str &#x3D; &#39;&#39;&#39; &lt;div&gt;&lt;ul&gt;<br>                &lt;li class&#x3D;&quot;itrm-1&quot;&gt;&lt;a href&#x3D;&quot;;link1.html&quot;&gt;first item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>                &lt;li class&#x3D;&quot;itrm-1&quot;&gt;&lt;a href&#x3D;&quot;;link2.html&quot;&gt;second item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>                &lt;li class&#x3D;&quot;itrm-inactive&quot;&gt;&lt;a href&#x3D;&quot;;link3.html&quot;&gt;third item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>                &lt;li class&#x3D;&quot;itrm-1&quot;&gt;&lt;a href&#x3D;&quot;;link1.html&quot;&gt;fourth item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>                &lt;li class&#x3D;&quot;itrm-0&quot;&gt;&lt;a href&#x3D;&quot;;link5.html&quot;&gt;fifth item&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>                &lt;ul&gt;&lt;div&gt; &#39;&#39;&#39;         <br># 将html源码转换成element对象   etree.HTML()能够自动补全html缺失的标签<br>html &#x3D; etree.HTML(html_str)<br># 转换成String类型的数据        <br>handeled_html_str &#x3D; etree.toString(html).decode()<br>print(handeled_html_str)<br></code></pre></td></tr></table></figure>


</h1></h1>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>职教星2.8.2(搬运软件)</title>
    <url>/zjx2.8.1.html</url>
    <content><![CDATA[<p><strong>职教星2.8.2</strong></p>
<a id="more"></a>

<p><strong>本人找了3天, 相当不容易</strong></p>
<p><strong>有的人甚至拿别人的软件来卖钱, 拿着别人的劳动成果来赚钱, 实在容忍不了越想越气</strong></p>
<h1 id="在我这里拿走职教星2-8-2有两点要求"><a href="#在我这里拿走职教星2-8-2有两点要求" class="headerlink" title="在我这里拿走职教星2.8.2有两点要求"></a>在我这里拿走职教星2.8.2有两点要求</h1><p><strong>1. 不能大势宣传 因为怕职教云知道就会做出应对措施</strong></p>
<p><strong>2. 帮助别人别谈钱, 帮助别人, 别人会看在心里, 然后别人会以你为榜样的去帮助那些需要帮助的人</strong></p>
<h1>拿走的请在下面评论区留言: "我遵守承诺"</h1>

<h1 id="记住千万别成为那些盗取别人劳动成果来赚钱的人渣"><a href="#记住千万别成为那些盗取别人劳动成果来赚钱的人渣" class="headerlink" title="记住千万别成为那些盗取别人劳动成果来赚钱的人渣"></a>记住千万别成为那些盗取别人劳动成果来赚钱的人渣</h1><h1 style="color:red;font-size:50px">这个是承诺的格式, 这是承诺请, 认真对待</h1>

<p><img src="/images/%E8%81%8C%E6%95%99%E6%98%9F/%E6%89%BF%E8%AF%BA.jpg"></p>
<h1 style="color:red;font-size:50px">截图一定要让我看见QQ头像, 记住使用之前把所有安全软件都关了, 自带的也要</h1>

<p><img src="/images/%E8%81%8C%E6%95%99%E6%98%9F/%E6%88%AA%E5%9B%BE%E6%A0%BC%E5%BC%8F.jpg"></p>
<h1 id="本放链接-想要的话-自己带着承诺完的截图来找我-我给你密码"><a href="#本放链接-想要的话-自己带着承诺完的截图来找我-我给你密码" class="headerlink" title="本放链接!!! 想要的话, 自己带着承诺完的截图来找我, 我给你密码"></a>本放<a href="https://wwr.lanzoui.com/iRu7Bqsx7od">链接</a>!!! 想要的话, 自己带着承诺完的截图来找<a href="https://wpa.qq.com/msgrd?v=3&uin=3083329400&site=qq&menu=yes">我</a>, 我给你密码</h1>]]></content>
  </entry>
  <entry>
    <title>爬虫 http和https(吃牢饭集合)</title>
    <url>/reptile-http-https.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p><strong>HTTP: 超文本传输协议, 默认端口号是80</strong></p>
<ul>
<li>超文本: 是指超过文本, 不仅限于文本; 还包含图片, 音频等文件</li>
<li>传输协议: 是指使用共用约定的固定格式来传递转换成字符串的超文本内容</li>
</ul>

<p><strong>HTTPS: HTTP + SSL(安全套接字层), 即带有安全套接字层的超文本传输协议, 默认端口号: 443</strong></p>
<ul>
<li>SSL对传输的内容(超文本, 也就是请求体或响应体)进行加密</li>
</ul>

<p><strong>可以打开浏览器访问一个url, 右键检查, 点击network, 点选一个url, 查看http协议的形式</strong></p>
<h1 id="HTTPS因为要加密缘故相比HTTP较慢一些-性能低一些-但是比HTTP更安全"><a href="#HTTPS因为要加密缘故相比HTTP较慢一些-性能低一些-但是比HTTP更安全" class="headerlink" title="HTTPS因为要加密缘故相比HTTP较慢一些,性能低一些, 但是比HTTP更安全"></a>HTTPS因为要加密缘故相比HTTP较慢一些,性能低一些, 但是比HTTP更安全</h1>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 jsonpath模块(吃牢饭集合)</title>
    <url>/reptile-jsonpath.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="jsonpath模块"><a href="#jsonpath模块" class="headerlink" title="jsonpath模块"></a>jsonpath模块</h1><p><strong>使用场景: 例如多层嵌套的复杂字典, 要根据key和下标来批量提取value就可以用到jsonpath模块</strong></p>
<h3 id="jsonpath模块的安装"><a href="#jsonpath模块的安装" class="headerlink" title="jsonpath模块的安装"></a>jsonpath模块的安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">pip install jsonpath<br></code></pre></td></tr></table></figure>
<h1 id="提取数据方法"><a href="#提取数据方法" class="headerlink" title="提取数据方法"></a>提取数据方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">from jsonpath import jsonpath<br>ret &#x3D; jsonpath(a,&#39;jsonpath语法规则字符串&#39;)<br></code></pre></td></tr></table></figure>
<h1 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h1><table>
<thead>
<tr>
<th align="center">jsonpath</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$</td>
<td align="center">根节点</td>
</tr>
<tr>
<td align="center">@</td>
<td align="center">现行节点</td>
</tr>
<tr>
<td align="center">. or []</td>
<td align="center">取子节点</td>
</tr>
<tr>
<td align="center">n/a</td>
<td align="center">取父节点, jsonpath未支持</td>
</tr>
<tr>
<td align="center">..</td>
<td align="center">就是不管位置, 选择所有符合条件的条件</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">匹配所有元素节点</td>
</tr>
<tr>
<td align="center">n/a</td>
<td align="center">根据属性访问, json不支持, 因为json是个Key-value递归结构, 不需要属性访问</td>
</tr>
<tr>
<td align="center">[]</td>
<td align="center">迭代器标准(可以在里边做简单的迭代操作, 如数组下标, 根据内容选值等)</td>
</tr>
<tr>
<td align="center">[,]</td>
<td align="center">支持迭代器中做多选</td>
</tr>
<tr>
<td align="center">?()</td>
<td align="center">支持过滤操作</td>
</tr>
<tr>
<td align="center">()</td>
<td align="center">支持过表达式计算</td>
</tr>
<tr>
<td align="center">n/a</td>
<td align="center">分组, jsonpath不支持</td>
</tr>
</tbody></table>
<p><strong>常用的</strong></p>
<table>
<thead>
<tr>
<th align="center">常用jsonpath</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$</td>
<td align="center">根节点(最外层大括号)</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">子节点</td>
</tr>
<tr>
<td align="center">..</td>
<td align="center">子孙节点(内部任意位置, 选择所有符合条件的条件)</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">匹配所有元素节点</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import requests<br>import jsonpath<br>import json<br><br>headers &#x3D; &#123;<br>    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.72 Safari&#x2F;537.36&quot;<br>&#125;<br>response &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.lagou.com&#x2F;lbs&#x2F;getAllCitySearchLabels.json&#39;,headers&#x3D;headers)<br><br>dict_data &#x3D; json.loads(response.content)<br><br>print(jsonpath.jsonpath(dict_data,&#39;$..name&#39;))<br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>Python 数据类型(我失忆了)</title>
    <url>/python-type.html</url>
    <content><![CDATA[<p><strong>我真的失忆了</strong></p>
<a id="more"></a>

<h1 id="python基本数据类型"><a href="#python基本数据类型" class="headerlink" title="python基本数据类型"></a>python基本数据类型</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">print(&#39;整数&#39;, 1)                          <br>print(&#39;浮点数&#39;, 0.1)             <br>print(&#39;布尔值&#39;, True) <br>print(&#39;空&#39;, None)<br>print(&#39;元组&#39;, (1, 2, 3)) #可以存放不同类型<br>print(&#39;列表&#39;, [1, 2, 3])<br>print(&#39;字典&#39;, &#123;&#39;a&#39;:&#39;d&#39;&#125;)   <br></code></pre></td></tr></table></figure>
<h1 id="查询类型"><a href="#查询类型" class="headerlink" title="查询类型"></a>查询类型</h1><p><strong>例子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">print(type(int))<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 network(牢饭吃到饱)</title>
    <url>/reptile-network.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="network抓包"><a href="#network抓包" class="headerlink" title="network抓包"></a>network抓包</h1><ul>
<li>名称: Preserver log <ul>
<li>功能:保存抓包的历史记录</li>
</ul>
</li>
</ul>
<ul>
<li>名称: Filter <ul>
<li>功能: 过滤清空</li>
</ul>
</li>
</ul>
<ul>
<li>名称: XHR<ul>
<li>功能: 大部分情况的ajax请求</li>
</ul>
</li>
</ul>
<ul>
<li>名称: js<ul>
<li>功能:js请求</li>
</ul>
</li>
</ul>
<ul>
<li>名称: css<ul>
<li>功能: css请求</li>
</ul>
</li>
</ul>
<ul>
<li>名称: Ever Listeners<ul>
<li>功能: 事件的监听<ul>
<li>名称: click</li>
<li>功能: 加密</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="js解析"><a href="#js解析" class="headerlink" title="js解析"></a>js解析</h1><ul>
<li>定位js文件<ul>
<li>通过initiator定位到js文件</li>
<li>通过seach搜索关键字定位的js文件</li>
<li>通过元素绑定的事件监听函数找到js文件</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 re模块的使用(牢饭吃到饱)</title>
    <url>/reptile-re.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>


<h1 id="学习re模块先学正则表达式"><a href="#学习re模块先学正则表达式" class="headerlink" title="学习re模块先学正则表达式"></a>学习re模块先学正则表达式</h1><h1 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h1><p><strong>匹配字符串中所有的符号正则的内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import re <br><br>sdq &#x3D; re.findall(r&quot;\d+&quot;,613号实验品 亚亚,617号实验品 团团,618号实验品 红绿灯,619号实验品 火焰球,624号实验品 安琪,<br>625号实验品 鲁本,626号实验品 史迪仔)<br>print(sdq)<br></code></pre></td></tr></table></figure>
<h1 id="finditer"><a href="#finditer" class="headerlink" title="finditer"></a>finditer</h1><p><strong>匹配字符串中所有的内容 [返回的是迭代器] 从迭代器中拿到内容需要.group</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import re <br><br>sdq &#x3D; re.findall(r&quot;\d+&quot;,613号实验品 亚亚,617号实验品 团团,618号实验品 红绿灯,619号实验品 火焰球,624号实验品 安琪,<br>625号实验品 鲁本,626号实验品 史迪仔)<br>for i sdq:<br>    print(sdq.group())<br></code></pre></td></tr></table></figure>
<h1 id="search"><a href="#search" class="headerlink" title="search"></a>search</h1><p><strong>返回第一个拿到的结果, 返回的结果是match对象, .group()是拿数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import re <br><br>sdq &#x3D; re.search(r&quot;\d+&quot;,613号实验品 亚亚,617号实验品 团团,618号实验品 红绿灯,619号实验品 火焰球,624号实验品 安琪,<br>625号实验品 鲁本,626号实验品 史迪仔)<br>print(sdq.group())<br></code></pre></td></tr></table></figure>
<h1 id="match"><a href="#match" class="headerlink" title="match"></a>match</h1><p><strong>从头开始匹配, 前面没有就停止</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import re <br><br>sdq &#x3D; re.search(r&quot;\d+&quot;,613号实验品 亚亚,617号实验品 团团,618号实验品 红绿灯,619号实验品 火焰球,624号实验品 安琪,<br>625号实验品 鲁本,626号实验品 史迪仔)<br>print(sdq.group())<br></code></pre></td></tr></table></figure>
<h1 id="预加载正则表达式"><a href="#预加载正则表达式" class="headerlink" title="预加载正则表达式"></a>预加载正则表达式</h1><p><strong>从头开始匹配, 前面没有就停止</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import re <br><br>sdq &#x3D; re.compile(r&quot;\d+&quot;)<br><br>zdz &#x3D; sdq.finditer(&quot;613号实验品 亚亚,617号实验品 团团,618号实验品 红绿灯,619号实验品 火焰球,624号实验品 安琪,<br>625号实验品 鲁本,626号实验品 史迪仔&quot;)<br><br>for it in sdz<br>    print(it.group())<br></code></pre></td></tr></table></figure>
<h1 id="预加载正则表达式-1"><a href="#预加载正则表达式-1" class="headerlink" title="预加载正则表达式"></a>预加载正则表达式</h1><p><strong>从头开始匹配, 前面没有就停止</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import re <br><br>&lt;div class&#x3D;&#39;yy&#39;&gt;&lt;span id&#x3D;&quot;613&quot;&gt;亚亚&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;<br><br>&lt;div class&#x3D;&#39;tt&#39;&gt;&lt;span id&#x3D;&quot;617&quot;&gt;团团&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;<br><br>&lt;div class&#x3D;&#39;hld&#39;&gt;&lt;span id&#x3D;&quot;618&quot;&gt;红绿灯&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;<br><br>&lt;div class&#x3D;&#39;tt&#39;&gt;&lt;span id&#x3D;&quot;619&quot;&gt;团团&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;<br><br>&lt;div class&#x3D;&#39;lb&#39;&gt;&lt;span id&#x3D;&quot;625&quot;&gt;鲁本&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;<br><br>&lt;div class&#x3D;&#39;sdq&#39;&gt;&lt;span id&#x3D;&quot;626&quot;&gt;史迪奇&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;<br># (?&lt;分组名字&gt;正则表达式)<br>obj &#x3D; re.compile(r&quot;&lt;div class&#x3D;&#39;.*?&#39;&gt;&lt;span id&#x3D;&quot;(?&lt;id&gt;\d+)&quot;&gt;(?P&lt;name&gt;.*?)&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;, re.S)  # re.S: 让.能匹配换行符<br><br>result &#x3D; obj.finditer(s)<br><br>for it in sdz<br>    print(it.group())<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 requests模块(吃牢饭集合)</title>
    <url>/reptile-header.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>
<h1 id="response-text和response-content的区别"><a href="#response-text和response-content的区别" class="headerlink" title="response.text和response.content的区别"></a>response.text和response.content的区别</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 导入requests库<br>import requests<br><br># 目标url<br>url &#x3D; &quot;https:www.baidu.com&quot;<br><br># 向目标url发送get请求<br>response &#x3D; requetst.get(url)<br><br># 手动设定编码格式<br>response.encoding &#x3D; &#39;utf8&#39;  #等于response.content.decode()<br><br># 打印响应内容<br>print(response.text)  #等于response.content.decode(&quot;推测出的编码字符集&quot;)<br></code></pre></td></tr></table></figure>
<p><strong>response.text</strong></p>
<ul>
<li>类型: str</li>
<li>解码类型: requests模块自动根据HTTP 头部对响应的编码作出有根据的推测, 推测的文本编码</li>
</ul>

<p><strong>response.content</strong></p>
<ul>
<li>类型: bytes</li>
<li>解码类型: 没有指定</li>
</ul>

<p><strong>response.content进行decode解决中文乱码</strong></p>
<ul>
<li>response.content.decode() 默认utf-8</li>
<li>response.content.decode("GBK")</li>
<ul>
<li>utf-8</li>
<li>gbk</li>
<li>gb2312</li>
<li>ascli (阿斯克码)</li>
<li>iso-8859-1</li>
</ul>
</ul>

<h1 id="response响应对象的其它常用属性或方法"><a href="#response响应对象的其它常用属性或方法" class="headerlink" title="response响应对象的其它常用属性或方法"></a>response响应对象的其它常用属性或方法</h1><p><strong>response = requests.get(url) 中response是发送请求获取的响应对象; response响应对象中·除了text, cintent获取响应内容以外还有其它常用的属性或方法</strong></p>
<ul>
<li>response.url 响应的url; 有时候响应utl和请求utl并不一致</li>
<li>response.status_code 响应状态码</li>
<li>response.requests.headers 响应对应的请求头</li>
<li>response.headers 响应头</li>
<li>response.headers._cookies 响应对应请求的cookie; 返回cookieJar类型</li>
<li>response.cookies 响应的cookie (经过set-ccookie动作; 返回cookie类型)</li>
<li>response.json() 自动将json字符串类型的响应内容转换python对象 (dict or list)</li>
</ul>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 导入requests库<br>import requests<br><br># 目标url<br>url &#x3D; &quot;https:www.baidu.com&quot;<br><br># 向目标url发送get请求<br>response &#x3D; requetst.get(url)<br><br># 手动设定编码格式<br>response.encoding &#x3D; &#39;utf8&#39;  #等于response.content.decode()<br><br># 打印响应内容<br>print(response.url)  #打印响应的url<br>print(response.status_code)  #打印响应的状态码<br>print(response.request.headers)  #打印响应对象的请求头<br>print(response.headers)  #打印响应头<br>print(response.request._cookies)  #打印响应的url<br>print(response.cookies)  #打印响应中携带的cookies<br></code></pre></td></tr></table></figure>

<!-- 知识点
# 掌握headers参数的使用
# 掌握发送带参数的请求
# 掌握headers中携带cookie
# 掌握cookies参数的使用
# 掌握cookieJar的转换方法
# 掌握超时参数timeout的使用
# 掌握代理ip参数proxies的使用
# 掌握使用verify参数忽略CA证书
# 掌握requests模块发送post请求
# 掌握利用requests.sesion进行状态保持 -->

<h1 id="post方法"><a href="#post方法" class="headerlink" title="post方法"></a>post方法</h1><p><strong>实现方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># data通常是一个字典<br>requests.post(uel,data)<br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>post数据来源</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>固定值</td>
<td>抓包比较不变值</td>
<td></td>
<td></td>
</tr>
<tr>
<td>输入值</td>
<td>抓包比较根据自身变化值</td>
<td></td>
<td></td>
</tr>
<tr>
<td>预设值-静态文件</td>
<td>需要提前从惊天html中获取</td>
<td></td>
<td></td>
</tr>
<tr>
<td>预设值-发请求</td>
<td>需要对指定地址发送请求获取数据</td>
<td></td>
<td></td>
</tr>
<tr>
<td>在客户端生成的</td>
<td>发现js模拟生成数据</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="requests-session"><a href="#requests-session" class="headerlink" title="requests.session"></a>requests.session</h1><p><strong>requests.session的作用</strong></p>
<ul>
<li>自动保存或者处理cookie, 下一次请求会带上前一次的cookie</li>
</ul>
<p><strong>场景</strong></p>
<ul>
<li>连续的多次请求, 自动处理过程中产生的cookie</li>
</ul>
<p><strong>使用方法 注意: sesson对象发送get或post请求参数, 与reques模块发送请求的参数完全一致</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">session &#x3D; requests.session() #实例化session对象<br><br>response &#x3D; session.get(url, headers, ...)<br><br>response &#x3D; session.post(url, data, ...)<br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 图像识别引擎(牢饭吃到饱)</title>
    <url>/reptile-tesseract.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="安装tesseract"><a href="#安装tesseract" class="headerlink" title="安装tesseract"></a>安装tesseract</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">windows exe安装配环境变量<br><br>MacOS   brew install tesseract<br><br>Linux   sudo apt-get install tesserac-ocr<br></code></pre></td></tr></table></figure>
<p><strong>打开cmd 输入以下内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># PIL用于打开图片文件<br>pip install pillow<br><br># pytesseract模块用于从图片中解析数据<br>pip install pytesseract<br></code></pre></td></tr></table></figure>
<h1 id="图片识别引擎的使用"><a href="#图片识别引擎的使用" class="headerlink" title="图片识别引擎的使用"></a>图片识别引擎的使用</h1><p><strong>通过pytesseract模块的image_to_string方法就能将打开图片的文件中的数据提取成字符串数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">from PIL import Image<br>import pytesseract<br><br># 打开一个图片文件<br>im &#x3D; Image.open(&#39;起名可以是中文.jpg&#39;)    &#x2F;&#x2F;该图片的&quot;内容&quot;非中文, 中文不识别<br><br>result &#x3D; pytesseract.image_to_string(im)<br><br>print(result)<br></code></pre></td></tr></table></figure>
<h1 id="图片识别引擎的使用扩展"><a href="#图片识别引擎的使用扩展" class="headerlink" title="图片识别引擎的使用扩展"></a>图片识别引擎的使用扩展</h1><p><strong><a href="https://www.cnblogs.com/cnlian/p/5765871.html">训练平台</a></strong></p>
<ul>
<li>其他OCR平台<ul>
<li><a href="https://azure.microsoft.com/zh-cn/services/cognitive-services/computer-vision">微软Azure图像识别</a></li>
<li><a href="http://aidemo.youdao.com/ocrdemo">有道智能文字识别</a></li>
<li><a href="https://www.aliyun.com/product/cdi">阿里云图文识别</a></li>
<li><a href="https://cloud.tencent.com/product/ocr">腾讯OCR文字识别</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 cookie(吃牢饭集合)</title>
    <url>/reptile-cookie.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="headers中携带cookie"><a href="#headers中携带cookie" class="headerlink" title="headers中携带cookie"></a>headers中携带cookie</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import requests<br><br>url &#x3D; &#39;https:&#x2F;&#x2F;github.com&#x2F;sdqOS&#39;<br><br>headers &#x3D; &#123;<br>    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.72 Safari&#x2F;537.36&quot;,<br>    &quot;Cookie&quot;: &quot;_octo&#x3D;GH1.1.1829904439.1611247247; _device_id&#x3D;326c46400086ed13ec278dc836662948; _locale&#x3D;ko; _locale_experiment&#x3D;ko; tz&#x3D;Asia%2FShanghai; has_recent_activity&#x3D;1; user_session&#x3D;zW4-2Xj6Rnda4YLHfsc5pFcRYfJB60BCft6Iwqh31V1lM6eU; __Host-user_session_same_site&#x3D;zW4-2Xj6Rnda4YLHfsc5pFcRYfJB60BCft6Iwqh31V1lM6eU; tz&#x3D;Asia%2FShanghai; color_mode&#x3D;%7B%22color_mode%22%3A%22auto%22%2C%22light_theme%22%3A%7B%22name%22%3A%22light%22%2C%22color_mode%22%3A%22light%22%7D%2C%22dark_theme%22%3A%7B%22name%22%3A%22dark%22%2C%22color_mode%22%3A%22dark%22%7D%7D; logged_in&#x3D;yes; dotcom_user&#x3D;sdqOS; _gh_sess&#x3D;l41S%2BZNr%2F%2Bmx5Y2taob81ssga5CdD5drTY7IWcDY5vIxraTrsep8btIIkpvggyDxCYtFq1Q5q6hzDGNpRs8nTJjCbZqYCGpOEUM4W20s1%2Bxo0d6WnhQZ5W8eO96d60q4p%2BF8eeSGxrdBQBL5zLIZ8uyAD%2BuRaUZL7ZoARDh7qYNssds5cOLTSlkzqJMoHUR2Yp2wy%2FNKMTEIs40hwMdjF2bbbTE4Cah3Srm29no9Lw3fvC7Z4uFLWQtzwMLwE7KEImrKAODH2dTZeYVyxBRfX5iyyA8qpO0wg%2FyAivegnpLQyQXZGQ3%2BTr4zNxEcy2Utqkhd%2FwdRQ%2Bk%2BGR2ibrXxoE3L28fyD0zqywpmxLbKmqWqkum%2B9BK99UHuFkdmUtOzdifjbYekleDfDETDUPAF3Ubvkc3pwvnlZZC66jZzX9mvbElHZlOpE8eLncyGc5jmTYBgVseIwxGs13ZkvEfZ76debhVyRHABDyfAgNsiZWHcz4I34WbPele1GjNF2qF4Fhn03cy%2FktvUW4F7pcXhx2ABKqcVNDqXtd%2BKWkdRDivx5fxtu8i1%2BE5FDuvSF%2FM8eUGjX%2FPs%2B%2BoiJ06SmbybI%2FMBoi6YLCwD4Z0iVrx1EENzH54Oknn3NTQoIHOpzgYFx4l6HzJbiTAIIZeApYhEwD82zuvditr5EaPUApQQuVdm6vXNyvFq%2B%2BLHglipgI6WXCwV1vp7GU%2FtZw6EsMX5RR2zdKnsQODuy92uTEMAnnS7ECkqUh0OUuiSNXsa6lWNqCiJId7MgEE4gkSTQawWO775i98vP2Rx6%2B%2BVkdQsYFOgYxiYZgbI%2BQCyak8YbIZXWbXtBziGYILPZM8zdm1vVJWXdgcBZfF90jZSGkr7EgNqVBQuVCHZNg9ZxmmRZ54J1K28e6r2UL7HLb5%2F3MycVrhQUelq8wPY--TcRWY%2B%2FTS0Zgmyhj--k8C1M7YSHlzTdGPKtUMwoQ%3D%3D&quot;<br>&#125;<br><br>respinse &#x3D; requests.get(url, headers&#x3D;headers,)<br><br># 看看是给谁发请求<br>print(respinse.url)<br><br>with open(&#39;github.html&#39;, &#39;wb&#39;)as f:<br>    f.write(respinse.content)<br></code></pre></td></tr></table></figure>
<p>#构建cookie字典</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import requests<br><br>url &#x3D; &#39;https:&#x2F;&#x2F;github.com&#x2F;sdqOS&#39;<br><br># 构造请求头字典<br>headers &#x3D; &#123;<br>    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.72 Safari&#x2F;537.36&quot;,<br>    &#125;<br><br>temp &#x3D; &quot;_octo&#x3D;GH1.1.1829904439.1611247247; _device_id&#x3D;326c46400086ed13ec278dc836662948; _locale&#x3D;ko; _locale_experiment&#x3D;ko; tz&#x3D;Asia%2FShanghai; has_recent_activity&#x3D;1; user_session&#x3D;zW4-2Xj6Rnda4YLHfsc5pFcRYfJB60BCft6Iwqh31V1lM6eU; __Host-user_session_same_site&#x3D;zW4-2Xj6Rnda4YLHfsc5pFcRYfJB60BCft6Iwqh31V1lM6eU; tz&#x3D;Asia%2FShanghai; color_mode&#x3D;%7B%22color_mode%22%3A%22auto%22%2C%22light_theme%22%3A%7B%22name%22%3A%22light%22%2C%22color_mode%22%3A%22light%22%7D%2C%22dark_theme%22%3A%7B%22name%22%3A%22dark%22%2C%22color_mode%22%3A%22dark%22%7D%7D; logged_in&#x3D;yes; dotcom_user&#x3D;sdqOS; _gh_sess&#x3D;l41S%2BZNr%2F%2Bmx5Y2taob81ssga5CdD5drTY7IWcDY5vIxraTrsep8btIIkpvggyDxCYtFq1Q5q6hzDGNpRs8nTJjCbZqYCGpOEUM4W20s1%2Bxo0d6WnhQZ5W8eO96d60q4p%2BF8eeSGxrdBQBL5zLIZ8uyAD%2BuRaUZL7ZoARDh7qYNssds5cOLTSlkzqJMoHUR2Yp2wy%2FNKMTEIs40hwMdjF2bbbTE4Cah3Srm29no9Lw3fvC7Z4uFLWQtzwMLwE7KEImrKAODH2dTZeYVyxBRfX5iyyA8qpO0wg%2FyAivegnpLQyQXZGQ3%2BTr4zNxEcy2Utqkhd%2FwdRQ%2Bk%2BGR2ibrXxoE3L28fyD0zqywpmxLbKmqWqkum%2B9BK99UHuFkdmUtOzdifjbYekleDfDETDUPAF3Ubvkc3pwvnlZZC66jZzX9mvbElHZlOpE8eLncyGc5jmTYBgVseIwxGs13ZkvEfZ76debhVyRHABDyfAgNsiZWHcz4I34WbPele1GjNF2qF4Fhn03cy%2FktvUW4F7pcXhx2ABKqcVNDqXtd%2BKWkdRDivx5fxtu8i1%2BE5FDuvSF%2FM8eUGjX%2FPs%2B%2BoiJ06SmbybI%2FMBoi6YLCwD4Z0iVrx1EENzH54Oknn3NTQoIHOpzgYFx4l6HzJbiTAIIZeApYhEwD82zuvditr5EaPUApQQuVdm6vXNyvFq%2B%2BLHglipgI6WXCwV1vp7GU%2FtZw6EsMX5RR2zdKnsQODuy92uTEMAnnS7ECkqUh0OUuiSNXsa6lWNqCiJId7MgEE4gkSTQawWO775i98vP2Rx6%2B%2BVkdQsYFOgYxiYZgbI%2BQCyak8YbIZXWbXtBziGYILPZM8zdm1vVJWXdgcBZfF90jZSGkr7EgNqVBQuVCHZNg9ZxmmRZ54J1K28e6r2UL7HLb5%2F3MycVrhQUelq8wPY--TcRWY%2B%2FTS0Zgmyhj--k8C1M7YSHlzTdGPKtUMwoQ%3D%3D&quot;<br><br><br>cookie_list &#x3D; temp.split(&#39;; &#39;)<br><br># 熟练方案<br>cookies &#x3D; &#123; cookie.split(&#39;&#x3D;&#39;)[0]:cookie.split(&#39;&#x3D;&#39;)[-1] for cookie in cookie_list&#125;<br><br># 稳妥方案<br># cookies &#x3D; &#123;&#125;<br><br># for cookie in cookie_list:<br>#     cookies[cookie.split(&#39;&#x3D;&#39;)[0]] &#x3D; cookie.split(&#39;&#x3D;&#39;)[-1]<br><br># print(cookies)<br><br># # 构造cookie字典<br><br>response &#x3D; requests.get(url, headers&#x3D;headers,cookies&#x3D;cookies)<br><br># 看看是给谁发请求<br>print(response.url)<br><br>with open(&#39;github3.html&#39;, &#39;wb&#39;)as f:<br>    f.write(response.content)<br></code></pre></td></tr></table></figure>
<h1 id="cookieJar对象转换成cookie字典方法"><a href="#cookieJar对象转换成cookie字典方法" class="headerlink" title="cookieJar对象转换成cookie字典方法"></a>cookieJar对象转换成cookie字典方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import requests<br><br>url &#x3D; &#39;https:&#x2F;&#x2F;www.baidu.com&#39;<br><br># 设置(timeout)访问时长为3秒, 然后就断开<br>response &#x3D; response.get(url, timeout&#x3D;3)<br><br>print(response.cookies)<br><br># 将对象转字典<br>dict_cookie &#x3D; requests.utils.dict_from_cookiejar(response.cookies)<br>print(dict_cookie)<br><br># 将字典转换为对象<br>jar_cookies &#x3D; requests.utils.cookiejar_from_dict(dict_cookies)<br>print(jar_cookies)<br></code></pre></td></tr></table></figure>
<!--副作用丢失域名 这个不要紧我们自己知道这个cookie对应哪个域名的-->
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 selenium自动化(牢饭吃到饱)</title>
    <url>/reptile-selenium.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><strong>打开cmd 输入以下内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">pip install selenium<br></code></pre></td></tr></table></figure>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li>代码调用webdriver操作浏览器</li>
<li>不同的浏览器使用各自不同的driver</li>
</ul>
<h2 id="根据实际环境选择浏览器-谷歌浏览器-火狐浏览器"><a href="#根据实际环境选择浏览器-谷歌浏览器-火狐浏览器" class="headerlink" title="根据实际环境选择浏览器 谷歌浏览器/火狐浏览器"></a>根据实际环境选择浏览器 谷歌浏览器/火狐浏览器</h2><ul>
<li>开发使用有头浏览器</li>
<li>部署使用无头浏览器</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">from selenium import webdriver<br>import time<br><br># 采用有头浏览器<br>browser &#x3D; webdriver.Chrome()<br><br># 要爬取的网页<br>browser.get(&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;)<br><br># 在百度中搜索史迪奇<br>browser.find_element_by_id(&#39;kw&#39;).send_keys(&#39;史迪奇&#39;)<br><br>#模拟点击<br>browser.find_element_by_id(&#39;su&#39;).click<br><br># 延时3秒<br>time.sleep(3)<br><br># 一定要退出<br>browser.quit()<br></code></pre></td></tr></table></figure>
<h1 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 当前标签页浏览器渲染之后的网页源代码<br>browser.page_source<br><br># 当前标签页的url<br>browser.current_url<br><br># 关闭当前标签页面, 如果只有一个标签页面则关闭整个浏览器<br>browser.close()<br><br># 关闭浏览器<br>browser.quit()<br><br># 页面前进<br>browser.forward()<br><br># 页面后退<br>browser.back()<br><br># 页面截图<br>browser.screen_shot(img_name)<br></code></pre></td></tr></table></figure>
<h1 id="driver对象定位标签元素获取标签对象方法"><a href="#driver对象定位标签元素获取标签对象方法" class="headerlink" title="driver对象定位标签元素获取标签对象方法"></a>driver对象定位标签元素获取标签对象方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 返回一个元素<br>find_element_by_id<br><br># 根据类名获取元素列表<br>find_element(s)_by_class_name<br><br># 根据标签的name属性值返回包括标签对象元素的列表<br>find_element(s)_by_name<br><br># 返回一个包含元素的列表<br>find_element(s)_by_xpath<br><br># 根据连接文本获取元素列表<br>find_element(s)_by_link_text<br><br># 根据标签名获取元素列表<br>find_element(s)_by_partial_link_text<br><br># 根据css选择器来获取元素列表<br>find_element(s)_by_css<br></code></pre></td></tr></table></figure>
<p><strong>特别注意:</strong></p>
<ul>
<li>find_element和find_elements的区别: <ul>
<li>多了给s就返回列表, 没有s就返回匹配到的第一个标签对象</li>
<li>find_element匹配不到就抛出异常, find_elements匹配不到就返回空列表</li>
</ul>
</li>
</ul>
<ul>
<li>by_link_text和by_partial_link_text的区别: <ul>
<li>全部文本和包含某个文本</li>
</ul>
</li>
</ul>
<ul>
<li>find_element_by_xxx<ul>
<li>定位到则是一个对象</li>
<li>定位不到则是报错</li>
</ul>
</li>
</ul>
<ul>
<li>find_elements_by_xxx<ul>
<li>定位到则是一个含有元素的列表</li>
<li>定位不到则是空列表</li>
</ul>
</li>
</ul>
<h1 id="标签对象提取文本内容和属性值"><a href="#标签对象提取文本内容和属性值" class="headerlink" title="标签对象提取文本内容和属性值"></a>标签对象提取文本内容和属性值</h1><ul>
<li>获取文本 element.text<ul>
<li>通过定位获取的标签对象的 text 属性, 获取文本内容</li>
</ul>
</li>
</ul>
<ul>
<li>获取属性值 element.get_attribute(“属性名”)<ul>
<li>通过定位获取的标签对get_attribute 函数, 传入属性名, 来获取获取属性的值</li>
</ul>
</li>
</ul>
<p><strong>例子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">from selenium import webdriver<br><br>url &#x3D; &quot;https:&#x2F;&#x2F;sz.58.com&#x2F;ershoufang&#x2F;?PGTID&#x3D;0d200001-0000-4f6f-f947-87e3a87719a1&amp;ClickID&#x3D;1&quot;<br><br>browser &#x3D; webdriver.Chrome()<br><br>browser.get(url)<br><br>el_list &#x3D; browser.find_elements_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;__layout&quot;]&#x2F;div&#x2F;section&#x2F;section[3]&#x2F;section[1]&#x2F;section[2]&#x2F;div&#x2F;a&#x2F;div[2]&#x2F;div[1]&#x2F;div[1]&#x2F;h3&#39;)<br><br>for el in el_list:<br>    print(el.text,el.get_attribute(&#39;href&#39;))<br></code></pre></td></tr></table></figure>
<h1 id="标签页的切换"><a href="#标签页的切换" class="headerlink" title="标签页的切换"></a>标签页的切换</h1><ul>
<li><p>获取所有标签页的窗口句柄</p>
</li>
<li><p>利用窗口句柄字切换句柄指向的标签页</p>
<ul>
<li>这里的窗口句柄是指:<ul>
<li>指向标签页对象的标识</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 获取当前所有的标签页的句柄构成的列表<br>current_windows &#x3D; browser.window_handles<br><br># 根据标签页句柄列表索引下标进行切换<br>browser.switch_to.window(current_windous[0])<br></code></pre></td></tr></table></figure>
<h1 id="窗口切换"><a href="#窗口切换" class="headerlink" title="窗口切换"></a>窗口切换</h1><p><strong>ifame是html中常用的一种技术, 即一个页面嵌套</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 操作frame外边的元素需要切换出去<br>Windows &#x3D; browser.window_handles<br>browser.switch_to.window(windows[0])<br>content &#x3D; browser.find_element_by_class_name().text<br>print(content)<br>browser.quit()<br></code></pre></td></tr></table></figure>
<h1 id="cookies操作"><a href="#cookies操作" class="headerlink" title="cookies操作"></a>cookies操作</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import time<br>from selenium import webdriver<br><br>url &#x3D; &quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;<br><br>browser &#x3D; webdriver.Chrome()<br>browser.get(url)<br><br># cookies &#x3D; &#123;&#125;<br># for data in browser.get_cookies():<br>#     cookies[data[&#39;name&#39;]] &#x3D; data[&#39;value&#39;]<br><br># 字典推导式<br>cookies  &#x3D; &#123;data[&#39;name&#39;] : data[&#39;value&#39;]for data in browser.get_cookies()&#125;<br><br>print(cookies)<br></code></pre></td></tr></table></figure>
<h1 id="关于js执行"><a href="#关于js执行" class="headerlink" title="关于js执行"></a>关于js执行</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import time<br>from selenium import webdriver<br><br>url &#x3D; &quot;http:&#x2F;&#x2F;jn.lianjia.com&#x2F;&quot;<br><br>browser &#x3D; webdriver.Chrome()<br><br>browser.get(url)<br><br># 滚动条拖动 x和y<br>js &#x3D; &#39;scrollTo(0,900)&#39;<br><br># 执行js<br>browser.execute_script(js)<br></code></pre></td></tr></table></figure>
<h1 id="无界面模式"><a href="#无界面模式" class="headerlink" title="无界面模式"></a>无界面模式</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 实例化配置对象<br>options &#x3D; webdriver.ChromeOptions()<br><br># 配置对象添加开启无界面模式的命令<br>options.add_argument(&quot;--headless&quot;)<br><br># 配置对象添加禁用gpu的命令<br>options.add_argument(&quot;--disable-gpu&quot;)<br><br># 实例化带有配置对象的browser对象<br>browser &#x3D; webdriver.Chrome(chrome_options&#x3D;options)<br></code></pre></td></tr></table></figure>
<h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 实例化配置对象<br>options &#x3D; webdriver.ChromeOptions()<br><br># 配置对象添加使用代理ip的命令<br>options.add_argument(&quot;--proxy-server&#x3D;http:&#x2F;&#x2F;202.20.16.82:9527&quot;)<br><br># 配置对象添加禁用gpu的命令<br>options.add_argument(&quot;--disable-gpu&quot;)<br><br># 实例化带有配置对象的browser对象<br>browser &#x3D; webdriver.Chrome(&#39;.&#x2F;chromedriver&#39;,chome_options&#x3D;options)<br></code></pre></td></tr></table></figure>
<h1 id="替换user-agent-上网设备"><a href="#替换user-agent-上网设备" class="headerlink" title="替换user-agent(上网设备)"></a>替换user-agent(上网设备)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 实例化配置对象<br>options &#x3D; webdriver.ChromeOptions()<br><br># 配置对象添加使用代理ip的命令<br>options.add_argument(&quot;--user-agent&#x3D;Mozilla&#x2F;5.0 HAHA&quot;)<br><br># 配置对象添加禁用gpu的命令<br>options.add_argument(&quot;--disable-gpu&quot;)<br><br># 实例化带有配置对象的browser对象<br>browser &#x3D; webdriver.Chrome(&#39;.&#x2F;chromedriver&#39;,chome_options&#x3D;options)<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 xpath(牢饭吃到饱)</title>
    <url>/reptile-xpath.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>


<h1 id="xpath-是在XML文档中搜索内容的一门语言-可以用绝对定位和相对定位"><a href="#xpath-是在XML文档中搜索内容的一门语言-可以用绝对定位和相对定位" class="headerlink" title="xpath 是在XML文档中搜索内容的一门语言 可以用绝对定位和相对定位"></a>xpath 是在XML文档中搜索内容的一门语言 可以用绝对定位和相对定位</h1><p><strong>html是xml的一个子集</strong></p>
<h1 id="安装xpath"><a href="#安装xpath" class="headerlink" title="安装xpath"></a>安装xpath</h1><p><strong>打开cmd 输入以下内容</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pip install xpath<br></code></pre></td></tr></table></figure>
<h1 id="xpath语法"><a href="#xpath语法" class="headerlink" title="xpath语法"></a>xpath语法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">主要分为3大类<br><br>层级:   &#x2F; 直接子集   跳级     斜杠隔开的是节点<br><br>属性:   @ 属性访问  如&#x2F;&#x2F;link&#x2F;@href 从选中的节点标签中获取指定的值<br><br>函数:   contains() 包含   text()文本 等...  如&#x2F;&#x2F;title&#x2F;text() 从开闭标签之间去文本内容<br></code></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">nodename</td>
<td align="center">选中该元素</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">从根节点选取或者是元素和元素间的过度</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">从匹配选择的当前节点选择文档的节点而不用考虑它们的位置</td>
</tr>
<tr>
<td align="center">@</td>
<td align="center">选取属性</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">选取当前节点</td>
</tr>
<tr>
<td align="center">..</td>
<td align="center">选取当前节点的父节点</td>
</tr>
<tr>
<td align="center">text()</td>
<td align="center">选取文本</td>
</tr>
</tbody></table>
<h1 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h1><p><strong>打开这个<a href="https://www.umei.cc/bizhitupian/weimeibizhi/">网址</a></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 导入xpath</span><br>from lxml import etree<br><br>xml = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br>&lt;book&gt;<br>    &lt;id&gt;???&lt;/id&gt;<br>    &lt;name&gt;星际宝贝&lt;/name&gt;<br>    &lt;price&gt;!!!&lt;/price&gt;<br>    &lt;nick&gt;实验品&lt;/nick&gt;<br>    &lt;author&gt;<br>        &lt;nick id=<span class="hljs-string">&quot;624&quot;</span>&gt;安琪&lt;/nick&gt;<br>        &lt;nick id=<span class="hljs-string">&quot;625&quot;</span>&gt;鲁本&lt;/nick&gt;<br>        &lt;nick id=<span class="hljs-string">&quot;626&quot;</span>&gt;史迪奇&lt;/nick&gt;<br>        &lt;nick class=<span class="hljs-string">&quot;221&quot;</span>&gt;小火花&lt;/nick&gt;<br>        &lt;div&gt;<br>            &lt;nick&gt;搞破坏&lt;/nick&gt;<br>        &lt;/div&gt;<br>        &lt;span&gt;<br>            &lt;nick&gt;吃饭&lt;/nick&gt;<br>        &lt;/span&gt;<br>    &lt;/author&gt;<br><br>    &lt;partner&gt;<br>        &lt;nick id=<span class="hljs-string">&quot;029&quot;</span>&gt;跳棋&lt;/nick&gt;<br>        &lt;nick id=<span class="hljs-string">&quot;001&quot;</span>&gt;史灵可&lt;/nick&gt;<br>    &lt;/partner&gt;<br>&lt;/book&gt;<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><br>tree = etree.HTML(html.text)   <span class="hljs-comment">#加载爬取下来的源码</span><br><span class="hljs-comment"># tree = etree.parse(paese)   #加载文件</span><br><span class="hljs-comment"># tree = etree.XML(xml)       #加载XML</span><br><br>result = tree.xpath(<span class="hljs-string">&quot;/book//nick/text().extract&quot;</span>) <span class="hljs-comment">#text()就是文字 .extract就是提取</span><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure>
<h1 id="HTML代码-保存sdq-html"><a href="#HTML代码-保存sdq-html" class="headerlink" title="HTML代码 保存sdq.html"></a>HTML代码 保存sdq.html</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html lang&#x3D;&quot;en&quot;&gt;<br>    &lt;head&gt;<br>        &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;<br>        &lt;title&gt;Title&lt;&#x2F;title&gt;<br>    &lt;&#x2F;head&gt;<br>    &lt;body&gt;<br>        &lt;ul&gt;<br>            &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>            &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.google.com&quot;&gt;谷歌&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>            &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.sogou.com&quot;&gt;搜狗&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>        &lt;&#x2F;ul&gt;<br>        &lt;ol&gt;<br>            &lt;li&gt;&lt;a href&#x3D;&quot;Stitch&quot;&gt;Stitch&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>            &lt;li&gt;&lt;a href&#x3D;&quot;sdq&quot;&gt;史迪奇&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>            &lt;li&gt;&lt;a href&#x3D;&quot;sdz&quot;&gt;史迪仔&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;<br>        &lt;&#x2F;ol&gt;<br>        &lt;div class&#x3D;&quot;Lilo&quot;&gt;莉萝&lt;&#x2F;div&gt;<br>        &lt;div class&#x3D;&quot;Nani&quot;&gt;兰莉&lt;&#x2F;div&gt;<br>    &lt;&#x2F;body&gt;<br>&lt;&#x2F;html&gt;<br></code></pre></td></tr></table></figure>
<h1 id="py代码"><a href="#py代码" class="headerlink" title="py代码"></a>py代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">from lxml import etree<br><br>tree &#x3D; etree.parse(&quot;sdq.html&quot;)<br># result &#x3D; tree.xpath(&#39;&#x2F;html&#39;)<br># result &#x3D; tree.xpath(&quot;&#x2F;html&#x2F;body&#x2F;ul&#x2F;li&#x2F;a&#x2F;text()&quot;)<br># result &#x3D; tree.xpath(&quot;&#x2F;html&#x2F;body&#x2F;ul&#x2F;li[1]&#x2F;a&#x2F;text()&quot;)  # xpath的顺序是从1开始数的, []表示索引<br># result &#x3D; tree.xpath(&quot;&#x2F;html&#x2F;body&#x2F;ol&#x2F;li&#x2F;a[@href&#x3D;&#39;dapao&#39;]&#x2F;text()&quot;)  # [@xxx&#x3D;xxx] 属性的筛选<br># print(result)<br><br># ol_li_list &#x3D; tree.xpath(&quot;&#x2F;html&#x2F;body&#x2F;ol&#x2F;li&quot;)<br><br># for li in ol_li_list:<br>#     # 从每一个li中提取到文字信息<br>#     result &#x3D; li.xpath(&quot;.&#x2F;a&#x2F;text()&quot;)  # 在li中继续去寻找 相对查找<br>#     print(result)<br>#     result2 &#x3D; li.xpath(&quot;.&#x2F;a&#x2F;@href&quot;)  # @属性意思是拿到属性值<br>#     print(result2)<br>#<br># print(tree.xpath(&quot;&#x2F;html&#x2F;body&#x2F;ul&#x2F;li&#x2F;a&#x2F;@href&quot;))<br>print(tree.xpath(&#39;&#x2F;html&#x2F;body&#x2F;div[1]&#x2F;text().extract&#39;))       #text()就是文字 .extract就是提取<br>print(tree.xpath(&#39;&#x2F;html&#x2F;body&#x2F;ol&#x2F;li&#x2F;a&#x2F;text().extract&#39;))      #text()就是文字 .extract就是提取<br></code></pre></td></tr></table></figure>

<h1 id="选取特定节点的语法"><a href="#选取特定节点的语法" class="headerlink" title="选取特定节点的语法"></a>选取特定节点的语法</h1><h3 id="通过索引修饰节点"><a href="#通过索引修饰节点" class="headerlink" title="通过索引修饰节点"></a>通过索引修饰节点</h3><table>
<thead>
<tr>
<th align="center">路径表达式</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">//title[@lang=”eng”]</td>
<td align="center">选择lang属性值为eng的所有title元素</td>
</tr>
<tr>
<td align="center">/bookstore/book[1]</td>
<td align="center">选择属于bookstore子元素的第一个book元素</td>
</tr>
<tr>
<td align="center">/bookstore/book[last()]</td>
<td align="center">选择属于bookstore子元素的最后一个book元素</td>
</tr>
<tr>
<td align="center">/bookstore/book[last()-1]</td>
<td align="center">选择属于bookstore子元素的倒数第二个book元素</td>
</tr>
<tr>
<td align="center">/bookstore/book[position()&gt;1]</td>
<td align="center">选择bookstore下面的book元素从第二个开始选择</td>
</tr>
<tr>
<td align="center">//book/title[text()=”sdq”]</td>
<td align="center">选择所有book下的title元素仅仅选择文本为sdq的title元素</td>
</tr>
<tr>
<td align="center">/bookstore/book[price&gt;33.33]</td>
<td align="center">选取bookstore元素中book元素的所有title元素且其中price元素的值必须大于33.33</td>
</tr>
</tbody></table>
<h3 id="通过属性值修饰节点"><a href="#通过属性值修饰节点" class="headerlink" title="通过属性值修饰节点"></a>通过属性值修饰节点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F;div[@id&#x3D;&quot;sdq&quot;]&#x2F;div&#x2F;@id     出现在[]中@是使用标签属性名和属性值修饰节点 出现在结尾的&#x2F;@是取属性值<br></code></pre></td></tr></table></figure>
<h3 id="通过子节点的值修饰节点"><a href="#通过子节点的值修饰节点" class="headerlink" title="通过子节点的值修饰节点"></a>通过子节点的值修饰节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">//span[i&gt;333]   i是标签<br>//div[span[2]&gt;9.3]   span是标签<br></code></pre></td></tr></table></figure>
<h3 id="通过包含修饰"><a href="#通过包含修饰" class="headerlink" title="通过包含修饰"></a>通过包含修饰</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F;div[contains(@id,&quot;sd&quot;)]       找出sdq通过属性名和大概的属性值 <br>&#x2F;&#x2F;div[contains(text(),&quot;下一页&quot;)]     通过文本内容包含有下一页的字  <br></code></pre></td></tr></table></figure>
<h1 id="选取未知节点的语法"><a href="#选取未知节点的语法" class="headerlink" title="选取未知节点的语法"></a>选取未知节点的语法</h1><table>
<thead>
<tr>
<th align="center">通配符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="center">匹配任何元素节点</td>
</tr>
<tr>
<td align="center">@*</td>
<td align="center">匹配任何属性节点</td>
</tr>
<tr>
<td align="center">node()</td>
<td align="center">匹配任何类型的节点</td>
</tr>
<tr>
<td align="center">//*</td>
<td align="center">全部的标签</td>
</tr>
<tr>
<td align="center">//@*</td>
<td align="center">全部的属性</td>
</tr>
</tbody></table>
<h2 id="xpath复合使用语法"><a href="#xpath复合使用语法" class="headerlink" title="xpath复合使用语法"></a>xpath复合使用语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">&#x2F;&#x2F;h2&#x2F;a|&#x2F;&#x2F;td&#x2F;a<br></code></pre></td></tr></table></figure>
<h1 id="xpath方法返回列表的三种情况"><a href="#xpath方法返回列表的三种情况" class="headerlink" title="xpath方法返回列表的三种情况"></a>xpath方法返回列表的三种情况</h1><ul>
<li>返回空列表: 根据xpath语法规则字符串, 没有定位到任何元素</li>
<li>返回由字符串构成的列表: xpath字符串匹配的一定是文本内容或某属性的值</li>
<li>返回由Element对象构成的列表: xpath规则字符串匹配的是标签, 列表中的Element对象可以继续进行xpath</li>
</ul>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 verify参数与CA证书(吃牢饭集合)</title>
    <url>/reptile-verify-CA.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import requests<br><br># 例如校园网<br>url &#x3D; &quot;https:&#x2F;&#x2F;sam.huat.edu.cn:8443&#x2F;selfservice&#x2F;&quot;<br><br>response &#x3D; requests.get(url, verify&#x3D;False)<br><br>print(response.content)<br>print(response.text)<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 代理(吃牢饭集合)</title>
    <url>/reptile-agent.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>
<h1 id="理解使用代理的过程"><a href="#理解使用代理的过程" class="headerlink" title="理解使用代理的过程"></a>理解使用代理的过程</h1><p><strong>代理ip是一个ip, 指向的是一个代理服务器</strong></p>
<p><strong>代理服务器能够帮我们向目标服务器转发请求</strong></p>
<pre><code>      request         request
   ↗￣￣￣￣￣↘   ↗￣￣￣￣￣↘
浏览器         代理              Web server
   ↖_________↙   ↖_________↙
     response        response</code></pre>
<h1 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h1><p><strong>为浏览器或客户端(发送请求的一方)转发请求的, 叫做正向代理</strong></p>
<ul>
<li>浏览器知道最终处理请求服务器的真实ip地址, 例如vpn</li>
</ul>

<h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><p><strong>不为浏览器或客户端(发送请求的一方)转发请求的, 而是为最终处理请求的服务器转发请求的,叫做反向代理</strong></p>
<ul>
<li>浏览器不知道服务器的真实ip地址, 例如nginx</li>
</ul>

<h1 id="怎么区分正向代理和反向代理"><a href="#怎么区分正向代理和反向代理" class="headerlink" title="怎么区分正向代理和反向代理"></a>怎么区分正向代理和反向代理</h1><p><strong>知不知道最终服务器的地址作为判断标准 知道正向 不知道反向</strong></p>
<h1 id="代理ip-代理服务器-的分类"><a href="#代理ip-代理服务器-的分类" class="headerlink" title="代理ip(代理服务器)的分类"></a>代理ip(代理服务器)的分类</h1><p><strong>透明代理(Transparent Proxy) 透明代理虽然直接隐藏你的ip地址, 但还是可以查看的到 目标服务器接收到的请求头如下:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">REMOTE_ADDR &#x3D; Proxy IP<br><br>HTTP_VIA &#x3D; Proxy IP<br><br>HTTP_X_FORWARDED_FOR &#x3D; 你的IP<br></code></pre></td></tr></table></figure>
<p><strong>匿名代理(Anonymous Proxy) 使用匿名代理, 别人只能知道你用了代理, 无法知道你是谁 目标服务器接收到的请求头如下:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">REMOTE_ADDR &#x3D; Proxy IP<br><br>HTTP_VIA &#x3D; Proxy IP<br><br>HTTP_X_FORWARDED_FOR &#x3D; Proxy IP<br></code></pre></td></tr></table></figure>
<p><strong>高匿代理(Elite Proxy或者High Anonymous Proxy) 使用高匿代理让别人无法发现你是在用代理, 所以是最好选择 效果最好 目标服务器接收到的请求头如下:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">REMOTE_ADDR &#x3D; Proxy IP<br><br>HTTP_VIA &#x3D; not determined<br><br>HTTP_X_FORWARDED_FOR &#x3D; not determined<br></code></pre></td></tr></table></figure>
<h1 id="根据网站所使用的协议不同-需要使用相应协议的代理服务"><a href="#根据网站所使用的协议不同-需要使用相应协议的代理服务" class="headerlink" title="根据网站所使用的协议不同, 需要使用相应协议的代理服务"></a>根据网站所使用的协议不同, 需要使用相应协议的代理服务</h1><ul>
<li>http代理: 目标url为http协议</li>
<li>https代理: 目标url为https协议</li>
<li>socks隧道代理: 例如socks5
<ul>
<li>socks代理只是简单传递数据包, 不关心是何种应用协议(FTP, HTTP, HTTPS等)</li>
<li>socks代理比http和https代理耗时少</li>
<li>socks代理可以转发http请求和https请求</li>
</ul>
</li>
</ul>

<h1 id="proxies代理参数的使用"><a href="#proxies代理参数的使用" class="headerlink" title="proxies代理参数的使用"></a>proxies代理参数的使用</h1><p><strong>为了让服务器以为不是同一个客户端的请求, 防止频繁向一个域名发送请求被封ip, 所以要使用代理ip</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 主意: proxies字典中包含多个键值对, 发送请求时将按照url地址的协议来选择对应的代理ip<br><br># proxies通常是用字典形式使用<br>proxies &#x3D; &#123;<br>    &quot;http&quot;:&quot;http:&#x2F;&#x2F;106.14.5.128:80&quot;,<br>    &quot;https&quot;:&quot;http:&#x2F;&#x2F;106.14.5.130:80&quot;<br>&#125;<br><br># reuests模块使用代理的用法:<br>response &#x3D; requests.get(url, proxies&#x3D;proxies)<br></code></pre></td></tr></table></figure>







































































<!-- <div id="dl-1" style="width:100%;height:500px"></div>

<script>
var chartDom = document.getElementById('dl-1');
var myChart = echarts.init(chartDom);
var option;

option = {
    title: {
        text: 'Graph 简单示例'
    },
    tooltip: {},
    animationDurationUpdate: 1500,
    animationEasingUpdate: 'quinticInOut',
    series: [
        {
            type: 'graph',
            layout: 'none',
            symbolSize: 50,
            roam: true,
            label: {
                show: true
            },
            edgeSymbol: ['circle', 'arrow'],
            edgeSymbolSize: [4, 10],
            edgeLabel: {
                fontSize: 20
            },
            data: [{
                name: '节点1',
                x: 300,
                y: 300
            }, {
                name: '节点2',
                x: 800,
                y: 300
            }, {
                name: '节点3',
                x: 550,
                y: 100
            }, {
                name: '节点4',
                x: 550,
                y: 500
            },
            {
                name: '节点5',
                x: 350,
                y: 500
            }


            ],
            links: [],
            links: [{
                source: 0,
                target: 1,
                symbolSize: [5, 20],
                label: {
                    show: true
                },
                lineStyle: {
                    width: 5,
                    curveness: 0.2
                }
            }, {
                source: '节点2',
                target: '节点1',
                label: {
                    show: true
                },
                lineStyle: {
                    curveness: 0.2
                }
            }, {
                source: '节点1',
                target: '节点3'
            }, {
                source: '节点2',
                target: '节点3'
            }, {
                source: '节点2',
                target: '节点4'
            }, {
                source: '节点1',
                target: '节点4'
            },{
                source: '节点5',
                target: '节点1'
            }

            ],
            lineStyle: {
                opacity: 0.9,
                width: 2,
                curveness: 0
            }
        }
    ]
};

option && myChart.setOption(option);
</script> -->]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 报文(吃牢饭集合)</title>
    <url>/reptile-message.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="查看报文"><a href="#查看报文" class="headerlink" title="查看报文"></a>查看报文</h1><p><strong>点击Request Headers旁边的view parsed</strong></p>
<p><strong>注意: view parsed没点之前其实是给你优化过的</strong></p>
<h1 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h1><table>
<thead>
<tr>
<th>GET</th>
<th>HTTP</th>
<th>1.1</th>
<th>Host</th>
</tr>
</thead>
<tbody><tr>
<td>方法</td>
<td>路径</td>
<td>协议版本</td>
<td>发送请求的域名</td>
</tr>
</tbody></table>
<ul>
<li>Content-Type</li>
<li>Host (主机和端口号)</li>
<li>Connection (链接类型/常链接)</li>
<li>UPgrade-Insecure-Requests (升级为HTTPS请求)</li>
<li>User-Agent (用户代理 提供系统信息和浏览器信息)</li>
<li>Referer (页面跳转处)</li>
<li>Cookie (Cookie数据非常重要,)</li>
<li>Authorization (表示HTTP协议中需要认证资源的认证信息, 例如用于jwt认证)</li>
</ul>

<p><strong>请求头表格形式</strong></p>
<table>
<thead>
<tr>
<th>特别关注</th>
<th>以下几个请求头</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Host</td>
<td>域名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Connection</td>
<td>常链接</td>
<td></td>
<td></td>
</tr>
<tr>
<td>UPgrade-Insecure-Requests</td>
<td>升级为HTTPS请求</td>
<td></td>
<td></td>
</tr>
<tr>
<td>User-Agent</td>
<td>用户代理</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Refrer</td>
<td>页面跳转处, 防盗链</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Cookie</td>
<td>保持状态, 用于跳过账号密码</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应头表格形式</strong></p>
<table>
<thead>
<tr>
<th>特别关注</th>
<th>以下几个请求头</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>HTTP/1.1</td>
<td>协议</td>
<td></td>
<td></td>
</tr>
<tr>
<td>200</td>
<td>状态码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Set-Cookie</td>
<td>cookie到用户浏览器的缓存非常重要用于跳过账号密码</td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 概念(牢饭吃到饱)</title>
    <url>/reptile-concept.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>


<h1 id="服务器渲染"><a href="#服务器渲染" class="headerlink" title="服务器渲染"></a>服务器渲染</h1><p><strong>其实就是在服务器那边直接把数据和HTMl整合在一起, 统一返回浏览器, 其实源代码就是网站的基本面貌, 之所以有可视化界面都是浏览器的功劳</strong></p>
<h1 id="客户端渲染"><a href="#客户端渲染" class="headerlink" title="客户端渲染"></a>客户端渲染</h1><p><strong>第一次只是请求HTMl骨架, 第二次请求拿到数据, 然后在你的浏览器中组合变形</strong></p>
<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p><strong>HTTP协议传输的就是网站源代码</strong></p>
<h1 id="HTTP协议把一条消息分为三大块内容"><a href="#HTTP协议把一条消息分为三大块内容" class="headerlink" title="HTTP协议把一条消息分为三大块内容"></a>HTTP协议把一条消息分为三大块内容</h1><h1>请求: </h1>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">请求行 -&gt; 请求方式(get&#x2F;post) 请求url地址 协议<br><br>请求头 -&gt; 放一些服务器要使用的附加信息<br><br>请求体 -&gt; 一般放一些请求参数<br></code></pre></td></tr></table></figure>
<h1>响应: </h1>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">状态行 -&gt;  协议 状态码 例如:404<br><br>响应头 -&gt; 放一些客户端要使用的附加信息<br><br>响应体 -&gt; 服务器返回的真正客户端要使用的内容 例如:HTML, json等等<br></code></pre></td></tr></table></figure>
<h1 id="请求头中最常见的一些重要内容"><a href="#请求头中最常见的一些重要内容" class="headerlink" title="请求头中最常见的一些重要内容"></a>请求头中最常见的一些重要内容</h1><p><strong>User-Agent: 请求载体的身份标识(用啥发送的请求)</strong></p>
<p><strong>Referer: 防盗链(这次请求是从哪个页面来的? 防爬会用到)</strong></p>
<p><strong>cookie: 本地字符串数据信息(用户登陆信息, 防爬的token)</strong></p>
<h1 id="响应头中一些重要的内容"><a href="#响应头中一些重要的内容" class="headerlink" title="响应头中一些重要的内容"></a>响应头中一些重要的内容</h1><p><strong>cookie: 本地字符串数据信息(用户登陆信息, 防爬的token)</strong></p>
<p><strong>各种神奇的莫名其妙的字符串(一般都是yoken字样,防止各种攻击和防爬)</strong></p>
<h1 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h1><p><strong>GET: 显示提交</strong></p>
<p>查询用的多</p>
<p><strong>POST: 隐示提交</strong></p>
<p>增加,修改,上传服务器里面的数据</p>
<h1 id="数据解析的三种方式"><a href="#数据解析的三种方式" class="headerlink" title="数据解析的三种方式"></a>数据解析的三种方式</h1><p><strong>re解析</strong></p>
<p><strong>bs4解析</strong></p>
<p><strong>xpath解析</strong></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 数据提取(吃牢饭集合)</title>
    <url>/reptile-Extraction.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="响应内容分类"><a href="#响应内容分类" class="headerlink" title="响应内容分类"></a>响应内容分类</h1><h2 id="结构化的响应内容"><a href="#结构化的响应内容" class="headerlink" title="结构化的响应内容"></a>结构化的响应内容</h2><h3 id="json字符串-高频出现"><a href="#json字符串-高频出现" class="headerlink" title="json字符串(高频出现)"></a>json字符串(高频出现)</h3><ul>
<li>可以使用re,json等模块来提取特定数据</li>
</ul>
<h3 id="xml数据-低频出现"><a href="#xml数据-低频出现" class="headerlink" title="xml数据(低频出现)"></a>xml数据(低频出现)</h3><ul>
<li>可以使用re,lxml等模块来提取特定数据</li>
</ul>
<h2 id="非结构化的响应内容"><a href="#非结构化的响应内容" class="headerlink" title="非结构化的响应内容"></a>非结构化的响应内容</h2><h3 id="html字符串"><a href="#html字符串" class="headerlink" title="html字符串"></a>html字符串</h3><ul>
<li>可以使用re,lxml等模块来提取特定数据</li>
</ul>
<h1 id="xml与html区别"><a href="#xml与html区别" class="headerlink" title="xml与html区别"></a>xml与html区别</h1><table>
<thead>
<tr>
<th align="center">数据格式</th>
<th align="center">描述</th>
<th align="center">设计目标</th>
<th align="center">个人总结</th>
</tr>
</thead>
<tbody><tr>
<td align="center">XML</td>
<td align="center">Extensible Markup Language(可扩展标记语言)</td>
<td align="center">被设计为传输和存储数据, 其焦点是数据的内容</td>
<td align="center">xml传输和储存数据</td>
</tr>
<tr>
<td align="center">HTML</td>
<td align="center">HyperText Markup Language(超文本标记语言)</td>
<td align="center">显示数据已经然后更好显示数据</td>
<td align="center">html展示数据</td>
</tr>
</tbody></table>
<h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><ul>
<li>可扩展标记语言</li>
<li>为了传输和储存数据, 侧重点是在于数据内容本身</li>
<li>xml是一种可扩展标记语言, 样子和html很像, 功能更专注对传输和储存数据</li>
</ul>
<p>_</p>
<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><ul>
<li>超文本记语言</li>
<li>为了更好的显示数据, 侧重点是为显示</li>
<li>html是显示效果更好, 用于展示数据</li>
</ul>
<h1 id="常用的数据解析方法"><a href="#常用的数据解析方法" class="headerlink" title="常用的数据解析方法"></a>常用的数据解析方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">                                          &#x2F;   json模块<br>                                &#x2F;   json |<br>                               &#x2F;          \   jsonpath模块<br>               数据化数据      &#x2F;<br>           &#x2F;￣￣￣￣￣￣￣￣￣￣\<br>          &#x2F;                     \         &#x2F;   re模块    正则语法<br>         &#x2F;                       \  xml  |<br>        &#x2F;                                 \   lxml模块  xpath语法<br>       &#x2F;                                 <br>数据解析<br>       \ <br>        \                                 &#x2F;   re模块    正则语法         <br>         \                               &#x2F;    lxml模块  xpath语法<br>          \                             &#x2F;<br>           \_____________________ html |      beautifulsoup  xpath语法 正则语法 css选择器<br>               非结构化数据              \     <br>                                         \<br>                                          \   pyquery   css选择器<br></code></pre></td></tr></table></figure>

<h1 id="jsonpath模块"><a href="#jsonpath模块" class="headerlink" title="jsonpath模块"></a>jsonpath模块</h1><p><a href="https://sdq3.gitee.io/reptile-jsonpath.html">详细说明</a></p>
<h1 id="lxml模块"><a href="#lxml模块" class="headerlink" title="lxml模块"></a>lxml模块</h1><p><a href="https://sdq3.gitee.io/bs4-lxml.html">详细说明</a></p>
<h1 id="xpath模块"><a href="#xpath模块" class="headerlink" title="xpath模块"></a>xpath模块</h1><p><a href="https://sdq3.gitee.io/reptile-xpath.html">详细说明</a></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 正则表达式(牢饭吃到饱)</title>
    <url>/reptile-RegEx.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>


<h1 id="正则表达式的优点和缺点"><a href="#正则表达式的优点和缺点" class="headerlink" title="正则表达式的优点和缺点"></a>正则表达式的优点和缺点</h1><p><strong>优点: 速度快, 效率高, 准确度高</strong></p>
<p><strong>缺点: 优点老手福利, 新手? ? ?</strong></p>
<h1 id="正则表达式的概念"><a href="#正则表达式的概念" class="headerlink" title="正则表达式的概念"></a>正则表达式的概念</h1><p><strong>使用元字符进行排列组合用来匹配字符串</strong></p>
<h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><p><strong>常用元字符</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">.          匹配除换行符以外的任意字符<br>    <br>\w         匹配字母或数字或下划线<br>    <br>\s         匹配任意的空白符<br>    <br>\d         匹配数字<br>    <br>\n         匹配一个换行符<br>    <br>\t         匹配一个制表符<br>    <br>^          匹配字符串的开始<br>    <br>        匹配字符串的结尾<br>    <br>\w         匹配非字母或数字或下划线<br>    <br>\D         匹配非数字<br>    <br>\S         匹配非空白符<br>    <br>a|b        匹配字符a或字符b<br>    <br>()         匹配括号内的表达式, 也表示一个组<br>    <br>[]         匹配字符中的字符    例如 [a-zA-z0-9]<br>    <br>[^]        匹配除了字符组中字符的所有字符<br></code></pre></td></tr></table></figure>
<p><strong>量词: 控制前面的元字符出现的次数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">*          重复零次或更多次 <br><br>+          重复一次或更多次<br><br>?          重复零次或一次  说白了就是出现或者不出现<br><br>&#123;n&#125;        重复n次<br><br>&#123;n,&#125;       重复n次或更多次<br><br>&#123;n,m&#125;      重复n到m次<br></code></pre></td></tr></table></figure>
<p><strong>贪婪匹配和惰性匹配</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">.*          贪婪匹配      说白了就是尽可能多的匹配<br><br>.*?         惰性匹配      说白了就是尽可能少的匹配<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 反爬知识大讲解(抓到即坐牢)</title>
    <url>/reptile-prevent.html</url>
    <content><![CDATA[<p><strong>好好劳改重新做人</strong></p>
<a id="more"></a>

<h1 id="通常反爬的三个方向"><a href="#通常反爬的三个方向" class="headerlink" title="通常反爬的三个方向"></a>通常反爬的三个方向</h1><ul>
<li>基于身份识别进行反爬<ul>
<li>通过hraders中的User-Agent字段来反爬<ul>
<li>反爬原因: 爬虫默认情况下没有User-Agent, 而是使用模块默认设置</li>
<li>解决方法: 请求之前添加User-Agent即可或者使用User-Agent池来解决</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>通过referer字段或者是其他字段来反爬 </p>
<ul>
<li>反爬原因: 爬虫默认情况下不会带上referer字段, 服务器端通过判断请求头是否合法</li>
<li>解决方法: 添加referer字段</li>
</ul>
</li>
<li><p>通过cookie来反爬</p>
<ul>
<li>反爬原因: 通过检查cookie来查看发起请求的用户是否具备相应权限来进行反爬</li>
<li>解决方法: 进行模拟代理, 成功获取cookie之后在进行数据爬取</li>
</ul>
</li>
<li><p>通过从html静态文件中获取请求数据</p>
<ul>
<li>反爬原因: 通过增加获取请求参数的难度进行反爬</li>
<li>解决方法: 仔细分析抓到的每个包, 搞清楚请求之间的联系</li>
</ul>
</li>
<li><p>通过发生请求获取请求数据</p>
<ul>
<li>反爬原因: 通过增加获取请求参数的难度进行反爬</li>
<li>解决方法: 仔细分析抓到的每个包, 搞清楚请求之间的联系, 搞清楚请求参数的来源</li>
</ul>
</li>
<li><p>通过js生成请求参数</p>
<ul>
<li>反爬原因: js生成请求参数</li>
<li>解决方法: 分析js, 观察加密的实现过程, 通过js2py获取js的执行结果或者使用selenium来实现</li>
</ul>
</li>
<li><p>通过验证码来反爬</p>
<ul>
<li>反爬原因: 对方服务器通过弹出验证码来强制用户浏览行为</li>
<li>解决方法: 打码平台或者机器学习的方法识别验证码</li>
</ul>
</li>
</ul>
<ul>
<li><p>基于爬虫行为进行反爬</p>
<ul>
<li><p>通过请求IP/账号单位时间内总请求数量进行反爬</p>
<ul>
<li>反爬原因: 正常浏览器请求网站, 速度不会太快, 同一个IP/账号大量请求了对方服务器, 有更大的可能性会被识别为爬虫</li>
<li>解决方法: 对应的通过购买高质量的IP的方式能够解决问题或者多账号</li>
</ul>
</li>
<li><p>通过同一账号/IP请求之间的间隔进行反爬</p>
<ul>
<li>反爬原因: 正常浏览器浏览网站请求之间的时间是随机的, 而爬虫前后两个请求之间间隔固定同时间隔较短</li>
<li>解决方法: 请求之间进行随机等待, 模拟真实用户操作, 在添加时间间隔后, 为了能够高速获取数据, 尽量使用代理池, 如果是账号则将账号请求之间设置随机睡眠</li>
</ul>
</li>
<li><p>通过对请求IP/账号每天请求次数设置阈值进行反爬</p>
<ul>
<li>反爬原因: 正常的浏览行为, 其一天次数是有限的, 通常超过某一个值, 服务器就会拒绝响应</li>
<li>解决方法: 对应的通过购买高质量的IP的方式能够解决问题或者多账号, 同时设置请求间随机休眠</li>
</ul>
</li>
<li><p>通过js实现跳转来反爬</p>
<ul>
<li>反爬原因: js实现页面跳转, 无法在源码中获取下一页的url</li>
<li>解决方法: 多次抓包获取跳转url, 分析规律</li>
</ul>
</li>
<li><p>通过蜜罐(陷阱)获取爬虫IP或代理IP</p>
<ul>
<li>反爬原因: 在爬虫获取链接进行请求的过程中, 爬虫会根据正则, xpath, css等方式进行后续链接的提取, 此时服务器端可以设置一个陷阱url, 会被提取规则获取, 但是正常用户无法获取, 这样就能有效的区分爬虫和正常用户</li>
<li>解决方法: 完成爬虫的编写之后, 使用代理批量爬取测试/仔细分析响应内容结构, 找出页面中存在的陷阱</li>
</ul>
</li>
<li><p>通过假数据反爬</p>
<ul>
<li>反爬原因: 向返回的响应中添加假数据库, 通常不会被正常用户看到</li>
<li>解决方法: 长期运行, 核对数据库中数据同实际数据的对应情况, 如果存在问题/仔细分析响应内容</li>
</ul>
</li>
<li><p>阻塞任务队列</p>
<ul>
<li>反爬原因: 通过生成大量垃圾url从而阻塞任务队列, 降低爬虫的实际工作效率</li>
<li>解决方法: 观察运行过程中请求响应状态/仔细分析源码获取垃圾url生成规则, 对url进行过滤</li>
</ul>
</li>
<li><p>阻塞网络IO</p>
<ul>
<li>反爬原因: 发送请求获取响应的过程实际上就是下载的过程, 在任务队列中混入一个大文件的url, 当爬虫在进行该请求是将会占用网络IO, 多线程下载会占用线程</li>
<li>解决方法: 观察运行过程中请求响应状态/多线程对请求线程计时/发送请求钱</li>
</ul>
</li>
<li><p>运维平台综合审计</p>
<ul>
<li>反爬原因: 通过运维平台进行综合管理, 通常采用复合型反爬策略, 多种手段同时使用</li>
<li>解决方法: 仔细分析, 长期运行测试目标网站, 检查数据采集速度多方面处理</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>基于数据加密进行反爬 </p>
<ul>
<li><p>自定义字体来实现反爬</p>
<ul>
<li>反爬原因: 使用自有字体文件</li>
<li>解决方法: 切换到手机版/解析字体文件进行翻译</li>
</ul>
</li>
<li><p>通过css来实现反爬</p>
<ul>
<li>反爬原因: 源码数据不为真正数据, 需要通过css位移才能产生真正数据</li>
<li>解决方法: 计算css的偏移</li>
</ul>
</li>
<li><p>通过js动态生成数据进行反爬</p>
<ul>
<li>反爬原因: 通过js动态生成</li>
<li>解决方法: 解析关键js, 获得数据生成流程, 模拟存储数据</li>
</ul>
</li>
<li><p>通过数据图片化实现反爬</p>
<ul>
<li>反爬原因: 通过数据图片化生成</li>
<li>解决方法: 通过使用图片解析引擎从图片解析数据</li>
</ul>
</li>
<li><p>通过编码格式进行反爬</p>
<ul>
<li>反爬原因: 不适合用默认编码格式, 在获取响应之后通常爬虫使用UTF-8格式进行解码, 此时解码结构将会是乱码或者报错</li>
<li>解决方法: 根据源码进行多格式解码或者真正的解码格式</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 爬猫猫图片(牢饭吃到饱)</title>
    <url>/reptile-mao.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h1><p><strong>打开这个<a href="http://www.ichong123.com/maomao">网址</a></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"># 所有用到的库<br>import requests<br>import re<br>import time<br><br># 要爬的链接<br>url &#x3D; &quot;http:&#x2F;&#x2F;www.ichong123.com&#x2F;maomao&quot;<br><br># 请求头<br>headers &#x3D; &#123;<br>    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.72 Safari&#x2F;537.36&quot;<br>&#125;<br><br>paqv &#x3D; requests.get( url&#x3D;url, headers&#x3D;headers )<br><br># 根据网站的编码来换<br>paqv.encoding &#x3D; &#39;utf-8&#39;<br><br># xiazai &#x3D; paqv.text<br><br># print(xiazai)<br><br># 正则表达式 re.S单行匹配(正则解析比较多) re.M多行匹配()<br>sdq1 &#x3D; re.compile(r&#39;&lt;div class&#x3D;&quot;pet_s&quot;&gt;.*?&lt;img src&#x3D;(?P&lt;mao&gt;.*?)width&#39;,re.S)<br>paq &#x3D; sdq1.finditer(paqv.text)<br>a &#x3D; 1<br># 用循环来依次下载<br>for it in paq:<br>    time.sleep(3)  #休眠3秒<br>    ul &#x3D; it.group(&#39;mao&#39;)<br>    ul2 &#x3D; eval(ul)  #eval()函数用来执行一个字符串表达式，并返回表达式的值<br>    sdz &#x3D; requests.get(ul2)<br><br>    # 图片文件保存 选择路径<br>    with open(f&quot;E:&#x2F;百度文档&#x2F;mao&#x2F;&#123;a&#125;.jpg&quot;,&quot;wb&quot;) as f:<br>        f.write(sdz.content)<br>        f.close()<br>        a+&#x3D;1<br>print(&quot;猫猫下载完了&quot;)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 状态码(吃牢饭集合)</title>
    <url>/reptile-state.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h1><p><strong>常见的状态码 (了解就行)</strong></p>
<ul>
<li>200: 成功</li>
<li>302: 跳转, 新的url在响应的Location头中给出</li>
<li>303: 浏览器对于POST的响应进行重新定向至新的url</li>
<li>307: 浏览器对应GET响应进行重新定向至新的url</li>
<li>403: 资源不可用; 服务器理解客户的请求, 但拒绝处理它(没有权限)</li>
<li>404: 找不到资源</li>
<li>500: 服务器内部错误</li>
<li>503: 服务器又有维护或者负载过重未能应答, 在响应中可能会携带Retry-After响应头; 有可能是因为爬虫频繁访问url, 使得服务器忽视爬虫的请求, 最终返回503响应状态码</li>
</ul>

<p><strong>常见状态码表格形式 (了解就行)</strong></p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>代表意思</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>成功</td>
<td></td>
<td></td>
</tr>
<tr>
<td>302</td>
<td>跳转, 新的url在响应的Location头中给出</td>
<td></td>
<td></td>
</tr>
<tr>
<td>303</td>
<td>浏览器对于POST的响应进行重新定向至新的url</td>
<td></td>
<td></td>
</tr>
<tr>
<td>307</td>
<td>浏览器对应GET响应进行重新定向至新的url</td>
<td></td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>资源不可用; 服务器理解客户的请求, 但拒绝处理它(没有权限)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>找不到资源</td>
<td></td>
<td></td>
</tr>
<tr>
<td>500</td>
<td>服务器内部错误</td>
<td></td>
<td></td>
</tr>
<tr>
<td>503</td>
<td>服务器又有维护或者负载过重未能应答, 在响应中可能会携带Retry-After响应头; 有可能是因为爬虫频繁访问url, 使得服务器忽视爬虫的请求, 最终返回503响应状态码</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>总结 所有的状态码都不可信, 一切以是否从抓包得到的响应中获得到的数据为准 network中抓包得到的源码才是判断依据, elements中的源码是渲染之后的源码</strong></p>
<table>
<thead>
<tr>
<th>请求过程</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>浏览器</td>
<td>发送所有请求, 进行渲染</td>
</tr>
<tr>
<td>爬虫</td>
<td>发送所有请求, 不会渲染</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>请页面可分为</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>骨骼文件</td>
<td>html静态文件</td>
</tr>
<tr>
<td>肌肉文件</td>
<td>js/ajax请求</td>
</tr>
<tr>
<td>皮肤文件</td>
<td>css/font/图片等</td>
</tr>
</tbody></table>
<p><strong>抓包过程: 根据发送请求的流程分别在 骨骼 / 肌肉 / 皮肤 响应中查找数据</strong></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 爬小说(牢饭吃到饱)未完待续</title>
    <url>/reptile-novel.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>


<h1 id="爬小说的详细步骤"><a href="#爬小说的详细步骤" class="headerlink" title="爬小说的详细步骤"></a>爬小说的详细步骤</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import time<br>feom bs4<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 比Python功能更加强大的node.js简介(牢饭吃到饱)未完待续</title>
    <url>/reptile-python%E2%80%94node.js.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>


<h1 id="node-js爬虫的详细步骤"><a href="#node-js爬虫的详细步骤" class="headerlink" title="node.js爬虫的详细步骤"></a>node.js爬虫的详细步骤</h1><h1 id="第一步-发送http请求-获取整个网页的内容"><a href="#第一步-发送http请求-获取整个网页的内容" class="headerlink" title="第一步 发送http请求, 获取整个网页的内容"></a>第一步 发送http请求, 获取整个网页的内容</h1><h1 id="第二步-通过cheerio对爬取的网页内容进行分析"><a href="#第二步-通过cheerio对爬取的网页内容进行分析" class="headerlink" title="第二步 通过cheerio对爬取的网页内容进行分析"></a>第二步 通过cheerio对爬取的网页内容进行分析</h1><h1 id="第三步-提取关键信息"><a href="#第三步-提取关键信息" class="headerlink" title="第三步 提取关键信息"></a>第三步 提取关键信息</h1><h1 id="使用download库进行批量下载"><a href="#使用download库进行批量下载" class="headerlink" title="使用download库进行批量下载"></a>使用download库进行批量下载</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 请求头和响应头(吃牢饭集合)</title>
    <url>/reptile-header.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>

<h1 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h1><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><p><strong>301是永久重定向, 之后的请求中客户端应该使用新的URI(即, 可以被浏览器缓存), 对于POST/PUT/DELETE请求 客户端不应该自动的重定向</strong></p>
<p><strong>302是由于未知原因重定向, 之后的请求中客户端不应该用新的URI, 对于POST/PUT/DELETE请求 客户端不应该自动重定向</strong></p>
<p><strong>303是由于未知原因重定向, 之后的请求中客户端不应该用新的URI, 对于POST/PUT/DELETE请求 客户端应该使用GET请求来替代</strong></p>
<p><strong>307是临时重定向, 之后资源可能会回到这个位置, 之后的请求中客户端应该使用旧的URI, 对于POST/PUT/DELETE请求 客户端不应该自动重定向</strong></p>
<!-- # 查看报文

**点击Request Headers旁边的view parsed**

**注意: view parsed没点之前其实是给你优化过的**

# 报文格式

GET|HTTP|1.1|Host|
-|-|-|-|
方法 | 路径 | 协议版本 |发送请求的域名

<ul>
<li>Content-Type</li>
<li>Host (主机和端口号)</li>
<li>Connection (链接类型/常链接)</li>
<li>UPgrade-Insecure-Requests (升级为HTTPS请求)</li>
<li>User-Agent (用户代理 提供系统信息和浏览器信息)</li>
<li>Referer (页面跳转处)</li>
<li>Cookie (Cookie数据非常重要,)</li>
<li>Authorization (表示HTTP协议中需要认证资源的认证信息, 例如用于jwt认证)</li>
</ul>

**请求头表格形式**

 特别关注|以下几个请求头|| |
-|-|-|-|
Host | 域名 |  |
Connection | 常链接 |  |
UPgrade-Insecure-Requests | 升级为HTTPS请求 |  |
User-Agent | 用户代理|  |
Refrer | 页面跳转处, 防盗链 |  |
Cookie | 保持状态, 用于跳过账号密码 |  |

**响应头表格形式**

 特别关注|以下几个请求头|| |
-|-|-|-|
HTTP/1.1 | 协议 |  |
200 | 状态码 |  |
Set-Cookie | cookie到用户浏览器的缓存非常重要用于跳过账号密码 |  |

# 状态码

**常见的状态码 (了解就行)**

<ul>
<li>200: 成功</li>
<li>302: 跳转, 新的url在响应的Location头中给出</li>
<li>303: 浏览器对于POST的响应进行重新定向至新的url</li>
<li>307: 浏览器对应GET响应进行重新定向至新的url</li>
<li>403: 资源不可用; 服务器理解客户的请求, 但拒绝处理它(没有权限)</li>
<li>404: 找不到资源</li>
<li>500: 服务器内部错误</li>
<li>503: 服务器又有维护或者负载过重未能应答, 在响应中可能会携带Retry-After响应头; 有可能是因为爬虫频繁访问url, 使得服务器忽视爬虫的请求, 最终返回503响应状态码</li>
</ul>

**常见状态码表格形式 (了解就行)**

 状态码|代表意思|| |
-|-|-|-|
200 | 成功 |  |
302 | 跳转, 新的url在响应的Location头中给出 |  |
303 | 浏览器对于POST的响应进行重新定向至新的url |  |
307 | 浏览器对应GET响应进行重新定向至新的url |  |
403 | 资源不可用; 服务器理解客户的请求, 但拒绝处理它(没有权限) |  |
404 | 找不到资源 |  |
500 | 服务器内部错误 |  |
503 | 服务器又有维护或者负载过重未能应答, 在响应中可能会携带Retry-After响应头; 有可能是因为爬虫频繁访问url, 使得服务器忽视爬虫的请求, 最终返回503响应状态码 |  |

**总结 所有的状态码都不可信, 一切以是否从抓包得到的响应中获得到的数据为准 network中抓包得到的源码才是判断依据, elements中的源码是渲染之后的源码**

 请求过程||
-|-|
 浏览器| 发送所有请求, 进行渲染 |  
  爬虫| 发送所有请求, 不会渲染 |  


 请页面可分为||
-|-|
骨骼文件| html静态文件 |  
肌肉文件| js/ajax请求 | 
皮肤文件| css/font/图片等 |  

**抓包过程: 根据发送请求的流程分别在 骨骼 / 肌肉 / 皮肤 响应中查找数据**


 -->
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫 访问百度翻译(牢饭吃到饱)</title>
    <url>/reptile-Baidutranslate.html</url>
    <content><![CDATA[<p><strong>每天一个入狱小技巧</strong></p>
<a id="more"></a>


<h1 id="导入requests"><a href="#导入requests" class="headerlink" title="导入requests"></a>导入requests</h1><!--more-->
<p><strong>打开cmd输入以下代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">pip install requests<br></code></pre></td></tr></table></figure>
<h1 id="百度翻译案例"><a href="#百度翻译案例" class="headerlink" title="百度翻译案例"></a>百度翻译案例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">import requests<br><br>url &#x3D; &quot;https:&#x2F;&#x2F;fanyi.baidu.com&#x2F;sug&quot;<br><br>s &#x3D; input(&quot;请输入你要翻译的英文单词&quot;)<br><br>dat &#x3D; &#123;<br>        &quot;kw&quot;:s<br>    &#125;<br><br>tou &#x3D; &#123;<br>    &quot;user-agent&quot;: &quot;Mozilla&#x2F;5.0 (Linux; Android 6.0; Nexus 5 Build&#x2F;MRA58N) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.85 Mobile Safari&#x2F;537.36&quot;<br>&#125;<br><br>pachon &#x3D; requests.post(url,headers&#x3D;tou,data&#x3D;dat)<br><br>print(pachon)<br><br>print(pachon.json())<br><br>pachon.close()  #断开&#x2F;关闭连接, 一定要断开<br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>百度搜索技巧</title>
    <url>/baidu.html</url>
    <content><![CDATA[<p><strong>技巧</strong></p>
<a id="more"></a>

<h1 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h1><p>搜索关键字加” “就行了 用法: “史迪奇”</p>
<h1 id="消除无关性"><a href="#消除无关性" class="headerlink" title="消除无关性"></a>消除无关性</h1><p>搜索关键字加(-)就行了 用法: (-史迪奇)</p>
<h1 id="并行搜索"><a href="#并行搜索" class="headerlink" title="并行搜索"></a>并行搜索</h1><p>搜索关键字加(|)就行了 用法: (史迪奇|史迪仔)</p>
<h1 id="搜索范围限定在网页标题中"><a href="#搜索范围限定在网页标题中" class="headerlink" title="搜索范围限定在网页标题中"></a>搜索范围限定在网页标题中</h1><p>搜索关键字加intitle:就行了 用法: intitle:史迪奇</p>
<h1 id="搜索范围限定在特定站点中"><a href="#搜索范围限定在特定站点中" class="headerlink" title="搜索范围限定在特定站点中"></a>搜索范围限定在特定站点中</h1><p>知道站点的前提下 site:站点域名就行了不要带http: 用法: intitle:<a href="https://sdq3.gitee.io/baidu.html">https://sdq3.gitee.io/baidu.html</a></p>
<h1 id="搜索范围限定在url链接"><a href="#搜索范围限定在url链接" class="headerlink" title="搜索范围限定在url链接"></a>搜索范围限定在url链接</h1><p>搜索关键字加inurl: 就行了 用法:史迪奇 inurl:小怪物</p>
<h1 id="特定格式的文档检索"><a href="#特定格式的文档检索" class="headerlink" title="特定格式的文档检索"></a>特定格式的文档检索</h1><p>搜索关键字加filetype: 就行了   用法:filetype:PDF 如PDF、DOC、XLS等</p>
<h1 id="精确匹配-电影-小说"><a href="#精确匹配-电影-小说" class="headerlink" title="精确匹配 电影 小说"></a>精确匹配 电影 小说</h1><p>搜索关键字加&lt;&gt;就行了 用法: &lt;史迪奇&gt;</p>
<h1 id="开始连接和正在连接"><a href="#开始连接和正在连接" class="headerlink" title="开始连接和正在连接"></a>开始连接和正在连接</h1><p>搜索关键字加(开始连接|正在连接)就行了  用法: 星际宝贝(开始连接|正在连接)</p>
<h1 id="计算器功能"><a href="#计算器功能" class="headerlink" title="计算器功能"></a>计算器功能</h1><p>搜索关键字加数字加减就行了  用法: 史迪奇*3-2+1</p>
<h1 id="仅搜索网站标题"><a href="#仅搜索网站标题" class="headerlink" title="仅搜索网站标题"></a>仅搜索网站标题</h1><p>搜索关键字加t:就行了 用法: t:史迪奇</p>
<h1 id="仅搜索网站的网址"><a href="#仅搜索网站的网址" class="headerlink" title="仅搜索网站的网址"></a>仅搜索网站的网址</h1><p>搜索关键字加u:就行了 用法: u:sdq3.gitee.io</p>
<h1 id="关键字都必须包含"><a href="#关键字都必须包含" class="headerlink" title="关键字都必须包含"></a>关键字都必须包含</h1><p>搜索关键字加 +就行了 用法: 史迪奇 +史迪仔 +是个人</p>
<h1 id="减去想要去除的关键词"><a href="#减去想要去除的关键词" class="headerlink" title="减去想要去除的关键词"></a>减去想要去除的关键词</h1><p>搜索关键字加 -就行了 用法: 史迪奇 -不是个人</p>
]]></content>
  </entry>
  <entry>
    <title>电脑刷BIOS(保姆级教程)</title>
    <url>/BOIS.html</url>
    <content><![CDATA[<p><strong>电脑刷BIOS简单到不能再简单</strong></p>
<a id="more"></a>
<h1 id="刷BIOS需谨慎-不然会想我一样花100快去重新烧录"><a href="#刷BIOS需谨慎-不然会想我一样花100快去重新烧录" class="headerlink" title="刷BIOS需谨慎, 不然会想我一样花100快去重新烧录"></a>刷BIOS需谨慎, 不然会想我一样花100快去重新烧录</h1><h3 id="首先下载Windows刷BIOS文件"><a href="#首先下载Windows刷BIOS文件" class="headerlink" title="首先下载Windows刷BIOS文件"></a>首先下载<a href="https://wwr.lanzoui.com/iLf2Is7cohi">Windows刷BIOS文件</a></h3><ul>
<li>密码:sdq3</li>
<li>把文件拖入C盘根目录解压</li>
</ul>
<p><strong>以管理员的方式打开</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">cd C:&#x2F;刷BIOS<br></code></pre></td></tr></table></figure>
<p><strong>备份命令 支持很多格式的备份</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">fptw64.exe -d 备份.bin -bios<br></code></pre></td></tr></table></figure>
<p><strong>写入命令 支持很多格式的写入</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">fptw64.exe -f 写入.bin -bios<br></code></pre></td></tr></table></figure>
<h1 id="dos刷BIOS"><a href="#dos刷BIOS" class="headerlink" title="dos刷BIOS"></a>dos刷BIOS</h1><h3 id="下载微PE把要刷写的BIOS文件U盘"><a href="#下载微PE把要刷写的BIOS文件U盘" class="headerlink" title="下载微PE把要刷写的BIOS文件U盘"></a>下载<a href="https://download.csdn.net/download/qq_44948696/20695927">微PE</a>把要刷写的BIOS文件U盘</h3><p><img src="/images/%E5%88%B7BIOS/%E5%BE%AEPE1.jpg"></p>
<p><img src="/images/%E5%88%B7BIOS/%E5%BE%AEPE2.jpg"></p>
<h3 id="运行MaxDos工具箱"><a href="#运行MaxDos工具箱" class="headerlink" title="运行MaxDos工具箱"></a>运行MaxDos工具箱</h3><p><strong>查看</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">dir<br></code></pre></td></tr></table></figure>
<p><strong>切换分区</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">A:<br><br>B:<br></code></pre></td></tr></table></figure>
<p><strong>刷新进EC目录下EC</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">ECFlash<br></code></pre></td></tr></table></figure>
<p><img src="/images/%E5%88%B7BIOS/%E5%88%B7EC.jpg"></p>
<p><strong>进BIOS目录下刷写BIOS</strong></p>
<p><strong>快</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">meset <br></code></pre></td></tr></table></figure>
<p><strong>慢</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">flashme<br></code></pre></td></tr></table></figure>
<p><img src="/images/%E5%88%B7BIOS/%E5%88%B7BIOS.jpg"></p>
<h3 id="神州SL7D3-神州SL7S3-神州SL7S4用的BIOS"><a href="#神州SL7D3-神州SL7S3-神州SL7S4用的BIOS" class="headerlink" title="神州SL7D3 神州SL7S3 神州SL7S4用的BIOS"></a>神州SL7D3 神州SL7S3 神州SL7S4<a href="https://wwr.lanzoui.com/iFiRVs7ehij">用的BIOS</a></h3>]]></content>
  </entry>
  <entry>
    <title>什么是线程?什么是进程?线程与进程到底是什么关系</title>
    <url>/Thread-Process.html</url>
    <content><![CDATA[<p><strong>概念</strong></p>
<a id="more"></a>

<h1 id="什么是线程-学习进程最重要的还是学习线程"><a href="#什么是线程-学习进程最重要的还是学习线程" class="headerlink" title="什么是线程(学习进程最重要的还是学习线程)"></a>什么是线程(学习进程最重要的还是学习线程)</h1><p><strong>线程就是独立执行的路径，就算在什么都不干的话，里面会有(主线程)main线程，Java里面还有个一个收垃圾的gc线程</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ Thread是线程的英文<br></code></pre></td></tr></table></figure>

<h1 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h1><p><strong>把程序跑起来才叫做进程，进程是执行程序的一次执行过程是一个动态的概念</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ Process是进程的英文<br></code></pre></td></tr></table></figure>
<h1 id="线程与进程到底是什么关系"><a href="#线程与进程到底是什么关系" class="headerlink" title="线程与进程到底是什么关系"></a>线程与进程到底是什么关系</h1><p><strong>一个进程里面可以包含若干个线程，一个进程里面必须要有一个线程，否则没有存在的意义</strong></p>
<h1 id="注意-线程开启不一定马上执行，JVM去告诉操作系统-线程的处理，操作系统再去告诉-CPU怎么处理线程，由CPU调度执行"><a href="#注意-线程开启不一定马上执行，JVM去告诉操作系统-线程的处理，操作系统再去告诉-CPU怎么处理线程，由CPU调度执行" class="headerlink" title="注意: 线程开启不一定马上执行，JVM去告诉操作系统 线程的处理，操作系统再去告诉 CPU怎么处理线程，由CPU调度执行"></a>注意: 线程开启不一定马上执行，JVM去告诉操作系统 线程的处理，操作系统再去告诉 CPU怎么处理线程，由CPU调度执行</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>跟我一起学算法(概念章)</title>
    <url>/mathematics-concept.html</url>
    <content><![CDATA[<p><strong>走进数学的奇妙世界</strong></p>
<a id="more"></a>

<h1 id="衡量算法"><a href="#衡量算法" class="headerlink" title="衡量算法"></a>衡量算法</h1><p><strong>时间复杂度和空间复杂度</strong></p>
<h1 style="color:red;font-size:50px">时间复杂度: 程序的运行时间和效率</h1>

<h1 style="color:red;font-size:50px">空间复杂度: 程序运行时所占用的内存空间</h1>

<h1 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h1><p><strong>数据结构是数据的组织、管理和存储格式，其使用目的是为了高效地访问和修改数据</strong></p>
<p><strong>数据结构包含数组、链表这样的线性数据结构，也包含树、图这样的复杂数据结构</strong></p>
<h1 id="什么是时间复杂度"><a href="#什么是时间复杂度" class="headerlink" title="什么是时间复杂度"></a>什么是时间复杂度</h1><p><strong>时间复杂度是对一个算法运行时间长短的量度，用大O表示，记作T(n)=O(f(n))</strong></p>
<p><strong>常见的时间复杂度按照从低到高的顺序，包括O(1)、O(logn)、O(n)、O(nlogn)、O(n2)等</strong></p>
<h1 id="什么是空间复杂度"><a href="#什么是空间复杂度" class="headerlink" title="什么是空间复杂度"></a>什么是空间复杂度</h1><p><strong>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度，用大O表示，记作S(n)=O(f(n))</strong></p>
<p><strong>常见的空间复杂度按照从低到高的顺序，包括O(1)、O(n)、O(n2)等。其中递归算法的空间复杂度和递归深度成正比</strong></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>跟我一起学数学</title>
    <url>/mathematics.html</url>
    <content><![CDATA[<p><strong>走进数学的奇妙世界</strong></p>
<a id="more"></a>

<h1 id="高斯算法"><a href="#高斯算法" class="headerlink" title="高斯算法"></a>高斯算法</h1><p><strong>用于解决 1+2+3+4+5+6+7……一直加到n</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">(首项 + 末项) * 项数 &#x2F; 2<br></code></pre></td></tr></table></figure>


<h1 id="衡量算法"><a href="#衡量算法" class="headerlink" title="衡量算法"></a>衡量算法</h1><p><strong>时间复杂度和空间复杂度</strong></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>鲲鹏微认证(日后会更新)</title>
    <url>/Kunpeng-micro-authentication.html</url>
    <content><![CDATA[<p><strong>鲲鹏微认证笔记</strong></p>
<a id="more"></a>

<h1 id="C-C-代码迁移"><a href="#C-C-代码迁移" class="headerlink" title="C/C++代码迁移"></a>C/C++代码迁移</h1><h2 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h2><ul>
<li>典型的如C/C++/Go语言, 都属于编译型语言, 编译型语言开发的程序从x86处理器迁移到鲲鹏处理器时, 必须经过重新编译才能运行</li>
</ul>
<ul>
<li>从源码到程序的过程<ul>
<li>源码需要由编译器, 汇编器翻译成机器指令, 再通过链接器链接库函数生成机器语言程序<br>
<br>

</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">源码  ---------&gt;  预处理  ---------&gt;  预编译文件  ---------&gt;  编译  ---------&gt;  汇编代码    -----------&gt;  汇编  ---------&gt;  目标文件  ---------&gt;  链接  ---------&gt;  可执行文件<br><br>test.c      gcc -E test.c -o test.i      text.i       gcc -S test.io test.s      text.s          gcc -S test.so test.o     test.o       gcc -S test.so test.o     text<br></code></pre></td></tr></table></figure>
<h2 id="C-C-代码需要迁移的原因"><a href="#C-C-代码需要迁移的原因" class="headerlink" title="C/C++代码需要迁移的原因"></a>C/C++代码需要迁移的原因</h2><ul>
<li>架构差异:<ul>
<li>x86和鲲鹏处理器(aarch64)属于不同架构</li>
</ul>
</li>
</ul>
<ul>
<li>指令极差异:<ul>
<li>x86属于复杂指令集</li>
<li>鲲鹏处理器(aarch64)属于精简指令集</li>
</ul>
</li>
</ul>
<ul>
<li>向量寄存器的差异:<ul>
<li>x86和鲲鹏处理器(aarch64)使用向量寄存器不同, 向量指令集也存在差异</li>
</ul>
</li>
</ul>
<h1 id="C-C-代码构建编译过程"><a href="#C-C-代码构建编译过程" class="headerlink" title="C/C++代码构建编译过程"></a>C/C++代码构建编译过程</h1><h2 id="C-C-代码工程主要包括两类文件"><a href="#C-C-代码工程主要包括两类文件" class="headerlink" title="C/C++代码工程主要包括两类文件:"></a>C/C++代码工程主要包括两类文件:</h2><ul>
<li>编译构建脚本<ul>
<li>Makefile CmakeLists.txt Configure autogen.sh bootstrap.sh等等</li>
</ul>
</li>
</ul>
<ul>
<li>C/C++源码<ul>
<li>src examples tests等等</li>
</ul>
</li>
</ul>
<h2 id="可能涉及到的移植项"><a href="#可能涉及到的移植项" class="headerlink" title="可能涉及到的移植项"></a>可能涉及到的移植项</h2><ul>
<li>编译构建脚本类文件<ul>
<li>编译选项的移植(指定数据类型, 生成代码特性, 目标执行器架构, 处理器硬件加速功能等)</li>
</ul>
</li>
</ul>
<ul>
<li>C/C++代码类文件<ul>
<li>编译宏移植(用户自定义宏移植, 编译器自定义宏移植)</li>
<li>编译器自带builtin函数移植</li>
<li>内联汇编移植</li>
<li>SSE intrinsic函数移植(MMX/SEE类函数移植, AVX函数移植)</li>
</ul>
</li>
</ul>
<!-- # C/C++代码编译构建过程

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">                  <br>~~~ --&gt;<br><br># 直接真题 CTRL+F<br><br>## 判断题<br><br></code></pre></td></tr></table></figure>
<p>yum和rpm安装方式本质都是基于RPM包来安装软件 √</p>
<p>交叉编译是在一个平台 上生成另一个平台上可执行的代码 √</p>
<p>BenchmarkSQL使用GCC编译进行编译安装 ×</p>
<p>Dockerfile中的每一条指令 都分别对应镜像的每一层 √</p>
<p>C/C++语言属于编译型语言，其编译后得到的可执行程序执行时依赖的指令是与CPU架构不相关的，因此此类应用程序不需要移植 ×</p>
<p>Centos是开源的操作系统，Debian不属于开源操作系统 ×</p>
<p>Tai Shan服务器的CPU是ARM架构的 √</p>
<p>华为鲲鹏云服务产品发布前，需要先加入鲲鹏凌云伙伴计划并通过鲲鹏云服务兼容性认证 √</p>
<p>通过”ps -ef | grep PostgreSQL ”命令可以确认数据库进程是否启动 ×</p>
<p>为方便客户业务的统一部署， 镜像服务建立起了镜像与弹性云服务器之间、镜像与裸金属服务器之间、以及镜像与外部文件之间的直接联系。 √</p>
<p>一个弹性公网IP能同时给多个弹性云服务器使用。 ×</p>
<p>华为鲲鹏性能优化工具支持分析C/C+ +和Java Mixed-Mode两种应用程序类型。 √</p>
<p>对于Java类应用程序进行性能分析时，由于受java的jit编译的限制，函数分析结果中只能查看到对应的源码，无法查看汇编和代码流图。 √</p>
<p>HiBench支持在编译时指定编译模块。 √</p>
<p>docker的基础镜像中包含父镜像。 ×</p>
<p>华为鲲鹏云服务可提供KC1型ECS和KS1型BMS. √</p>
<p>Tai Shan服务器必须使用特殊的专有内存和硬盘. x</p>
<p>Java/Python的虚拟机不支撑再鲲鹏上源码编译, 只能使用yum方式安装. x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>&lt;!-- **个人理解Python是解释型语言,Java在鲲鹏里面也被强制列为解释型语言** --&gt;<br>&lt;!-- **用户想安装按RPM方式发行的软件, 只需简单地输入命令rpm -ivh xxx.rpm即可** --&gt;<br>## 单选题<br><br></code></pre></td></tr></table></figure>
<p>类RedHat系统提供了什么命令来安装, 卸载和升级rpm软件包    (A)<br>    A. rpm<br>    B. dpkg<br>    C. tar<br>    D. apt-get</p>
<p>下面哪个工具不属于鲲鹏开发套件?      (A)<br>    A. 分析扫码工具<br>    B. 代码迁移工具<br>    C. 性能调优工具<br>    D. Vtune</p>
<p>使用命令rpmbuild -bb XX. spec (XX表示文件名)制作RPM包时，RPM包生成在什么目录下?      (C)<br>A、BUILD B、SOURCE C、RPMS D、SPEC</p>
<p>在BenchmarkSQL执行以下哪个脚本，可以对表中写入数据?      (A)<br>A、runLoader. sh B、runBenchmark. sh C、runDatabaseBuild. sh D、runDatabaseDestroy. Sh</p>
<p>BenchmarkSQL执行以下哪个脚本加载数据?      (B)<br>A、runBenchmark. sh B、.runDat abaseBuild. sh C、runDat abaseDestroy. sh D、runLoader. sh</p>
<p>代码扫描工具Dependency Advisor是部署在哪种架构的服务器或者弹性云服务器上?      (D)<br>A、ARM B、鲲鹏 C、Power D、x86</p>
<p>以下哪个不属于镜像管理特性?      (D)<br>A、修改镜像 B、删除镜像 C、镜像导出 D、查询镜像</p>
<p>Hi Bench是什么？      (C)<br>A、大数据开发框架 B、大数据可视化平台 C、大数据基准测试套件 D、大数据分析工具</p>
<p>关于容器的删除操作，以下哪项是正确的？      (C)<br>A、可通过“docker rm &lt;容器ID&gt;”删除正在运行的容器<br>B、可通过“docker rmi &lt;容器ID&gt;”删除已停止的容器<br>C、可通过“docker rm &lt;容器ID&gt;”删除已停止的容器<br>D、可通过“docker rmi &lt;容器ID&gt;”删除正在运行的容器</p>
<p>关于华为鲲鹏迁移工具分析报告提供的依赖库so文件的操作建议，以下哪项是不正确的?      (A)<br>A、目前不存在鲲鹏平台无法识别的依赖库So文件<br>B、鲲鹏平台不支持该类依赖库S0文件,需要用户自行处理<br>C、如果依赖库so文件已经过鲲鹏平台验证，但无二进制安装包,则需要用户下载依赖库源码，然后上传至目标服务器进行编译安装<br>D、如果依赖库S0文件已经过鲲鹏平台验证，且已有二进制安装包,则用户可以直按将工具提供的开源版本依赖库安装包下载到本地，然后上传至目标服务器进行安装使用</p>
<p>以下关于web界面访问华为鲲鹏代码迁移工具的方式,描述正确的是      (A)<br>A、单用户单任务访问<br>B、多用户多任务并发访间<br>C、多用户同时访问<br>D、单用户多任务访问</p>
<p>以下哪个选项不是iSula通用容器引辈的特点?      (C)<br>A、升级不中断业务 B、增强安全性和调测特性 C、大幅提升容器性能 D、快速灵活</p>
<p>在修改BenchmarkSQL连接PostereSQL的配置文件时，关于runMins和runTxnsPerTerminal这两个参数的设置，以下哪项是正确的?      (A)<br>A、必须有一个设定为0  B、必须相等 C、均为0   D、必须不相等，且均不为0</p>
<p>扫描工具Dependency Advi sor支持以下哪种使用模式?      (A)<br>A、web B、make C、test D、name</p>
<p>如果要放开外部对弹性云服务器的8080端口访问，可以通过配置以下哪项功能实现?      (C)<br>A、弹性公网IP带宽 B、主机组 C、安全组 D、VPC子网</p>
<p>系统盘镜像类型不包含以下哪个      (A)<br>A、机架服务器系统盘镜像 B、普通云服务器系统盘镜像 C、GPU加速云服务器系统盘镜像 D、裸金属云服务器系统盘镜像</p>
<p>私有镜像通过以下哪个功能可以实现本地业务部署和公有云业务部署的统一化持久化?      (A)<br>A、镜像导出  B、镜像市场 C、镜像复制 D、镜像共享</p>
<p>以下哪个命令表示只生成rpm源代码的命令?      (B)<br>A、rpmbuild -ba B、rpmbuild- bs C、rpmbuild -bc D、rpmbuild -bb</p>
<p>以下哪个不是使用rpm工具安装软件?      (A)<br>A、自动安装依赖包 B、全自动安装 C、能够进行数据库的记载 D、自定义安装路径</p>
<p>提供预装操作系统、应用环境和各类软件的优质第三方镜像是属于以下哪种镜像?      (C)<br>A、共享镜像 B、私有镜像 C、市场镜像 D、公共镜像</p>
<p>ssh协议默认端口号是什么?      (C)<br>A、9600 B、23 C、22 D、513</p>
<p>关于容器相关概念的描述，以下哪项是错误的?      (C)<br>A、标签:可用于识别不同的变体或版本<br>B、仓库: 一个软件库， 存储了可下载并安装在系统中的软件包<br>C、镜像:容器的运行实例<br>D、容器:image的运行实例</p>
<p>使用gcc编译时，编译选项-march的作用是什么?      (A)<br>A、指定指令集<br>B、指定cpu型号<br>C、指定流水线<br>D、提升兼容性</p>
<p>下列哪个是华为鲲鹏生态兼容的非国产操作系统?      (C)<br>A、BCLinux<br>B、openEuler<br>C、Ubuntu<br>D、Kylin</p>
<p>谁是Linux之父?      (D)<br>A、Richard Matthew Stal lman B、Andrew Morton C、Bill Gates D、LimusTorval ds</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br>## 多选题<br><br></code></pre></td></tr></table></figure>
<p>可以从哪些方面对Post greSQL进行性能调优?      (A C)<br>A、数据库参数 B、硬件 C、编译参数 D、操作系统</p>
<p>使用BenchmarkSQL前需要进行哪些操作?      (A C D)<br>A、配置环境变量 B、重启服务器 C、安装JDK  D、使环境变量生效</p>
<p>关于rpm包和SRPM包的描述，以下正确的是?      (A B D)<br>A、SRPM包含源代码而RPM不包含 B、rpm包可以直接安装，SRPM包不可以 C、两者都可修改编译参数 D、rpm包是已编译的程序，而SRPM不是</p>
<p>镜像服务的典型应用场景有哪些?      (A B C)<br>A、快速部署应用 B、批量复制弹性云服务器 C、传统业务上云 D、实时同步数据</p>
<p>镜像文件一般包括以下哪些内容?      (A C)<br>A、预装的软件 B、数据盘 C、操作系统 D、系统盘</p>
<p>以下哪些不是针对spec文件的操作命令?      (A B)<br>A、cmake B、makefile C、make D、make install</p>
<p>rpm安装包有哪些优点?      (A B C D)<br>A、提供软件版本资讯，软件名称，软件用途等相关信息，便于了解软件<br>B、内含编译程序，免编译<br>C、使用数据库记录rpm文件的相关参数，便于升级、移除、查询与验证<br>D、预先检查系统版本，可避免文 件被错误安装</p>
<p>创建C/C++程序性能分析任务时，以下关于分析类型，描述正确的是?      (A B C)<br>A、Profile System,即采集整个服务器系统，无需关注系统中有哪些类型的应用在运行，采集时长需要配置参数控制，适用于多业务混合运行和有子进程的场景<br>B、Attach to Process,即该采集对象针对正在运行的应用程序，通过关联到运行该应用程序的PID的方式，来实时跟踪和采集该应用程序的性能数据,采集时长需要配置参数控制，适用于某些应用需要长时间持续运行和采集的场景<br>C、Launch Application,即采集启动的时候，同时启动Application,采集时长受Appl ication的执行时间来控制，适用于Application运行时间较短的场景<br>D、C/C++程序仅支持Launch Application和Attach to Process两种分析类型</p>
<p>以下哪些属于Dockerfile的指令？      (A B C D)<br>A、FROM B、CMD C、EXPOSE D、RUN</p>
<p>关于使用源码方式安装加速引擎软件，以下说法正确的有哪些?      (A B C D)<br>A、编译安装zlib加速库<br>B、在下载好的源码目录下，使用make命令编译加速器<br>C、编译安装加速器OpenSSL引擎<br>D、编译安装Warpdrive驱动开发库<br>E、安装openssl 1.1.1a或以上版本<br>F、安装内核开发包kernel-devel</p>
<p>同一段C/C++代码，在鲲鹏处理器与x86架构处理器上编译的可执行程序有哪些不同?      (A B)<br>A、指令 B、指令使用的寄存器 C、功能 D、文件结构</p>
<p>以下关于X6000 V5描述正确的是?      (A C D)<br>A、机框支持2个3000w电源<br>B、每个服务器节点支持3个半高半长标准PCIe插槽<br>C、支持4个半宽双路服务器节点<br>D、每个服务器节点支持16个DDR4 DIM插槽</p>
<p>以下哪些场景属于数据密集紧耦合场景?      (C D)<br>A、基因测序<br>B、流体动力学<br>C、天气预测<br>D、环境预测</p>
<p>在PostgreSQL迁移流程中，包含以下哪些步骤?      (A D)<br>A、迁移分析 B、性能测试 C、环境准备 D、源码修改</p>
<p>通过以下哪些方式可以获取华为鲲鹏系列服务?      (B C)<br>A、购买华为云鲲鹏弹性云服务器<br>B、购买基于x86架构的弹性云服务器<br>C、购买RH服务器<br>D、购买Tai shan服务器</p>
<p>私有镜像包含以下哪些功能?      (A B C D)<br>A、镜像加密 B、镜像共享 C、镜像导出 D、镜像复制</p>
<p>在华为公有云中，私有镜像包括?      (B C)<br>A、市场镜像 B、系统镜像 C、数据镜像 D、共享镜像</p>
<p>docker run -p 6379:6379 v $PWD/data:/data -d t_arm64v8/centos_ redis:5.05 redis server –appendonly yes关于此命令的描述，以下哪些是正确的?      (B C D)<br>A、“6379:6379” :将主机的6379端口映射到容器的6379端口<br>B、“appendonly yes”，打开持久化配置<br>C、该命令功能是启动容器，并在容器启动时候执行容器内的redis-server服务<br>D、“$PWD/data: /data” :将主机中当前目录下的data挂载到容器的/data</p>
<p>使用华为鲲鹏代码迁移工具对源码进行扫描分析时，需要进行哪些方面的检查和分析?      (A B C D)<br>A、检查x86平台与鲲鹏平台相异的编译器宏、编译选项、buildin函数、attribute函数等列表<br>B、对比输入的(S0文件名)列表和S0依赖库白名单<br>C、扫描分析用户软件目标二进制文件依赖的源文件集合<br>D、检查Make file中的编译链接</p>
<p>C/C++语言开发的源码在编译时，以下哪些模块是不需要的？      (B C)<br>A、汇编器 B、存储器 C、加载器 D、编译器</p>
<p>以下哪些是Tai Shan大数据方案使用的主要服务器型号?      (A B)<br>A、2280均衡型 B、5280存储型 C、XA320计算节点 D、X6000高密型</p>
<p>以下关于华为鲲鹏920的特点描述正确的有哪些?      (C D)<br>A、性能可匹配Intel Skylake(V5) 高端处理器型号<br>B、CPU最多支持2个100GE网口，支持RoCE特性<br>C、相比同等性能的Intel处理器，功耗更低<br>D、支持8内存通道，带宽高于Intel Skyl ake (V5)的6通道</p>
<pre><code>












</code></pre>
-->]]></content>
  </entry>
  <entry>
    <title>私有云配置(个人笔记)</title>
    <url>/Private-cloud.html</url>
    <content><![CDATA[<p><strong>要有Linux基础</strong></p>
<a id="more"></a>


<h1 id="空白分区划分"><a href="#空白分区划分" class="headerlink" title="空白分区划分"></a>空白分区划分</h1><p><strong>CentOS7的安装与CentOS6.5的安装有明显的区别。在CentOS7安装过程中，设置分区都需要一个挂载点，这样一来就无法创建两个空白的磁盘分区作为cinder服务和swift服务的存储磁盘了</strong></p>
<p><strong>所以我们应该在系统安装过程中留下足够的磁盘大小，系统安装完成后，使用命令parted划分新分区，然后使用mkfs.xfs进行文件系统格式化，完成空白分区的划分  “强烈建议使用fdisk”</strong></p>
<p><strong>parted具体命令如下: 不建议使用</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@compute ~]<span class="hljs-comment"># parted /dev/md126</span><br></code></pre></td></tr></table></figure>

<p><strong>创建swift分区，从702G到</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@compute ~]<span class="hljs-comment"># (parted) mkpart swift 702G 803G    803G                                                  </span><br>[root@compute ~]<span class="hljs-comment"># mkfs.xfs /dev/md126p5</span><br></code></pre></td></tr></table></figure>
<p><strong>fdisk具体命令如下: 强烈建议使用</strong></p>
<p><strong>查看</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@compute ~]<span class="hljs-comment"># fdisk -l </span><br></code></pre></td></tr></table></figure>
<p><strong>sda为硬盘号</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@compute ~]<span class="hljs-comment"># fdisk /dev/sda </span><br></code></pre></td></tr></table></figure>

<p><strong>选择m n是创建 d是删除 w是保存</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): m<br>Command action<br>   a   toggle a bootable flag<br>   b   edit bsd disklabel<br>   c   toggle the dos compatibility flag<br>   d   delete a partition<br>   g   create a new empty GPT partition table<br>   G   create an IRIX (SGI) partition table<br>   l   list known partition types<br>   m   <span class="hljs-built_in">print</span> this menu<br>   n   add a new partition<br>   o   create a new empty DOS partition table<br>   p   <span class="hljs-built_in">print</span> the partition table<br>   q   quit without saving changes<br>   s   create a new empty Sun disklabel<br>   t   change a partition<span class="hljs-string">&#x27;s system id</span><br>   u   change display/entry units<br>   v   verify the partition table<br>   w   write table to disk and <span class="hljs-built_in">exit</span> <br></code></pre></td></tr></table></figure>
<h1 id="配置网络-主机名-修改和添加"><a href="#配置网络-主机名-修改和添加" class="headerlink" title="配置网络 主机名 修改和添加"></a>配置网络 主机名 修改和添加</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># vi /etc/sysconfig/network-scripts/ifcfg-enp*(具体的网口)文件</span><br></code></pre></td></tr></table></figure>
<p><strong>(1) controller节点 配置网络:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># 私网的ip地址</span><br>[root@controller]<span class="hljs-comment"># device=enp8s0</span><br>[root@controller]<span class="hljs-comment"># type=Ethernet</span><br>[root@controller]<span class="hljs-comment"># onboot=yes</span><br>[root@controller]<span class="hljs-comment"># nm_controlled=no</span><br>[root@controller]<span class="hljs-comment"># bootroto=static</span><br>[root@controller]<span class="hljs-comment"># ipaddr=192.168.88.131</span><br>[root@controller]<span class="hljs-comment"># prefix=24</span><br>[root@controller]<span class="hljs-comment"># </span><br>[root@controller]<span class="hljs-comment"># 公网的ip地址</span><br>[root@controller]<span class="hljs-comment"># device=enp9s0</span><br>[root@controller]<span class="hljs-comment"># type=Ethernet</span><br>[root@controller]<span class="hljs-comment"># onboot=yes</span><br>[root@controller]<span class="hljs-comment"># nm_controlled=no</span><br>[root@controller]<span class="hljs-comment"># bootroto=static</span><br>[root@controller]<span class="hljs-comment"># ipaddr=192.168.200.10</span><br>[root@controller]<span class="hljs-comment"># prefix=24</span><br></code></pre></td></tr></table></figure>
<p><strong>生效</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># service network restart</span><br></code></pre></td></tr></table></figure>
<p><strong>查看</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># ip a</span><br></code></pre></td></tr></table></figure>
<p><strong>配置主机名: 输入完成 按ctrl+d 退出  重新登陆</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># hostnamectl set-hostname controller</span><br><br></code></pre></td></tr></table></figure>
<p><strong>(2) compute 节点 配置网络:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># 私网的ip地址</span><br>[root@controller]<span class="hljs-comment"># device=enp8s0      //设备名称</span><br>[root@controller]<span class="hljs-comment"># type=Ethernet</span><br>[root@controller]<span class="hljs-comment"># onboot=yes</span><br>[root@controller]<span class="hljs-comment"># nm_controlled=no</span><br>[root@controller]<span class="hljs-comment"># bootroto=static</span><br>[root@controller]<span class="hljs-comment"># ipaddr=192.168.100.20</span><br>[root@controller]<span class="hljs-comment"># prefix=24</span><br>[root@controller]<span class="hljs-comment"># </span><br>[root@controller]<span class="hljs-comment"># 公网的ip地址</span><br>[root@controller]<span class="hljs-comment"># device=enp9s0</span><br>[root@controller]<span class="hljs-comment"># type=Ethernet</span><br>[root@controller]<span class="hljs-comment"># onboot=yes</span><br>[root@controller]<span class="hljs-comment"># nm_controlled=no</span><br>[root@controller]<span class="hljs-comment"># bootroto=static</span><br>[root@controller]<span class="hljs-comment"># ipaddr=192.168.200.20</span><br>[root@controller]<span class="hljs-comment"># prefix=24</span><br></code></pre></td></tr></table></figure>
<p><strong>生效</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># service network restart</span><br></code></pre></td></tr></table></figure>

<p><strong>查看</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># ip a</span><br></code></pre></td></tr></table></figure>
<p><strong>配置主机名: 输入完成 按ctrl+d 退出  重新登陆</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># hostnamectl set-hostname compute/controller</span><br></code></pre></td></tr></table></figure>
<p><strong>查看</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># hostname</span><br></code></pre></td></tr></table></figure>
<h1 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h1><p><strong>Controller和compute节点</strong></p>
<p><strong>(1)yum源备份</strong></p>
<p><strong>命令解释: 用来为文件或目录改名、或将文件或目录移入其它位置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># mv /etc/yum.repos.d/*  /opt/</span><br></code></pre></td></tr></table></figure>
<p><strong>(2)创建repo文件</strong></p>
<p><strong>controller 在/etc/yum.repos.d创建源文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># vi contrller.repo   </span><br></code></pre></td></tr></table></figure>
<p><strong>配置本地file</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># [centos]</span><br>[root@controller]<span class="hljs-comment"># name=centos</span><br>[root@controller]<span class="hljs-comment"># baseurl=file:///opt/centos</span><br>[root@controller]<span class="hljs-comment"># gpgcheck=0</span><br>[root@controller]<span class="hljs-comment"># enabled=1</span><br>[root@controller]<span class="hljs-comment"># [iaas]</span><br>[root@controller]<span class="hljs-comment"># name=iaas</span><br>[root@controller]<span class="hljs-comment"># baseurl=file:///opt/iaas-repo</span><br>[root@controller]<span class="hljs-comment"># gpgcheck=0</span><br>[root@controller]<span class="hljs-comment"># enabled=1</span><br></code></pre></td></tr></table></figure>
<p><strong>查看</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># yum repolist</span><br>[root@controller]<span class="hljs-comment"># cat [文件名]</span><br></code></pre></td></tr></table></figure>
<p><strong>compute 在/etc/yum.repos.d创建centos.repo源文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># vi compute.repo </span><br></code></pre></td></tr></table></figure>
<p><strong>全部移走</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># mv * /tmp</span><br></code></pre></td></tr></table></figure>
<p><strong>配置ftp</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># [centos]</span><br>[root@controller]<span class="hljs-comment"># name=centos</span><br>[root@controller]<span class="hljs-comment"># baseurl=ftp://192.168.88.131/centos</span><br>[root@controller]<span class="hljs-comment"># gpgcheck=0</span><br>[root@controller]<span class="hljs-comment"># enabled=1</span><br>[root@controller]<span class="hljs-comment"># [iaas]</span><br>[root@controller]<span class="hljs-comment"># name=iaas</span><br>[root@controller]<span class="hljs-comment"># baseurl=ftp://192.168.88.131/iaas-repo</span><br>[root@controller]<span class="hljs-comment"># gpgcheck=0</span><br>[root@controller]<span class="hljs-comment"># enabled=1</span><br></code></pre></td></tr></table></figure>
<p><strong>配置http</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># [centos]</span><br>[root@controller]<span class="hljs-comment"># name=centos</span><br>[root@controller]<span class="hljs-comment"># baseurl=http://192.168.88.131/centos</span><br>[root@controller]<span class="hljs-comment"># gpgcheck=0</span><br>[root@controller]<span class="hljs-comment"># enabled=1</span><br>[root@controller]<span class="hljs-comment"># [iaas]</span><br>[root@controller]<span class="hljs-comment"># name=iaas</span><br>[root@controller]<span class="hljs-comment"># baseurl=http://192.168.88.131/iaas-repo</span><br>[root@controller]<span class="hljs-comment"># gpgcheck=0</span><br>[root@controller]<span class="hljs-comment"># enabled=1</span><br></code></pre></td></tr></table></figure>
<p><strong>查看</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># yum repolist</span><br>[root@controller]<span class="hljs-comment"># cat [文件名]</span><br></code></pre></td></tr></table></figure>

<h1 id="挂载iso文件"><a href="#挂载iso文件" class="headerlink" title="挂载iso文件"></a>挂载iso文件</h1><p><strong>挂载CentOS-7xxxx.iso</strong></p>
<p><strong>命令解释: mount挂载Linux系统外的文件, loop是mount用来加载loop设备的选项，不是文件系统类型</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># mount -o loop /home/sdq/CentOS-7-x86_64-DVD-2003.iso  /mnt</span><br></code></pre></td></tr></table></figure>
<p><strong>命令解释: 删除重来</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># rm -rf /opt/centos/*</span><br></code></pre></td></tr></table></figure>
<p><strong>mkdir创建</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># mkdir /opt/centos</span><br></code></pre></td></tr></table></figure>

<p><strong>查看</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># df</span><br></code></pre></td></tr></table></figure>

<p><strong>意思是并将光盘内的数据拷贝到centos文件夹中，数据有点多，要等一会</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># cp -rvf /mnt/* /opt/centos/</span><br></code></pre></td></tr></table></figure>

<p><strong>umount可卸除目前挂在Linux目录中的文件系统</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># umount  /mnt/</span><br></code></pre></td></tr></table></figure>
<p><strong>挂载XianDian-IaaS-v2.4.iso</strong></p>
<p><strong>mount挂载Linux系统外的文件, loop是mount用来加载loop设备的选项，不是文件系统类型</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># mount -o loop /home/sdq/chinaskills_cloud_iaas.iso  /mnt</span><br></code></pre></td></tr></table></figure>

<p><strong>意思是并将光盘内的数据拷贝到opt文件夹中，数据有点多，要等一会</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># cp -rvf /mnt/* /opt/</span><br></code></pre></td></tr></table></figure>
<p><strong>umount可卸除目前挂在Linux目录中的文件系统</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># umount  /mnt/</span><br></code></pre></td></tr></table></figure>
<h1 id="搭建ftp服务器，开启并设置自启"><a href="#搭建ftp服务器，开启并设置自启" class="headerlink" title="搭建ftp服务器，开启并设置自启"></a>搭建ftp服务器，开启并设置自启</h1><p><strong>安装vsftpd 默认-y= yes</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller ~]<span class="hljs-comment"># yum install vsftpd –y</span><br></code></pre></td></tr></table></figure>
<p><strong>添加anon_root=/opt/</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller ~]<span class="hljs-comment"># vi /etc/vsftpd/vsftpd.conf</span><br></code></pre></td></tr></table></figure>
<p><strong>启动服务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller ~]<span class="hljs-comment"># systemctl start vsftpd</span><br></code></pre></td></tr></table></figure>

<p><strong>查看</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># yum repolist</span><br></code></pre></td></tr></table></figure>
<p><strong>在开机时启用服务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller ~]<span class="hljs-comment"># systemctl enable vsftpd</span><br></code></pre></td></tr></table></figure>
<h1 id="搭建http服务器，开启并设置自启"><a href="#搭建http服务器，开启并设置自启" class="headerlink" title="搭建http服务器，开启并设置自启"></a>搭建http服务器，开启并设置自启</h1><p><strong>安装httpd 默认-y= yes</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller ~]<span class="hljs-comment"># rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br>[root@controller ~]<span class="hljs-comment"># yum install httpd –y</span><br></code></pre></td></tr></table></figure>
<p><strong>/var/www/html改”/opt”</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller ~]<span class="hljs-comment"># vi /etc/httpd/conf/httpd.conf</span><br></code></pre></td></tr></table></figure>
<p><strong>启动服务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller ~]<span class="hljs-comment"># systemctl start httpd</span><br></code></pre></td></tr></table></figure>

<p><strong>在开机时启用服务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller ~]<span class="hljs-comment"># systemctl enable httpd</span><br></code></pre></td></tr></table></figure>
<h1 id="配置防火墙和Selinux"><a href="#配置防火墙和Selinux" class="headerlink" title="配置防火墙和Selinux"></a>配置防火墙和Selinux</h1><p><strong>controller/compute都要</strong></p>
<p><strong>编辑selinux文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># vi /etc/selinux/config </span><br>[root@controller]<span class="hljs-comment"># SELINUX=permissive</span><br>[root@controller selinux]<span class="hljs-comment"># setenforce 0</span><br></code></pre></td></tr></table></figure>
<!-- [root@controller selinux]# getenforce     //查看 -->
<p><strong>查看</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># getenforce </span><br></code></pre></td></tr></table></figure>
<p><strong>关闭防火墙并设置开机不自启</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># systemctl stop firewalld.service</span><br>[root@controller]<span class="hljs-comment"># systemctl disable firewalld.service</span><br></code></pre></td></tr></table></figure>
<p><strong>查看</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># systemctl status firewalld.service</span><br></code></pre></td></tr></table></figure>
<p><strong>清除缓存和验证yum源 controller/compute都要</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># yum clean all</span><br>[root@controller]<span class="hljs-comment"># yum repolist</span><br></code></pre></td></tr></table></figure>
<h1 id="编辑环境变量"><a href="#编辑环境变量" class="headerlink" title="编辑环境变量"></a>编辑环境变量</h1><p><strong>controller和compute节点</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># yum install iaas-xiandian -y</span><br></code></pre></td></tr></table></figure>
<p><strong>编辑文件/etc/xiandian/openrc.sh, 此文件是安装过程中的各项参数, 根据每项参数上一行的说明及服务器实际情况进行配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># HOST_IP=192.168.88.131</span><br>[root@controller]<span class="hljs-comment"># HOST_PASS=000000</span><br>[root@controller]<span class="hljs-comment"># HOST_NAME=controller</span><br>[root@controller]<span class="hljs-comment"># HOST_IP_NODE=192.168.100.20</span><br>[root@controller]<span class="hljs-comment"># HOST_PASS_NODE=000000</span><br>[root@controller]<span class="hljs-comment"># HOST_NAME_NODE=compute</span><br>[root@controller]<span class="hljs-comment"># network_segment_IP=192.168.100.0/24</span><br>[root@controller]<span class="hljs-comment"># RABBIT_USER=openstack</span><br>[root@controller]<span class="hljs-comment"># RABBIT_PASS=000000</span><br>[root@controller]<span class="hljs-comment"># DB_PASS=000000</span><br>[root@controller]<span class="hljs-comment"># DOMAIN_NAME=demo</span><br>[root@controller]<span class="hljs-comment"># ADMIN_PASS=000000</span><br>[root@controller]<span class="hljs-comment"># DEMO_PASS=000000</span><br>[root@controller]<span class="hljs-comment"># KEYSTONE_DBPASS=000000</span><br>[root@controller]<span class="hljs-comment"># GLANCE_DBPASS=000000</span><br>[root@controller]<span class="hljs-comment"># GLANCE_PASS=000000</span><br>[root@controller]<span class="hljs-comment"># NOVA_DBPASS=000000</span><br>[root@controller]<span class="hljs-comment"># NOVA_PASS=000000</span><br>[root@controller]<span class="hljs-comment"># NEUTRON_DBPASS=000000</span><br>[root@controller]<span class="hljs-comment"># NEUTRON_PASS=000000</span><br>[root@controller]<span class="hljs-comment"># METADATA_SECRET=000000</span><br>[root@controller]<span class="hljs-comment"># INTERFACE_IP=192.168.88.131/192.168.100.20(controllerIP/computeIP)</span><br>[root@controller]<span class="hljs-comment"># INTERFACE_NAME=enp9s0 (外部网络网卡名称)</span><br>[root@controller]<span class="hljs-comment"># Physical_NAME=provider (外部网络适配器名称)</span><br>[root@controller]<span class="hljs-comment"># minvlan=101 (vlan网络范围的第一个vlanID)</span><br>[root@controller]<span class="hljs-comment"># maxvlan=200 (vlan网络范围的最后一个vlanID)</span><br>[root@controller]<span class="hljs-comment"># CINDER_DBPASS=000000</span><br>[root@controller]<span class="hljs-comment"># CINDER_PASS=000000</span><br>[root@controller]<span class="hljs-comment"># BLOCK_DISK=md126p4 (空白分区)</span><br>[root@controller]<span class="hljs-comment"># SWIFT_PASS=000000</span><br>[root@controller]<span class="hljs-comment"># OBJECT_DISK=md126p5 (空白分区)</span><br>[root@controller]<span class="hljs-comment"># STORAGE_LOCAL_NET_IP=192.168.100.20</span><br>[root@controller]<span class="hljs-comment"># HEAT_DBPASS=000000</span><br>[root@controller]<span class="hljs-comment"># HEAT_PASS=000000</span><br>[root@controller]<span class="hljs-comment"># ZUN_DBPASS=000000</span><br>[root@controller]<span class="hljs-comment"># ZUN_PASS=000000</span><br>[root@controller]<span class="hljs-comment"># KURYR_DBPASS=000000</span><br>[root@controller]<span class="hljs-comment"># KURYR_PASS=000000</span><br>[root@controller]<span class="hljs-comment"># CEILOMETER_DBPASS=000000</span><br>[root@controller]<span class="hljs-comment"># CEILOMETER_PASS=000000</span><br>[root@controller]<span class="hljs-comment"># AODH_DBPASS=000000</span><br>[root@controller]<span class="hljs-comment"># AODH_PASS=000000</span><br></code></pre></td></tr></table></figure>
<h1 id="通过脚本安装服务"><a href="#通过脚本安装服务" class="headerlink" title="通过脚本安装服务"></a>通过脚本安装服务</h1><p><strong>执行脚本iaas-pre-host.sh进行安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller ~]<span class="hljs-comment"># iaas-pre-host.sh</span><br></code></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller ~]<span class="hljs-comment"># chronyc sources -v</span><br></code></pre></td></tr></table></figure>
<h1 id="通过脚本安装数据库服务"><a href="#通过脚本安装数据库服务" class="headerlink" title="通过脚本安装数据库服务"></a>通过脚本安装数据库服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-mysql.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="通过脚本安装keystone服务"><a href="#通过脚本安装keystone服务" class="headerlink" title="通过脚本安装keystone服务"></a>通过脚本安装keystone服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-keystone.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="通过脚本安装glance服务"><a href="#通过脚本安装glance服务" class="headerlink" title="通过脚本安装glance服务"></a>通过脚本安装glance服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-glance.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h1><p><strong>首先下载(Wget)提供的系统镜像到本地，本次以上传CentOS_7.5_x86_64镜像为例 安装Wget，从Ftp服务器上下载镜像到本地</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># source admin-openrc.sh</span><br>[root@controller]<span class="hljs-comment"># glance image-create --name &quot;CentOS7.5&quot; --disk-format qcow2  --container-format bare --progress &lt;       /opt/images/CentOS_7.5_x86_64_XD.qcow2  </span><br></code></pre></td></tr></table></figure>
<h1 id="安装Nova计算服务"><a href="#安装Nova计算服务" class="headerlink" title="安装Nova计算服务"></a>安装Nova计算服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-nova-controller.sh</span><br></code></pre></td></tr></table></figure>
<p><strong>Compute节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-nova-compute.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="安装Neutron网络服务"><a href="#安装Neutron网络服务" class="headerlink" title="安装Neutron网络服务"></a>安装Neutron网络服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-neutron-controller.sh</span><br></code></pre></td></tr></table></figure>
<p><strong>Compute节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-neutron-compute.sh</span><br></code></pre></td></tr></table></figure>



<h1 id="安装Dashboard服务"><a href="#安装Dashboard服务" class="headerlink" title="安装Dashboard服务"></a>安装Dashboard服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># aas-install-dashboard.sh</span><br></code></pre></td></tr></table></figure>

<h1 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h1><p><strong>打开浏览器访问Dashboard, 网址<a href="http://controller/">http://controller</a> (或本机内网ip) /dashboard</strong><br><strong>注: 检查防火墙规则，确保允许http服务相关端口通行，或者关闭防火墙</strong></p>
<h1 id="创建云主机"><a href="#创建云主机" class="headerlink" title="创建云主机"></a>创建云主机</h1><p><strong>(1) 管理员-&gt;资源管理-&gt;云主机类型-&gt;创建云主机类型</strong></p>
<p><strong>(2) 管理员-&gt;网络-&gt;网络-&gt;创建网络</strong></p>
<p><strong>(2) 项目-&gt;网络-&gt;安全组-&gt;管理规则-&gt;添加规则(ICMP、TCP、UDP)</strong> </p>
<p><strong>(4) 项目-&gt;资源管理-&gt;云主机-&gt;创建云主机</strong></p>
<h1 id="安装Cinder块存储服务"><a href="#安装Cinder块存储服务" class="headerlink" title="安装Cinder块存储服务"></a>安装Cinder块存储服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-cinder-controller.sh</span><br></code></pre></td></tr></table></figure>
<p><strong>Compute节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-cinder-compute.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="验证-以后会用到"><a href="#验证-以后会用到" class="headerlink" title="验证  [以后会用到]"></a>验证  [以后会用到]</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">使用cinder create 创建一个新的卷<br>[root@controller]<span class="hljs-comment"># cinder create  --display-name myVolume 1</span><br>通过cinder list 命令查看是否正确创建<br>[root@controller]<span class="hljs-comment"># cinder list </span><br></code></pre></td></tr></table></figure>
<p><strong>Compute节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-neutron-compute.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="安装Swift对象存储服务"><a href="#安装Swift对象存储服务" class="headerlink" title="安装Swift对象存储服务"></a>安装Swift对象存储服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-swift-controller.sh</span><br></code></pre></td></tr></table></figure>
<p><strong>Compute节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-swift-compute.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="安装Heat编配服务"><a href="#安装Heat编配服务" class="headerlink" title="安装Heat编配服务"></a>安装Heat编配服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-heat.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="安装Zun服务"><a href="#安装Zun服务" class="headerlink" title="安装Zun服务"></a>安装Zun服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-zun-controller.sh</span><br></code></pre></td></tr></table></figure>
<p><strong>Compute节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-zun-compute.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="上传镜像-1"><a href="#上传镜像-1" class="headerlink" title="上传镜像"></a>上传镜像</h1><p><strong>以CentOS7_1804.tar镜像为例, CentOS7_1804.tar镜像包存放在XianDian-IaaS-v2.4.iso镜像包中, 将docker镜像上传到glance中, 通过openstack使用镜像启动容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># source /etc/keystone/admin-openrc.sh</span><br>[root@controller]<span class="hljs-comment"># openstack image create centos7.5 --public --container-format docker --disk-format raw &lt; CentOS7_1804.tar</span><br></code></pre></td></tr></table></figure>
<h1 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h1><p><strong>通过glance存储镜像启动容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># zun run --image-driver glance centos7.5</span><br>[root@controller]<span class="hljs-comment"># zun list</span><br></code></pre></td></tr></table></figure>
<h1 id="安装Ceilometer监控服务"><a href="#安装Ceilometer监控服务" class="headerlink" title="安装Ceilometer监控服务"></a>安装Ceilometer监控服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-ceilometer-controller.sh</span><br></code></pre></td></tr></table></figure>
<p><strong>Compute节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-ceilometer-compute.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="安装Aodh监控服务"><a href="#安装Aodh监控服务" class="headerlink" title="安装Aodh监控服务"></a>安装Aodh监控服务</h1><p><strong>Controller节点 执行以下脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># iaas-install-aodh.sh</span><br></code></pre></td></tr></table></figure>
<h1 id="更新-清除所有"><a href="#更新-清除所有" class="headerlink" title="更新/清除所有"></a>更新/清除所有</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># yum clean all</span><br></code></pre></td></tr></table></figure>
<h1 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h1><p><strong>httpd为服务名称</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@controller]<span class="hljs-comment"># systemctl restart httpd</span><br></code></pre></td></tr></table></figure>

<h1 id="添加控制节点资源到云平台"><a href="#添加控制节点资源到云平台" class="headerlink" title="添加控制节点资源到云平台"></a>添加控制节点资源到云平台</h1><p><strong>修改openrc.sh  把compute节点的IP和主机名改为controller节点的IP和主机名</strong></p>
<p><strong>运行iaas-install-nova-compute.sh  行过程中需要确认登录controller节点和输入controller节点root用户密码</strong></p>
<h1 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">scp -r [文件名] [用户名]@[ip]:&#x2F;home&#x2F;[用户名]<br></code></pre></td></tr></table></figure>
<h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">ssh [用户名]@[ip]<br></code></pre></td></tr></table></figure>
<p>生成ssh公钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">ssh-keygen<br></code></pre></td></tr></table></figure>
<p>复制密钥给主机2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">ssh-copy-id [用户名]@[ip]  <br></code></pre></td></tr></table></figure>
<p>然后输入主机2的密码</p>
<p>密钥位置 传过来的在用户目录  将要传的在root目录后缀为pub是公钥 rsa是私钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">cd &#x2F;home&#x2F;用户名<br>ls -a<br>cd .ssh<br></code></pre></td></tr></table></figure>
<h1 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">cat &#x2F;etc&#x2F;[路径]<br></code></pre></td></tr></table></figure>
<h1 id="查看当前路径"><a href="#查看当前路径" class="headerlink" title="查看当前路径"></a>查看当前路径</h1><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">pwd<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
</search>
